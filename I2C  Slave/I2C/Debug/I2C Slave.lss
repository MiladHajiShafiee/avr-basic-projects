
I2C Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800078  00800078  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002396  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a50  00000000  00000000  000028b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c4a  00000000  00000000  00003302  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00003f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000847  00000000  00000000  000042a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a24  00000000  00000000  00004aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000650f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  8a:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZN3I2c9SlaveInitEh>:
	}
	else											/* else return -4 */
	{
		return -4;
	}
}
  92:	62 b9       	out	0x02, r22	; 2
  94:	84 ec       	ldi	r24, 0xC4	; 196
  96:	86 bf       	out	0x36, r24	; 54
  98:	08 95       	ret

0000009a <_ZN3I2c6ListenEv>:
  9a:	06 b6       	in	r0, 0x36	; 54
  9c:	07 fe       	sbrs	r0, 7
  9e:	fd cf       	rjmp	.-6      	; 0x9a <_ZN3I2c6ListenEv>
  a0:	81 b1       	in	r24, 0x01	; 1
  a2:	98 2f       	mov	r25, r24
  a4:	98 7f       	andi	r25, 0xF8	; 248
  a6:	80 7f       	andi	r24, 0xF0	; 240
  a8:	80 36       	cpi	r24, 0x60	; 96
  aa:	41 f0       	breq	.+16     	; 0xbc <_ZN3I2c6ListenEv+0x22>
  ac:	98 3a       	cpi	r25, 0xA8	; 168
  ae:	41 f0       	breq	.+16     	; 0xc0 <_ZN3I2c6ListenEv+0x26>
  b0:	90 3b       	cpi	r25, 0xB0	; 176
  b2:	41 f0       	breq	.+16     	; 0xc4 <_ZN3I2c6ListenEv+0x2a>
  b4:	80 37       	cpi	r24, 0x70	; 112
  b6:	89 f7       	brne	.-30     	; 0x9a <_ZN3I2c6ListenEv>
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	08 95       	ret
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	08 95       	ret
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	08 95       	ret
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	08 95       	ret

000000c8 <_ZN3I2c7ReceiveEv>:

unsigned char I2c::Receive(void)
{
	uint8_t status;									/* Declare variable */
	TWCR = (1 << TWEN)|(1 << TWEA)|(1 << TWINT);	/* Enable TWI & generation of ack */
  c8:	84 ec       	ldi	r24, 0xC4	; 196
  ca:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));					/* Wait until TWI finish its current job */
  cc:	06 b6       	in	r0, 0x36	; 54
  ce:	07 fe       	sbrs	r0, 7
  d0:	fd cf       	rjmp	.-6      	; 0xcc <_ZN3I2c7ReceiveEv+0x4>
	status = TWSR & 0xF8;							/* Read TWI status register */
  d2:	81 b1       	in	r24, 0x01	; 1
	if (status == 0x80 || status == 0x90)			/* Check for data received & ack returned */
  d4:	98 2f       	mov	r25, r24
  d6:	98 7e       	andi	r25, 0xE8	; 232
  d8:	90 38       	cpi	r25, 0x80	; 128
  da:	11 f4       	brne	.+4      	; 0xe0 <_ZN3I2c7ReceiveEv+0x18>
	{
	return TWDR;									/* If yes then return received data */
  dc:	83 b1       	in	r24, 0x03	; 3
  de:	08 95       	ret
	}
	if( status == 0x88 || status == 0x98)			/* Check for data received, nack returned & switched to not addressed slave mode */
  e0:	98 38       	cpi	r25, 0x88	; 136
  e2:	11 f4       	brne	.+4      	; 0xe8 <_ZN3I2c7ReceiveEv+0x20>
	{
		return TWDR;								/* If yes then return received data */
  e4:	83 b1       	in	r24, 0x03	; 3
  e6:	08 95       	ret
	}
	if(status == 0xA0)								/* Check wether STOP/REPEATED START */
  e8:	88 7f       	andi	r24, 0xF8	; 248
  ea:	80 3a       	cpi	r24, 0xA0	; 160
  ec:	29 f4       	brne	.+10     	; 0xf8 <_ZN3I2c7ReceiveEv+0x30>
	{
		TWCR |= (1 << TWINT);						/* Clear interrupt flag & return -1 */
  ee:	86 b7       	in	r24, 0x36	; 54
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	86 bf       	out	0x36, r24	; 54
		return -1;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	08 95       	ret
	}
	else
	{
		return -2;									/* Else return -2 */
  f8:	8e ef       	ldi	r24, 0xFE	; 254
	}
}
  fa:	08 95       	ret

000000fc <_ZN13Lcd_4_BitMode10LcdCommandEh>:
	if (row == 0 && pos<16)
	LcdCommand((pos & 0x0F)|0x80);																			/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LcdCommand((pos & 0x0F)|0xC0);																			/* Command of first row and required position<16 */
	LcdString(str);																							/* Call LCD string function */
}
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	96 2f       	mov	r25, r22
 102:	90 7f       	andi	r25, 0xF0	; 240
 104:	89 2b       	or	r24, r25
 106:	88 bb       	out	0x18, r24	; 24
 108:	c0 98       	cbi	0x18, 0	; 24
 10a:	c1 9a       	sbi	0x18, 1	; 24
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <_ZN13Lcd_4_BitMode10LcdCommandEh+0x12>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x18>
 114:	c1 98       	cbi	0x18, 1	; 24
 116:	8f e8       	ldi	r24, 0x8F	; 143
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <_ZN13Lcd_4_BitMode10LcdCommandEh+0x1e>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x24>
 120:	00 00       	nop
 122:	88 b3       	in	r24, 0x18	; 24
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	90 e1       	ldi	r25, 0x10	; 16
 128:	69 9f       	mul	r22, r25
 12a:	b0 01       	movw	r22, r0
 12c:	11 24       	eor	r1, r1
 12e:	68 2b       	or	r22, r24
 130:	68 bb       	out	0x18, r22	; 24
 132:	c1 9a       	sbi	0x18, 1	; 24
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x3a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <_ZN13Lcd_4_BitMode10LcdCommandEh+0x40>
 13c:	c1 98       	cbi	0x18, 1	; 24
 13e:	8f e9       	ldi	r24, 0x9F	; 159
 140:	9f e0       	ldi	r25, 0x0F	; 15
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x46>
 146:	00 c0       	rjmp	.+0      	; 0x148 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x4c>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <_ZN13Lcd_4_BitMode7LcdCharEh>:
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	8f 70       	andi	r24, 0x0F	; 15
 150:	96 2f       	mov	r25, r22
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	89 2b       	or	r24, r25
 156:	88 bb       	out	0x18, r24	; 24
 158:	c0 9a       	sbi	0x18, 0	; 24
 15a:	c1 9a       	sbi	0x18, 1	; 24
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	8a 95       	dec	r24
 160:	f1 f7       	brne	.-4      	; 0x15e <_ZN13Lcd_4_BitMode7LcdCharEh+0x12>
 162:	00 c0       	rjmp	.+0      	; 0x164 <_ZN13Lcd_4_BitMode7LcdCharEh+0x18>
 164:	c1 98       	cbi	0x18, 1	; 24
 166:	8f e8       	ldi	r24, 0x8F	; 143
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <_ZN13Lcd_4_BitMode7LcdCharEh+0x1e>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <_ZN13Lcd_4_BitMode7LcdCharEh+0x24>
 170:	00 00       	nop
 172:	88 b3       	in	r24, 0x18	; 24
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	90 e1       	ldi	r25, 0x10	; 16
 178:	69 9f       	mul	r22, r25
 17a:	b0 01       	movw	r22, r0
 17c:	11 24       	eor	r1, r1
 17e:	68 2b       	or	r22, r24
 180:	68 bb       	out	0x18, r22	; 24
 182:	c1 9a       	sbi	0x18, 1	; 24
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	8a 95       	dec	r24
 188:	f1 f7       	brne	.-4      	; 0x186 <_ZN13Lcd_4_BitMode7LcdCharEh+0x3a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <_ZN13Lcd_4_BitMode7LcdCharEh+0x40>
 18c:	c1 98       	cbi	0x18, 1	; 24
 18e:	8f e9       	ldi	r24, 0x9F	; 159
 190:	9f e0       	ldi	r25, 0x0F	; 15
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <_ZN13Lcd_4_BitMode7LcdCharEh+0x46>
 196:	00 c0       	rjmp	.+0      	; 0x198 <_ZN13Lcd_4_BitMode7LcdCharEh+0x4c>
 198:	00 00       	nop
 19a:	08 95       	ret

0000019c <_ZN13Lcd_4_BitMode7LcdInitEv>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	87 bb       	out	0x17, r24	; 23
 1a6:	8f e3       	ldi	r24, 0x3F	; 63
 1a8:	9c e9       	ldi	r25, 0x9C	; 156
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <_ZN13Lcd_4_BitMode7LcdInitEv+0xe>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_ZN13Lcd_4_BitMode7LcdInitEv+0x14>
 1b0:	00 00       	nop
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	ce 01       	movw	r24, r28
 1b6:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN13Lcd_4_BitMode10LcdCommandEh>
 1ba:	68 e2       	ldi	r22, 0x28	; 40
 1bc:	ce 01       	movw	r24, r28
 1be:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN13Lcd_4_BitMode10LcdCommandEh>
 1c2:	6c e0       	ldi	r22, 0x0C	; 12
 1c4:	ce 01       	movw	r24, r28
 1c6:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN13Lcd_4_BitMode10LcdCommandEh>
 1ca:	66 e0       	ldi	r22, 0x06	; 6
 1cc:	ce 01       	movw	r24, r28
 1ce:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN13Lcd_4_BitMode10LcdCommandEh>
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	ce 01       	movw	r24, r28
 1d6:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN13Lcd_4_BitMode10LcdCommandEh>
 1da:	8f e9       	ldi	r24, 0x9F	; 159
 1dc:	9f e0       	ldi	r25, 0x0F	; 15
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <_ZN13Lcd_4_BitMode7LcdInitEv+0x42>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <_ZN13Lcd_4_BitMode7LcdInitEv+0x48>
 1e4:	00 00       	nop
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <_ZN13Lcd_4_BitMode9LcdStringEPc>:
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	eb 01       	movw	r28, r22
 1fa:	68 81       	ld	r22, Y
 1fc:	66 23       	and	r22, r22
 1fe:	69 f0       	breq	.+26     	; 0x21a <_ZN13Lcd_4_BitMode9LcdStringEPc+0x2e>
 200:	7c 01       	movw	r14, r24
 202:	21 96       	adiw	r28, 0x01	; 1
 204:	00 e0       	ldi	r16, 0x00	; 0
 206:	10 e0       	ldi	r17, 0x00	; 0
 208:	c7 01       	movw	r24, r14
 20a:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZN13Lcd_4_BitMode7LcdCharEh>
 20e:	0f 5f       	subi	r16, 0xFF	; 255
 210:	1f 4f       	sbci	r17, 0xFF	; 255
 212:	69 91       	ld	r22, Y+
 214:	61 11       	cpse	r22, r1
 216:	f8 cf       	rjmp	.-16     	; 0x208 <_ZN13Lcd_4_BitMode9LcdStringEPc+0x1c>
 218:	02 c0       	rjmp	.+4      	; 0x21e <_ZN13Lcd_4_BitMode9LcdStringEPc+0x32>
 21a:	00 e0       	ldi	r16, 0x00	; 0
 21c:	10 e0       	ldi	r17, 0x00	; 0
 21e:	80 2f       	mov	r24, r16
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	08 95       	ret

0000022e <_ZN13Lcd_4_BitMode7LcdGoXyEhh>:

void Lcd_4_BitMode::LcdGoXy (unsigned char row,unsigned char pos)
{
	if (row == 0 && pos<16)
 22e:	61 11       	cpse	r22, r1
 230:	08 c0       	rjmp	.+16     	; 0x242 <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x14>
 232:	40 31       	cpi	r20, 0x10	; 16
 234:	78 f4       	brcc	.+30     	; 0x254 <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
	LcdCommand((pos & 0x0F)|0x80);																			/* Command of first row and required position<16 */
 236:	4f 70       	andi	r20, 0x0F	; 15
 238:	64 2f       	mov	r22, r20
 23a:	60 68       	ori	r22, 0x80	; 128
 23c:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN13Lcd_4_BitMode10LcdCommandEh>
 240:	08 95       	ret
	else if (row == 1 && pos<16)
 242:	61 30       	cpi	r22, 0x01	; 1
 244:	39 f4       	brne	.+14     	; 0x254 <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
 246:	40 31       	cpi	r20, 0x10	; 16
 248:	28 f4       	brcc	.+10     	; 0x254 <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
	LcdCommand((pos & 0x0F)|0xC0);																			/* Command of first row and required position<16 */
 24a:	4f 70       	andi	r20, 0x0F	; 15
 24c:	64 2f       	mov	r22, r20
 24e:	60 6c       	ori	r22, 0xC0	; 192
 250:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN13Lcd_4_BitMode10LcdCommandEh>
 254:	08 95       	ret

00000256 <main>:
}
*/

int main(void)
{
	lcd.LcdInit();
 256:	89 e7       	ldi	r24, 0x79	; 121
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN13Lcd_4_BitMode7LcdInitEv>
	lcd.LcdString("Slave Device");
 25e:	60 e6       	ldi	r22, 0x60	; 96
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	89 e7       	ldi	r24, 0x79	; 121
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN13Lcd_4_BitMode9LcdStringEPc>
	lcd.LcdCommand(GoSecondLine);
 26a:	60 ec       	ldi	r22, 0xC0	; 192
 26c:	89 e7       	ldi	r24, 0x79	; 121
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN13Lcd_4_BitMode10LcdCommandEh>
	lcd.LcdString("Received: ");
 274:	6d e6       	ldi	r22, 0x6D	; 109
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	89 e7       	ldi	r24, 0x79	; 121
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN13Lcd_4_BitMode9LcdStringEPc>
	lcd.LcdGoXy(1, 10);
 280:	4a e0       	ldi	r20, 0x0A	; 10
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	89 e7       	ldi	r24, 0x79	; 121
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN13Lcd_4_BitMode7LcdGoXyEhh>
	i2c.SlaveInit(0x11);
 28c:	61 e1       	ldi	r22, 0x11	; 17
 28e:	88 e7       	ldi	r24, 0x78	; 120
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 49 00 	call	0x92	; 0x92 <_ZN3I2c9SlaveInitEh>
	i2c.Listen();
 296:	88 e7       	ldi	r24, 0x78	; 120
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 4d 00 	call	0x9a	; 0x9a <_ZN3I2c6ListenEv>
	while(1)
	{
		lcd.LcdChar(i2c.Receive());
 29e:	88 e7       	ldi	r24, 0x78	; 120
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 64 00 	call	0xc8	; 0xc8 <_ZN3I2c7ReceiveEv>
 2a6:	68 2f       	mov	r22, r24
 2a8:	89 e7       	ldi	r24, 0x79	; 121
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZN13Lcd_4_BitMode7LcdCharEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b0:	8f e1       	ldi	r24, 0x1F	; 31
 2b2:	9e e4       	ldi	r25, 0x4E	; 78
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x5e>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x64>
 2ba:	00 00       	nop
 2bc:	f0 cf       	rjmp	.-32     	; 0x29e <main+0x48>

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
