
SPI Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  0000025e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080008c  0080008c  0000031e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f2b  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e2  00000000  00000000  000023b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f9  00000000  00000000  00002d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00003694  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000756  00000000  00000000  00003950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001638  00000000  00000000  000040a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000056de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  8a:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZN13Lcd_4_BitMode10LcdCommandEh>:
	if (row == 0 && pos<16)
	LcdCommand((pos & 0x0F)|0x80);																			/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LcdCommand((pos & 0x0F)|0xC0);																			/* Command of first row and required position<16 */
	LcdString(str);																							/* Call LCD string function */
}
  92:	82 b3       	in	r24, 0x12	; 18
  94:	8f 70       	andi	r24, 0x0F	; 15
  96:	96 2f       	mov	r25, r22
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	89 2b       	or	r24, r25
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	90 98       	cbi	0x12, 0	; 18
  a0:	91 9a       	sbi	0x12, 1	; 18
  a2:	00 00       	nop
  a4:	91 98       	cbi	0x12, 1	; 18
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN13Lcd_4_BitMode10LcdCommandEh+0x1c>
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	90 e1       	ldi	r25, 0x10	; 16
  b4:	69 9f       	mul	r22, r25
  b6:	b0 01       	movw	r22, r0
  b8:	11 24       	eor	r1, r1
  ba:	68 2b       	or	r22, r24
  bc:	62 bb       	out	0x12, r22	; 18
  be:	91 9a       	sbi	0x12, 1	; 18
  c0:	00 00       	nop
  c2:	91 98       	cbi	0x12, 1	; 18
  c4:	83 ef       	ldi	r24, 0xF3	; 243
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x36>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZN13Lcd_4_BitMode10LcdCommandEh+0x3c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <_ZN13Lcd_4_BitMode7LcdCharEh>:
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	96 2f       	mov	r25, r22
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	89 2b       	or	r24, r25
  dc:	82 bb       	out	0x12, r24	; 18
  de:	90 9a       	sbi	0x12, 0	; 18
  e0:	91 9a       	sbi	0x12, 1	; 18
  e2:	00 00       	nop
  e4:	91 98       	cbi	0x12, 1	; 18
  e6:	82 e4       	ldi	r24, 0x42	; 66
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <_ZN13Lcd_4_BitMode7LcdCharEh+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <_ZN13Lcd_4_BitMode7LcdCharEh+0x1c>
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	90 e1       	ldi	r25, 0x10	; 16
  f4:	69 9f       	mul	r22, r25
  f6:	b0 01       	movw	r22, r0
  f8:	11 24       	eor	r1, r1
  fa:	68 2b       	or	r22, r24
  fc:	62 bb       	out	0x12, r22	; 18
  fe:	91 9a       	sbi	0x12, 1	; 18
 100:	00 00       	nop
 102:	91 98       	cbi	0x12, 1	; 18
 104:	83 ef       	ldi	r24, 0xF3	; 243
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <_ZN13Lcd_4_BitMode7LcdCharEh+0x36>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_ZN13Lcd_4_BitMode7LcdCharEh+0x3c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <_ZN13Lcd_4_BitMode7LcdInitEv>:
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	81 bb       	out	0x11, r24	; 17
 11c:	87 e8       	ldi	r24, 0x87	; 135
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <_ZN13Lcd_4_BitMode7LcdInitEv+0xe>
 124:	00 c0       	rjmp	.+0      	; 0x126 <_ZN13Lcd_4_BitMode7LcdInitEv+0x14>
 126:	00 00       	nop
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	ce 01       	movw	r24, r28
 12c:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 130:	68 e2       	ldi	r22, 0x28	; 40
 132:	ce 01       	movw	r24, r28
 134:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 138:	6c e0       	ldi	r22, 0x0C	; 12
 13a:	ce 01       	movw	r24, r28
 13c:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 140:	66 e0       	ldi	r22, 0x06	; 6
 142:	ce 01       	movw	r24, r28
 144:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	ce 01       	movw	r24, r28
 14c:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 150:	83 ef       	ldi	r24, 0xF3	; 243
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <_ZN13Lcd_4_BitMode7LcdInitEv+0x42>
 158:	00 c0       	rjmp	.+0      	; 0x15a <_ZN13Lcd_4_BitMode7LcdInitEv+0x48>
 15a:	00 00       	nop
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <_ZN13Lcd_4_BitMode9LcdStringEPc>:
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	eb 01       	movw	r28, r22
 170:	68 81       	ld	r22, Y
 172:	66 23       	and	r22, r22
 174:	69 f0       	breq	.+26     	; 0x190 <_ZN13Lcd_4_BitMode9LcdStringEPc+0x2e>
 176:	7c 01       	movw	r14, r24
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	00 e0       	ldi	r16, 0x00	; 0
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	c7 01       	movw	r24, r14
 180:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN13Lcd_4_BitMode7LcdCharEh>
 184:	0f 5f       	subi	r16, 0xFF	; 255
 186:	1f 4f       	sbci	r17, 0xFF	; 255
 188:	69 91       	ld	r22, Y+
 18a:	61 11       	cpse	r22, r1
 18c:	f8 cf       	rjmp	.-16     	; 0x17e <_ZN13Lcd_4_BitMode9LcdStringEPc+0x1c>
 18e:	02 c0       	rjmp	.+4      	; 0x194 <_ZN13Lcd_4_BitMode9LcdStringEPc+0x32>
 190:	00 e0       	ldi	r16, 0x00	; 0
 192:	10 e0       	ldi	r17, 0x00	; 0
 194:	80 2f       	mov	r24, r16
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	08 95       	ret

000001a4 <_ZN13Lcd_4_BitMode7LcdGoXyEhh>:

void Lcd_4_BitMode::LcdGoXy (unsigned char row,unsigned char pos)
{
	if (row == 0 && pos<16)
 1a4:	61 11       	cpse	r22, r1
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x14>
 1a8:	40 31       	cpi	r20, 0x10	; 16
 1aa:	78 f4       	brcc	.+30     	; 0x1ca <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
	LcdCommand((pos & 0x0F)|0x80);																			/* Command of first row and required position<16 */
 1ac:	4f 70       	andi	r20, 0x0F	; 15
 1ae:	64 2f       	mov	r22, r20
 1b0:	60 68       	ori	r22, 0x80	; 128
 1b2:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 1b6:	08 95       	ret
	else if (row == 1 && pos<16)
 1b8:	61 30       	cpi	r22, 0x01	; 1
 1ba:	39 f4       	brne	.+14     	; 0x1ca <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
 1bc:	40 31       	cpi	r20, 0x10	; 16
 1be:	28 f4       	brcc	.+10     	; 0x1ca <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
	LcdCommand((pos & 0x0F)|0xC0);																			/* Command of first row and required position<16 */
 1c0:	4f 70       	andi	r20, 0x0F	; 15
 1c2:	64 2f       	mov	r22, r20
 1c4:	60 6c       	ori	r22, 0xC0	; 192
 1c6:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 1ca:	08 95       	ret

000001cc <main>:

int main(void)
{
	char Rdata ;
	
	lcd.LcdInit();
 1cc:	8d e8       	ldi	r24, 0x8D	; 141
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 89 00 	call	0x112	; 0x112 <_ZN13Lcd_4_BitMode7LcdInitEv>
	spi.SpiSlaveInit();
 1d4:	8c e8       	ldi	r24, 0x8C	; 140
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 26 01 	call	0x24c	; 0x24c <_ZN3Spi12SpiSlaveInitEv>
	lcd.LcdString("Slave Device");
 1dc:	60 e6       	ldi	r22, 0x60	; 96
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	8d e8       	ldi	r24, 0x8D	; 141
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN13Lcd_4_BitMode9LcdStringEPc>
	lcd.LcdCommand(GoSecondLine);
 1e8:	60 ec       	ldi	r22, 0xC0	; 192
 1ea:	8d e8       	ldi	r24, 0x8D	; 141
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
	lcd.LcdString("Received Data: ");
 1f2:	6d e6       	ldi	r22, 0x6D	; 109
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	8d e8       	ldi	r24, 0x8D	; 141
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN13Lcd_4_BitMode9LcdStringEPc>
	
    while (1) 
    {
		Rdata = spi.SpiRead();
 1fe:	8c e8       	ldi	r24, 0x8C	; 140
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 20 01 	call	0x240	; 0x240 <_ZN3Spi7SpiReadEv>
 206:	c8 2f       	mov	r28, r24
		lcd.LcdGoXy(1 , lcd.LcdString("Received data") + 2);
 208:	6d e7       	ldi	r22, 0x7D	; 125
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	8d e8       	ldi	r24, 0x8D	; 141
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN13Lcd_4_BitMode9LcdStringEPc>
 214:	42 e0       	ldi	r20, 0x02	; 2
 216:	48 0f       	add	r20, r24
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	8d e8       	ldi	r24, 0x8D	; 141
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN13Lcd_4_BitMode7LcdGoXyEhh>
		lcd.LcdChar(Rdata);
 222:	6c 2f       	mov	r22, r28
 224:	8d e8       	ldi	r24, 0x8D	; 141
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN13Lcd_4_BitMode7LcdCharEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	2f e9       	ldi	r18, 0x9F	; 159
 22e:	86 e8       	ldi	r24, 0x86	; 134
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x66>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x70>
 23c:	00 00       	nop
 23e:	df cf       	rjmp	.-66     	; 0x1fe <main+0x32>

00000240 <_ZN3Spi7SpiReadEv>:
	 flushBuffer = SPDR;
 }
 
 char Spi::SpiRead(void)
 {
	 SPDR = 0xFF;
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	8f b9       	out	0x0f, r24	; 15
	 while (!(SPSR & (1 << SPIF)));						 /* Wait till reception complete */
 244:	77 9b       	sbis	0x0e, 7	; 14
 246:	fe cf       	rjmp	.-4      	; 0x244 <_ZN3Spi7SpiReadEv+0x4>
	 return (SPDR);										 /* Return received data */
 248:	8f b1       	in	r24, 0x0f	; 15
 }
 24a:	08 95       	ret

0000024c <_ZN3Spi12SpiSlaveInitEv>:
 
 void Spi::SpiSlaveInit(void)
 {
	DDRB &= ~((1 << SCK)|(1 << MOSI)|(1 << SS));		 /* Make MOSI, SCK, SS as input pins */				
 24c:	87 b3       	in	r24, 0x17	; 23
 24e:	8f 74       	andi	r24, 0x4F	; 79
 250:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1 << MISO);								 /* Make MISO pin as output pin */
 252:	be 9a       	sbi	0x17, 6	; 23
	SPCR = (1 << SPE);									 /* Enable SPI in slave mode */
 254:	80 e4       	ldi	r24, 0x40	; 64
 256:	8d b9       	out	0x0d, r24	; 13
 258:	08 95       	ret

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
