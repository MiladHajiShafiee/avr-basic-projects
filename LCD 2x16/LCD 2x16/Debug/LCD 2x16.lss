
LCD 2x16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001ca  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006e  0080006e  0000026c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001573  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000788  00000000  00000000  00001903  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b0  00000000  00000000  0000208b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  0000273c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060e  00000000  00000000  0000294c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eea  00000000  00000000  00002f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  8a:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZN13Lcd_4_BitMode10LcdCommandEh>:



void Lcd_4_BitMode::LcdCommand( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);															/* sending upper nibble */
  92:	88 b3       	in	r24, 0x18	; 24
  94:	8f 70       	andi	r24, 0x0F	; 15
  96:	96 2f       	mov	r25, r22
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	89 2b       	or	r24, r25
  9c:	88 bb       	out	0x18, r24	; 24
	LCD_Port &= ~ (1<<RS);																					/* RS=0, command reg. */
  9e:	c0 98       	cbi	0x18, 0	; 24
	LCD_Port |= (1<<EN);																					/* Enable pulse */
  a0:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  a4:	c1 98       	cbi	0x18, 1	; 24
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN13Lcd_4_BitMode10LcdCommandEh+0x1c>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);																/* sending lower nibble */
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	90 e1       	ldi	r25, 0x10	; 16
  b4:	69 9f       	mul	r22, r25
  b6:	b0 01       	movw	r22, r0
  b8:	11 24       	eor	r1, r1
  ba:	68 2b       	or	r22, r24
  bc:	68 bb       	out	0x18, r22	; 24
	LCD_Port |= (1<<EN);
  be:	c1 9a       	sbi	0x18, 1	; 24
  c0:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  c2:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	83 ef       	ldi	r24, 0xF3	; 243
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x36>
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZN13Lcd_4_BitMode10LcdCommandEh+0x3c>
  ce:	00 00       	nop
  d0:	08 95       	ret

000000d2 <_ZN13Lcd_4_BitMode7LcdCharEh>:
	_delay_ms(2);
}

void Lcd_4_BitMode::LcdChar( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);															/* sending upper nibble */
  d2:	88 b3       	in	r24, 0x18	; 24
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	96 2f       	mov	r25, r22
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	89 2b       	or	r24, r25
  dc:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<RS);																					/* RS=1, data reg. */
  de:	c0 9a       	sbi	0x18, 0	; 24
	LCD_Port|= (1<<EN);
  e0:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  e4:	c1 98       	cbi	0x18, 1	; 24
  e6:	82 e4       	ldi	r24, 0x42	; 66
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <_ZN13Lcd_4_BitMode7LcdCharEh+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <_ZN13Lcd_4_BitMode7LcdCharEh+0x1c>
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (data << 4);																/* sending lower nibble */
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	90 e1       	ldi	r25, 0x10	; 16
  f4:	69 9f       	mul	r22, r25
  f6:	b0 01       	movw	r22, r0
  f8:	11 24       	eor	r1, r1
  fa:	68 2b       	or	r22, r24
  fc:	68 bb       	out	0x18, r22	; 24
	LCD_Port |= (1<<EN);
  fe:	c1 9a       	sbi	0x18, 1	; 24
 100:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 102:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	83 ef       	ldi	r24, 0xF3	; 243
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <_ZN13Lcd_4_BitMode7LcdCharEh+0x36>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_ZN13Lcd_4_BitMode7LcdCharEh+0x3c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <_ZN13Lcd_4_BitMode7LcdInitEv>:
	_delay_ms(2);
}

void Lcd_4_BitMode::LcdInit (void)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	ec 01       	movw	r28, r24
	LCD_Dir = 0xFF;																							/* Make LCD port direction as o/p */
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	87 e8       	ldi	r24, 0x87	; 135
 11e:	93 e1       	ldi	r25, 0x13	; 19
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <_ZN13Lcd_4_BitMode7LcdInitEv+0xe>
 124:	00 c0       	rjmp	.+0      	; 0x126 <_ZN13Lcd_4_BitMode7LcdInitEv+0x14>
 126:	00 00       	nop
	_delay_ms(20);																							/* LCD Power ON delay always >15ms */
	
	LcdCommand(0x02);																						/* send for 4 bit initialization of LCD  */
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	ce 01       	movw	r24, r28
 12c:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
	LcdCommand(0x28);																					    /* 2 line, 5*7 matrix in 4-bit mode */
 130:	68 e2       	ldi	r22, 0x28	; 40
 132:	ce 01       	movw	r24, r28
 134:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
	LcdCommand(0x0c);																				        /* Display on cursor off*/
 138:	6c e0       	ldi	r22, 0x0C	; 12
 13a:	ce 01       	movw	r24, r28
 13c:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
	LcdCommand(0x06);																						/* Increment cursor (shift cursor to right)*/
 140:	66 e0       	ldi	r22, 0x06	; 6
 142:	ce 01       	movw	r24, r28
 144:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
	LcdCommand(0x01);																					    /* Clear display screen*/
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	ce 01       	movw	r24, r28
 14c:	0e 94 49 00 	call	0x92	; 0x92 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 150:	83 ef       	ldi	r24, 0xF3	; 243
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <_ZN13Lcd_4_BitMode7LcdInitEv+0x42>
 158:	00 c0       	rjmp	.+0      	; 0x15a <_ZN13Lcd_4_BitMode7LcdInitEv+0x48>
 15a:	00 00       	nop
	_delay_ms(2);
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <_ZN13Lcd_4_BitMode9LcdStringEPc>:

unsigned int Lcd_4_BitMode::LcdString (char *str)
{
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	fb 01       	movw	r30, r22
	int i;
	for(i = 0 ; str[i] != 0; i ++)																			/* Send each char of string till the NULL */
 170:	60 81       	ld	r22, Z
 172:	66 23       	and	r22, r22
 174:	91 f0       	breq	.+36     	; 0x19a <_ZN13Lcd_4_BitMode9LcdStringEPc+0x38>
 176:	8f 01       	movw	r16, r30
 178:	7c 01       	movw	r14, r24
 17a:	0f 5f       	subi	r16, 0xFF	; 255
 17c:	1f 4f       	sbci	r17, 0xFF	; 255
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	d0 e0       	ldi	r29, 0x00	; 0
	{
		LcdChar (str[i]);
 182:	c7 01       	movw	r24, r14
 184:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN13Lcd_4_BitMode7LcdCharEh>
}

unsigned int Lcd_4_BitMode::LcdString (char *str)
{
	int i;
	for(i = 0 ; str[i] != 0; i ++)																			/* Send each char of string till the NULL */
 188:	21 96       	adiw	r28, 0x01	; 1
 18a:	8c 2f       	mov	r24, r28
 18c:	9d 2f       	mov	r25, r29
 18e:	f8 01       	movw	r30, r16
 190:	61 91       	ld	r22, Z+
 192:	8f 01       	movw	r16, r30
 194:	61 11       	cpse	r22, r1
 196:	f5 cf       	rjmp	.-22     	; 0x182 <_ZN13Lcd_4_BitMode9LcdStringEPc+0x20>
 198:	02 c0       	rjmp	.+4      	; 0x19e <_ZN13Lcd_4_BitMode9LcdStringEPc+0x3c>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
	{
		LcdChar (str[i]);
	}
	return i;
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	08 95       	ret

000001ac <main>:

Lcd_4_BitMode lcd;

int main(void)
{
	lcd.LcdInit();
 1ac:	8e e6       	ldi	r24, 0x6E	; 110
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 89 00 	call	0x112	; 0x112 <_ZN13Lcd_4_BitMode7LcdInitEv>
	lcd.LcdString("Master is God");
 1b4:	60 e6       	ldi	r22, 0x60	; 96
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	8e e6       	ldi	r24, 0x6E	; 110
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN13Lcd_4_BitMode9LcdStringEPc>
	
}
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
