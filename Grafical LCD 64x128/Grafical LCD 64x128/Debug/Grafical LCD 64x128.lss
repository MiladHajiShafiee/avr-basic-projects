
Grafical LCD 64x128.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000834  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000008a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001682  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ef  00000000  00000000  0000201e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b5  00000000  00000000  0000280d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000587  00000000  00000000  00003094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be1  00000000  00000000  0000361b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000041fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 02 	jmp	0x454	; 0x454 <__ctors_end>
   4:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
   8:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
   c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  10:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  14:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  18:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  1c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  20:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  24:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  28:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  2c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  30:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  34:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  38:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  3c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  40:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  44:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  48:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  4c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
  50:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>

00000054 <__trampolines_end>:
	...
  6c:	00 80       	ld	r0, Z
  6e:	c0 e0       	ldi	r28, 0x00	; 0
  70:	e0 f0       	brcs	.+56     	; 0xaa <__trampolines_end+0x56>
  72:	f8 fc       	.word	0xfcf8	; ????
  74:	fc fe       	.word	0xfefc	; ????
  76:	f8 c0       	rjmp	.+496    	; 0x268 <__trampolines_end+0x214>
  78:	80 80       	ld	r8, Z
	...
  8a:	00 80       	ld	r0, Z
	...
  9c:	00 80       	ld	r0, Z
	...
  ae:	00 80       	ld	r0, Z
  b0:	80 c0       	rjmp	.+256    	; 0x1b2 <__trampolines_end+0x15e>
  b2:	f8 fe       	.word	0xfef8	; ????
  b4:	fc fc       	.word	0xfcfc	; ????
  b6:	f8 f0       	brcs	.+62     	; 0xf6 <__trampolines_end+0xa2>
  b8:	e0 e0       	ldi	r30, 0x00	; 0
  ba:	c0 80       	ld	r12, Z
	...
  e4:	00 80       	ld	r0, Z
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	f0 f8       	bld	r15, 0
  ea:	fc fe       	.word	0xfefc	; ????
  ec:	ff ff       	.word	0xffff	; ????
  ee:	ff ff       	.word	0xffff	; ????
  f0:	ff ff       	.word	0xffff	; ????
  f2:	ff ff       	.word	0xffff	; ????
  f4:	ff ff       	.word	0xffff	; ????
  f6:	ff ff       	.word	0xffff	; ????
  f8:	ff ff       	.word	0xffff	; ????
  fa:	ff 7f       	andi	r31, 0xFF	; 255
  fc:	3f 1e       	adc	r3, r31
  fe:	1e 1e       	adc	r1, r30
 100:	1c 1c       	adc	r1, r12
 102:	1c 18       	sub	r1, r12
 104:	18 18       	sub	r1, r8
 106:	18 18       	sub	r1, r8
 108:	08 08       	sbc	r0, r8
 10a:	08 0f       	add	r16, r24
 10c:	0f 0e       	add	r0, r31
 10e:	0e 0e       	add	r0, r30
 110:	0e 0e       	add	r0, r30
 112:	0e 0e       	add	r0, r30
 114:	0e 0e       	add	r0, r30
 116:	0e 0e       	add	r0, r30
 118:	1e 1e       	adc	r1, r30
 11a:	1e 1e       	adc	r1, r30
 11c:	1f 1f       	adc	r17, r31
 11e:	18 18       	sub	r1, r8
 120:	18 18       	sub	r1, r8
 122:	98 98       	cbi	0x13, 0	; 19
 124:	98 98       	cbi	0x13, 0	; 19
 126:	9c 9c       	mul	r9, r12
 128:	9c 1e       	adc	r9, r28
 12a:	1e 1e       	adc	r1, r30
 12c:	3f 7f       	andi	r19, 0xFF	; 255
 12e:	ff ff       	.word	0xffff	; ????
 130:	ff ff       	.word	0xffff	; ????
 132:	ff ff       	.word	0xffff	; ????
 134:	ff ff       	.word	0xffff	; ????
 136:	ff ff       	.word	0xffff	; ????
 138:	ff ff       	.word	0xffff	; ????
 13a:	ff ff       	.word	0xffff	; ????
 13c:	ff fe       	.word	0xfeff	; ????
 13e:	fc f8       	.word	0xf8fc	; ????
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	c0 80       	ld	r12, Z
	...
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	f0 fc       	sbrc	r15, 0
 164:	fe ff       	.word	0xfffe	; ????
 166:	ff ff       	.word	0xffff	; ????
 168:	ff ff       	.word	0xffff	; ????
 16a:	ff ff       	.word	0xffff	; ????
 16c:	ff ff       	.word	0xffff	; ????
 16e:	ff ff       	.word	0xffff	; ????
 170:	ff ff       	.word	0xffff	; ????
 172:	ff 7f       	andi	r31, 0xFF	; 255
 174:	3f 1f       	adc	r19, r31
 176:	0f 87       	std	Y+15, r16	; 0x0f
 178:	e3 f1       	brvs	.+120    	; 0x1f2 <__trampolines_end+0x19e>
 17a:	38 1c       	adc	r3, r8
 17c:	06 03       	mulsu	r16, r22
 17e:	01 00       	.word	0x0001	; ????
 180:	00 00       	nop
 182:	00 00       	nop
 184:	00 00       	nop
 186:	3c 7c       	andi	r19, 0xCC	; 204
 188:	7e fe       	.word	0xfe7e	; ????
 18a:	fe ff       	.word	0xfffe	; ????
 18c:	ff ff       	.word	0xffff	; ????
 18e:	ff ff       	.word	0xffff	; ????
 190:	ff ff       	.word	0xffff	; ????
 192:	ff ff       	.word	0xffff	; ????
 194:	ff ff       	.word	0xffff	; ????
 196:	ff ff       	.word	0xffff	; ????
 198:	ff ff       	.word	0xffff	; ????
 19a:	ff ff       	.word	0xffff	; ????
 19c:	ff ff       	.word	0xffff	; ????
 19e:	ff ff       	.word	0xffff	; ????
 1a0:	fe fe       	.word	0xfefe	; ????
 1a2:	fe fc       	.word	0xfcfe	; ????
 1a4:	fc fd       	.word	0xfdfc	; ????
 1a6:	f9 fb       	.word	0xfbf9	; ????
 1a8:	f3 e3       	ldi	r31, 0x33	; 51
 1aa:	e3 c0       	rjmp	.+454    	; 0x372 <__trampolines_end+0x31e>
 1ac:	c0 80       	ld	r12, Z
 1ae:	08 31       	cpi	r16, 0x18	; 24
 1b0:	e3 87       	std	Z+11, r30	; 0x0b
 1b2:	0f 1f       	adc	r16, r31
 1b4:	3f 7f       	andi	r19, 0xFF	; 255
 1b6:	ff ff       	.word	0xffff	; ????
 1b8:	ff ff       	.word	0xffff	; ????
 1ba:	ff ff       	.word	0xffff	; ????
 1bc:	ff ff       	.word	0xffff	; ????
 1be:	ff ff       	.word	0xffff	; ????
 1c0:	ff ff       	.word	0xffff	; ????
 1c2:	ff ff       	.word	0xffff	; ????
 1c4:	fe fc       	.word	0xfcfe	; ????
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 00       	.word	0x0080	; ????
	...
 1da:	00 00       	nop
 1dc:	c0 f0       	brcs	.+48     	; 0x20e <__trampolines_end+0x1ba>
 1de:	fc fe       	.word	0xfefc	; ????
 1e0:	ff ff       	.word	0xffff	; ????
 1e2:	ff ff       	.word	0xffff	; ????
 1e4:	ff ff       	.word	0xffff	; ????
 1e6:	ff ff       	.word	0xffff	; ????
 1e8:	ff ff       	.word	0xffff	; ????
 1ea:	ff ff       	.word	0xffff	; ????
 1ec:	ff ff       	.word	0xffff	; ????
 1ee:	ff ff       	.word	0xffff	; ????
 1f0:	cf 03       	fmulsu	r20, r23
 1f2:	01 30       	cpi	r16, 0x01	; 1
 1f4:	fc fe       	.word	0xfefc	; ????
 1f6:	ff 3f       	cpi	r31, 0xFF	; 255
 1f8:	03 00       	.word	0x0003	; ????
	...
 216:	01 01       	movw	r0, r2
 218:	01 01       	movw	r0, r2
 21a:	01 01       	movw	r0, r2
 21c:	01 01       	movw	r0, r2
 21e:	01 01       	movw	r0, r2
 220:	01 03       	mulsu	r16, r17
 222:	03 03       	mulsu	r16, r19
 224:	03 07       	cpc	r16, r19
 226:	07 07       	cpc	r16, r23
 228:	0f 1f       	adc	r16, r31
 22a:	1f 3f       	cpi	r17, 0xFF	; 255
 22c:	7f ff       	.word	0xff7f	; ????
 22e:	ff fe       	.word	0xfeff	; ????
 230:	fc f9       	.word	0xf9fc	; ????
 232:	e7 ce       	rjmp	.-562    	; 0x2 <__FUSE_REGION_LENGTH__>
 234:	18 30       	cpi	r17, 0x08	; 8
 236:	01 83       	std	Z+1, r16	; 0x01
 238:	cf ff       	.word	0xffcf	; ????
 23a:	ff ff       	.word	0xffff	; ????
 23c:	ff ff       	.word	0xffff	; ????
 23e:	ff ff       	.word	0xffff	; ????
 240:	ff ff       	.word	0xffff	; ????
 242:	ff ff       	.word	0xffff	; ????
 244:	ff ff       	.word	0xffff	; ????
 246:	ff ff       	.word	0xffff	; ????
 248:	ff fe       	.word	0xfeff	; ????
 24a:	fc f0       	brlt	.+62     	; 0x28a <__trampolines_end+0x236>
 24c:	c0 00       	.word	0x00c0	; ????
	...
 256:	00 00       	nop
 258:	80 f0       	brcs	.+32     	; 0x27a <__trampolines_end+0x226>
 25a:	fc ff       	.word	0xfffc	; ????
 25c:	ff ff       	.word	0xffff	; ????
 25e:	ff ff       	.word	0xffff	; ????
 260:	ff ff       	.word	0xffff	; ????
 262:	ff ff       	.word	0xffff	; ????
 264:	ff ff       	.word	0xffff	; ????
 266:	ff ff       	.word	0xffff	; ????
 268:	ff ff       	.word	0xffff	; ????
 26a:	ff ff       	.word	0xffff	; ????
 26c:	ff ff       	.word	0xffff	; ????
 26e:	ff ff       	.word	0xffff	; ????
 270:	ff ff       	.word	0xffff	; ????
 272:	fe fc       	.word	0xfcfe	; ????
 274:	f8 f1       	brcs	.+126    	; 0x2f4 <__trampolines_end+0x2a0>
 276:	e3 c0       	rjmp	.+454    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	...
 2ac:	00 00       	nop
 2ae:	01 03       	mulsu	r16, r17
 2b0:	0f c7       	rjmp	.+3614   	; 0x10d0 <__stack+0x871>
 2b2:	e1 f0       	breq	.+56     	; 0x2ec <__trampolines_end+0x298>
 2b4:	f8 fc       	.word	0xfcf8	; ????
 2b6:	fe ff       	.word	0xfffe	; ????
 2b8:	ff ff       	.word	0xffff	; ????
 2ba:	ff ff       	.word	0xffff	; ????
 2bc:	ff ff       	.word	0xffff	; ????
 2be:	ff ff       	.word	0xffff	; ????
 2c0:	ff ff       	.word	0xffff	; ????
 2c2:	ff ff       	.word	0xffff	; ????
 2c4:	ff ff       	.word	0xffff	; ????
 2c6:	ff ff       	.word	0xffff	; ????
 2c8:	ff ff       	.word	0xffff	; ????
 2ca:	ff ff       	.word	0xffff	; ????
 2cc:	ff ff       	.word	0xffff	; ????
 2ce:	fc f0       	brlt	.+62     	; 0x30e <__trampolines_end+0x2ba>
 2d0:	80 00       	.word	0x0080	; ????
 2d2:	00 00       	nop
 2d4:	00 00       	nop
 2d6:	c0 fc       	sbrc	r12, 0
 2d8:	ff ff       	.word	0xffff	; ????
 2da:	ff ff       	.word	0xffff	; ????
 2dc:	ff ff       	.word	0xffff	; ????
 2de:	ff ff       	.word	0xffff	; ????
 2e0:	ff ff       	.word	0xffff	; ????
 2e2:	ff 7f       	andi	r31, 0xFF	; 255
 2e4:	7f 7f       	andi	r23, 0xFF	; 255
 2e6:	7f 3f       	cpi	r23, 0xFF	; 255
 2e8:	3f 7f       	andi	r19, 0xFF	; 255
 2ea:	ff ff       	.word	0xffff	; ????
 2ec:	ff 7f       	andi	r31, 0xFF	; 255
 2ee:	3f 1f       	adc	r19, r31
 2f0:	1f 1f       	adc	r17, r31
 2f2:	1f 1f       	adc	r17, r31
 2f4:	1f 0f       	add	r17, r31
 2f6:	0f 0f       	add	r16, r31
 2f8:	0f 1e       	adc	r0, r31
 2fa:	1c 38       	cpi	r17, 0x8C	; 140
 2fc:	70 60       	ori	r23, 0x00	; 0
 2fe:	c2 c6       	rjmp	.+3460   	; 0x1084 <__stack+0x825>
 300:	8c 1c       	adc	r8, r12
 302:	3c 7c       	andi	r19, 0xCC	; 204
 304:	f8 f8       	.word	0xf8f8	; ????
 306:	f8 f8       	.word	0xf8f8	; ????
 308:	f8 f0       	brcs	.+62     	; 0x348 <__trampolines_end+0x2f4>
 30a:	f0 f0       	brcs	.+60     	; 0x348 <__trampolines_end+0x2f4>
 30c:	f0 f0       	brcs	.+60     	; 0x34a <__trampolines_end+0x2f6>
 30e:	f0 f0       	brcs	.+60     	; 0x34c <__trampolines_end+0x2f8>
 310:	f0 f0       	brcs	.+60     	; 0x34e <__trampolines_end+0x2fa>
 312:	f0 f0       	brcs	.+60     	; 0x350 <__trampolines_end+0x2fc>
 314:	f0 f0       	brcs	.+60     	; 0x352 <__trampolines_end+0x2fe>
 316:	f0 f0       	brcs	.+60     	; 0x354 <__trampolines_end+0x300>
 318:	f0 f0       	brcs	.+60     	; 0x356 <__trampolines_end+0x302>
 31a:	f0 f0       	brcs	.+60     	; 0x358 <__trampolines_end+0x304>
 31c:	e0 e0       	ldi	r30, 0x00	; 0
 31e:	c0 c0       	rjmp	.+384    	; 0x4a0 <_ZN9ImageGLcd12GLCD_CommandEc+0xe>
 320:	80 00       	.word	0x0080	; ????
 322:	00 00       	nop
 324:	00 00       	nop
 326:	00 00       	nop
 328:	80 c0       	rjmp	.+256    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 32a:	c0 60       	ori	r28, 0x00	; 0
 32c:	70 38       	cpi	r23, 0x80	; 128
 32e:	1c 1e       	adc	r1, r28
 330:	0f 0f       	add	r16, r31
 332:	0f 0f       	add	r16, r31
 334:	1f 1f       	adc	r17, r31
 336:	1f 1f       	adc	r17, r31
 338:	1f 1f       	adc	r17, r31
 33a:	3f 7f       	andi	r19, 0xFF	; 255
 33c:	ff ff       	.word	0xffff	; ????
 33e:	ff 7f       	andi	r31, 0xFF	; 255
 340:	3f 3f       	cpi	r19, 0xFF	; 255
 342:	7f 7f       	andi	r23, 0xFF	; 255
 344:	7f 7f       	andi	r23, 0xFF	; 255
 346:	ff ff       	.word	0xffff	; ????
 348:	ff ff       	.word	0xffff	; ????
 34a:	ff ff       	.word	0xffff	; ????
 34c:	ff ff       	.word	0xffff	; ????
 34e:	ff ff       	.word	0xffff	; ????
 350:	ff fc       	.word	0xfcff	; ????
 352:	c0 00       	.word	0x00c0	; ????
 354:	00 fc       	sbrc	r0, 0
 356:	7f 3f       	cpi	r23, 0xFF	; 255
 358:	0f 07       	cpc	r16, r31
 35a:	07 03       	mulsu	r16, r23
 35c:	01 01       	movw	r0, r2
 35e:	01 00       	.word	0x0001	; ????
	...
 368:	00 00       	nop
 36a:	00 01       	movw	r0, r0
 36c:	01 00       	.word	0x0001	; ????
	...
 37e:	00 01       	movw	r0, r0
 380:	03 03       	mulsu	r16, r19
 382:	06 0c       	add	r0, r6
 384:	18 10       	cpse	r1, r8
 386:	21 43       	sbci	r18, 0x31	; 49
 388:	03 83       	std	Z+3, r16	; 0x03
 38a:	07 07       	cpc	r16, r23
 38c:	0f 8f       	std	Y+31, r16	; 0x1f
 38e:	8f 8f       	std	Y+31, r24	; 0x1f
 390:	8f 9f       	mul	r24, r31
 392:	9f 9f       	mul	r25, r31
 394:	9f 9f       	mul	r25, r31
 396:	8f 8f       	std	Y+31, r24	; 0x1f
 398:	8f 8f       	std	Y+31, r24	; 0x1f
 39a:	8f 0f       	add	r24, r31
 39c:	07 07       	cpc	r16, r23
 39e:	03 83       	std	Z+3, r16	; 0x03
 3a0:	01 40       	sbci	r16, 0x01	; 1
 3a2:	20 10       	cpse	r2, r0
 3a4:	18 0c       	add	r1, r8
 3a6:	06 03       	mulsu	r16, r22
 3a8:	03 01       	movw	r0, r6
	...
 3ba:	00 00       	nop
 3bc:	01 01       	movw	r0, r2
	...
 3ca:	01 01       	movw	r0, r2
 3cc:	01 03       	mulsu	r16, r17
 3ce:	07 07       	cpc	r16, r23
 3d0:	0f 3f       	cpi	r16, 0xFF	; 255
 3d2:	7f fc       	.word	0xfc7f	; ????
 3d4:	00 01       	movw	r0, r0
	...
 40a:	01 02       	muls	r16, r17
 40c:	00 00       	nop
 40e:	01 01       	movw	r0, r2
 410:	03 07       	cpc	r16, r19
 412:	0f 1f       	adc	r16, r31
 414:	1f 1f       	adc	r17, r31
 416:	0f 07       	cpc	r16, r31
 418:	03 01       	movw	r0, r6
 41a:	00 00       	nop
 41c:	00 02       	muls	r16, r16
 41e:	01 00       	.word	0x0001	; ????
	...
 450:	00 00       	nop
 452:	00 01       	movw	r0, r0

00000454 <__ctors_end>:
 454:	11 24       	eor	r1, r1
 456:	1f be       	out	0x3f, r1	; 63
 458:	cf e5       	ldi	r28, 0x5F	; 95
 45a:	d8 e0       	ldi	r29, 0x08	; 8
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	cd bf       	out	0x3d, r28	; 61

00000460 <__do_copy_data>:
 460:	10 e0       	ldi	r17, 0x00	; 0
 462:	a0 e6       	ldi	r26, 0x60	; 96
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	e4 e3       	ldi	r30, 0x34	; 52
 468:	f8 e0       	ldi	r31, 0x08	; 8
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__do_copy_data+0x10>
 46c:	05 90       	lpm	r0, Z+
 46e:	0d 92       	st	X+, r0
 470:	a0 36       	cpi	r26, 0x60	; 96
 472:	b1 07       	cpc	r27, r17
 474:	d9 f7       	brne	.-10     	; 0x46c <__do_copy_data+0xc>

00000476 <__do_clear_bss>:
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	a0 e6       	ldi	r26, 0x60	; 96
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	01 c0       	rjmp	.+2      	; 0x480 <.do_clear_bss_start>

0000047e <.do_clear_bss_loop>:
 47e:	1d 92       	st	X+, r1

00000480 <.do_clear_bss_start>:
 480:	a1 36       	cpi	r26, 0x61	; 97
 482:	b2 07       	cpc	r27, r18
 484:	e1 f7       	brne	.-8      	; 0x47e <.do_clear_bss_loop>
 486:	0e 94 1c 03 	call	0x638	; 0x638 <main>
 48a:	0c 94 18 04 	jmp	0x830	; 0x830 <_exit>

0000048e <__bad_interrupt>:
 48e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000492 <_ZN9ImageGLcd12GLCD_CommandEc>:
}


void ImageGLcd::GLCD_Command(char Command)						/* GLCD command function */
{
	Data_Port = Command;			/* Copy command on data pin */
 492:	6b bb       	out	0x1b, r22	; 27
	Command_Port &= ~(1 << RS);		/* Make RS LOW to select command register */
 494:	a8 98       	cbi	0x15, 0	; 21
	Command_Port &= ~(1 << RW);		/* Make RW LOW to select write operation */
 496:	a9 98       	cbi	0x15, 1	; 21
	Command_Port |=  (1 << EN);		/* Make HIGH to LOW transition on Enable pin */
 498:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49a:	8d e0       	ldi	r24, 0x0D	; 13
 49c:	8a 95       	dec	r24
 49e:	f1 f7       	brne	.-4      	; 0x49c <_ZN9ImageGLcd12GLCD_CommandEc+0xa>
 4a0:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
 4a2:	aa 98       	cbi	0x15, 2	; 21
 4a4:	8d e0       	ldi	r24, 0x0D	; 13
 4a6:	8a 95       	dec	r24
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <_ZN9ImageGLcd12GLCD_CommandEc+0x14>
 4aa:	00 00       	nop
 4ac:	08 95       	ret

000004ae <_ZN9ImageGLcd9GLCD_DataEc>:
	_delay_us(5);
}

void ImageGLcd::GLCD_Data(char Data)							/* GLCD data function */
{
	Data_Port = Data;				/* Copy data on data pin */
 4ae:	6b bb       	out	0x1b, r22	; 27
	Command_Port |=  (1 << RS);		/* Make RS HIGH to select data register */
 4b0:	a8 9a       	sbi	0x15, 0	; 21
	Command_Port &= ~(1 << RW);		/* Make RW LOW to select write operation */
 4b2:	a9 98       	cbi	0x15, 1	; 21
	Command_Port |=  (1 << EN);		/* Make HIGH to LOW transition on Enable pin */
 4b4:	aa 9a       	sbi	0x15, 2	; 21
 4b6:	8d e0       	ldi	r24, 0x0D	; 13
 4b8:	8a 95       	dec	r24
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <_ZN9ImageGLcd9GLCD_DataEc+0xa>
 4bc:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
 4be:	aa 98       	cbi	0x15, 2	; 21
 4c0:	8d e0       	ldi	r24, 0x0D	; 13
 4c2:	8a 95       	dec	r24
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <_ZN9ImageGLcd9GLCD_DataEc+0x14>
 4c6:	00 00       	nop
 4c8:	08 95       	ret

000004ca <_ZN9ImageGLcd9GLCD_InitEv>:
	_delay_us(5);
}

void ImageGLcd::GLCD_Init()										/* GLCD initialize function */
{
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	ec 01       	movw	r28, r24
	Data_Port_Dir = 0xFF;
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	8a bb       	out	0x1a, r24	; 26
	Command_Port_Dir = 0xFF;
 4d4:	84 bb       	out	0x14, r24	; 20
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
 4d6:	85 b3       	in	r24, 0x15	; 21
 4d8:	88 63       	ori	r24, 0x38	; 56
 4da:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4dc:	8f e3       	ldi	r24, 0x3F	; 63
 4de:	9c e9       	ldi	r25, 0x9C	; 156
 4e0:	01 97       	sbiw	r24, 0x01	; 1
 4e2:	f1 f7       	brne	.-4      	; 0x4e0 <_ZN9ImageGLcd9GLCD_InitEv+0x16>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <_ZN9ImageGLcd9GLCD_InitEv+0x1c>
 4e6:	00 00       	nop
	_delay_ms(20);
	GLCD_Command(0x3E);				/* Display OFF */
 4e8:	6e e3       	ldi	r22, 0x3E	; 62
 4ea:	ce 01       	movw	r24, r28
 4ec:	0e 94 49 02 	call	0x492	; 0x492 <_ZN9ImageGLcd12GLCD_CommandEc>
	GLCD_Command(0x40);				/* Set Y address (column=0) */
 4f0:	60 e4       	ldi	r22, 0x40	; 64
 4f2:	ce 01       	movw	r24, r28
 4f4:	0e 94 49 02 	call	0x492	; 0x492 <_ZN9ImageGLcd12GLCD_CommandEc>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
 4f8:	68 eb       	ldi	r22, 0xB8	; 184
 4fa:	ce 01       	movw	r24, r28
 4fc:	0e 94 49 02 	call	0x492	; 0x492 <_ZN9ImageGLcd12GLCD_CommandEc>
	GLCD_Command(0xC0);				/* Set z address (start line=0) */
 500:	60 ec       	ldi	r22, 0xC0	; 192
 502:	ce 01       	movw	r24, r28
 504:	0e 94 49 02 	call	0x492	; 0x492 <_ZN9ImageGLcd12GLCD_CommandEc>
	GLCD_Command(0x3F);				/* Display ON */
 508:	6f e3       	ldi	r22, 0x3F	; 63
 50a:	ce 01       	movw	r24, r28
 50c:	0e 94 49 02 	call	0x492	; 0x492 <_ZN9ImageGLcd12GLCD_CommandEc>
}
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <_ZN9ImageGLcd13GLCD_ClearAllEv>:

void ImageGLcd::GLCD_ClearAll()									/* GLCD all display clear function */
{
 516:	ff 92       	push	r15
 518:	0f 93       	push	r16
 51a:	1f 93       	push	r17
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	8c 01       	movw	r16, r24
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
 522:	85 b3       	in	r24, 0x15	; 21
 524:	88 61       	ori	r24, 0x18	; 24
 526:	85 bb       	out	0x15, r24	; 21
 528:	0f 2e       	mov	r0, r31
 52a:	f8 eb       	ldi	r31, 0xB8	; 184
 52c:	ff 2e       	mov	r15, r31
 52e:	f0 2d       	mov	r31, r0
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);	/* Increment page each time after 64 column */
 530:	6f 2d       	mov	r22, r15
 532:	c8 01       	movw	r24, r16
 534:	0e 94 49 02 	call	0x492	; 0x492 <_ZN9ImageGLcd12GLCD_CommandEc>
 538:	c0 e4       	ldi	r28, 0x40	; 64
 53a:	d0 e0       	ldi	r29, 0x00	; 0
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);			/* Write zeros to all 64 column */
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	c8 01       	movw	r24, r16
 540:	0e 94 57 02 	call	0x4ae	; 0x4ae <_ZN9ImageGLcd9GLCD_DataEc>
 544:	21 97       	sbiw	r28, 0x01	; 1
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);	/* Increment page each time after 64 column */
		for(j = 0; j < 64; j++)
 546:	d1 f7       	brne	.-12     	; 0x53c <_ZN9ImageGLcd13GLCD_ClearAllEv+0x26>
 548:	f3 94       	inc	r15
void ImageGLcd::GLCD_ClearAll()									/* GLCD all display clear function */
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
 54a:	80 ec       	ldi	r24, 0xC0	; 192
 54c:	f8 12       	cpse	r15, r24
 54e:	f0 cf       	rjmp	.-32     	; 0x530 <_ZN9ImageGLcd13GLCD_ClearAllEv+0x1a>
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);			/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);				/* Set Y address (column=0) */
 550:	60 e4       	ldi	r22, 0x40	; 64
 552:	c8 01       	movw	r24, r16
 554:	0e 94 49 02 	call	0x492	; 0x492 <_ZN9ImageGLcd12GLCD_CommandEc>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
 558:	68 eb       	ldi	r22, 0xB8	; 184
 55a:	c8 01       	movw	r24, r16
 55c:	0e 94 49 02 	call	0x492	; 0x492 <_ZN9ImageGLcd12GLCD_CommandEc>
}
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	ff 90       	pop	r15
 56a:	08 95       	ret

0000056c <_ZN9ImageGLcd11GLCD_StringEPKc>:

void ImageGLcd::GLCD_String(const char* image)					/* GLCD string write function */
{
 56c:	6f 92       	push	r6
 56e:	7f 92       	push	r7
 570:	8f 92       	push	r8
 572:	9f 92       	push	r9
 574:	af 92       	push	r10
 576:	bf 92       	push	r11
 578:	cf 92       	push	r12
 57a:	df 92       	push	r13
 57c:	ef 92       	push	r14
 57e:	ff 92       	push	r15
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	7c 01       	movw	r14, r24
	int column,page,page_add=0xB8,k=0;
	float page_inc=0.5;
	char byte;

	Command_Port |= (1 << CS1);		/* Select first Left half of display */
 58a:	ab 9a       	sbi	0x15, 3	; 21
	Command_Port &= ~(1 << CS2);
 58c:	ac 98       	cbi	0x15, 4	; 21
 58e:	eb 01       	movw	r28, r22
 590:	6b 01       	movw	r12, r22
 592:	8c ef       	ldi	r24, 0xFC	; 252
 594:	d8 1a       	sub	r13, r24
}

void ImageGLcd::GLCD_String(const char* image)					/* GLCD string write function */
{
	int column,page,page_add=0xB8,k=0;
	float page_inc=0.5;
 596:	0f 2e       	mov	r0, r31
 598:	81 2c       	mov	r8, r1
 59a:	91 2c       	mov	r9, r1
 59c:	a1 2c       	mov	r10, r1
 59e:	ff e3       	ldi	r31, 0x3F	; 63
 5a0:	bf 2e       	mov	r11, r31
 5a2:	f0 2d       	mov	r31, r0
		for(column=0;column<64;column++)
		{
			byte = pgm_read_byte(&image[k+column]);
			GLCD_Data(byte);		/* Print 64 column of each page */
		}
		Command_Port ^= (1 << CS1);	/* If yes then change segment controller */
 5a4:	68 94       	set
 5a6:	66 24       	eor	r6, r6
 5a8:	63 f8       	bld	r6, 3
		Command_Port ^= (1 << CS2);
 5aa:	68 94       	set
 5ac:	77 24       	eor	r7, r7
 5ae:	74 f8       	bld	r7, 4
 5b0:	8e 01       	movw	r16, r28
 5b2:	00 5c       	subi	r16, 0xC0	; 192
 5b4:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(page=0;page<16;page++)		/* Print 16 pages i.e. 8 page of each half of display */
	{
		for(column=0;column<64;column++)
		{
			byte = pgm_read_byte(&image[k+column]);
 5b6:	fe 01       	movw	r30, r28
 5b8:	64 91       	lpm	r22, Z
			GLCD_Data(byte);		/* Print 64 column of each page */
 5ba:	c7 01       	movw	r24, r14
 5bc:	0e 94 57 02 	call	0x4ae	; 0x4ae <_ZN9ImageGLcd9GLCD_DataEc>
 5c0:	21 96       	adiw	r28, 0x01	; 1
	Command_Port |= (1 << CS1);		/* Select first Left half of display */
	Command_Port &= ~(1 << CS2);
	
	for(page=0;page<16;page++)		/* Print 16 pages i.e. 8 page of each half of display */
	{
		for(column=0;column<64;column++)
 5c2:	c0 17       	cp	r28, r16
 5c4:	d1 07       	cpc	r29, r17
 5c6:	b9 f7       	brne	.-18     	; 0x5b6 <_ZN9ImageGLcd11GLCD_StringEPKc+0x4a>
		{
			byte = pgm_read_byte(&image[k+column]);
			GLCD_Data(byte);		/* Print 64 column of each page */
		}
		Command_Port ^= (1 << CS1);	/* If yes then change segment controller */
 5c8:	85 b3       	in	r24, 0x15	; 21
 5ca:	86 25       	eor	r24, r6
 5cc:	85 bb       	out	0x15, r24	; 21
		Command_Port ^= (1 << CS2);
 5ce:	85 b3       	in	r24, 0x15	; 21
 5d0:	87 25       	eor	r24, r7
 5d2:	85 bb       	out	0x15, r24	; 21
		GLCD_Command((page_add+page_inc));/* Increment page address */
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	48 e3       	ldi	r20, 0x38	; 56
 5da:	53 e4       	ldi	r21, 0x43	; 67
 5dc:	c5 01       	movw	r24, r10
 5de:	b4 01       	movw	r22, r8
 5e0:	0e 94 2c 03 	call	0x658	; 0x658 <__addsf3>
 5e4:	0e 94 98 03 	call	0x730	; 0x730 <__fixunssfsi>
 5e8:	c7 01       	movw	r24, r14
 5ea:	0e 94 49 02 	call	0x492	; 0x492 <_ZN9ImageGLcd12GLCD_CommandEc>
		page_inc=page_inc+0.5;
 5ee:	20 e0       	ldi	r18, 0x00	; 0
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	5f e3       	ldi	r21, 0x3F	; 63
 5f6:	c5 01       	movw	r24, r10
 5f8:	b4 01       	movw	r22, r8
 5fa:	0e 94 2c 03 	call	0x658	; 0x658 <__addsf3>
 5fe:	4b 01       	movw	r8, r22
 600:	5c 01       	movw	r10, r24
 602:	e8 01       	movw	r28, r16
	char byte;

	Command_Port |= (1 << CS1);		/* Select first Left half of display */
	Command_Port &= ~(1 << CS2);
	
	for(page=0;page<16;page++)		/* Print 16 pages i.e. 8 page of each half of display */
 604:	0c 15       	cp	r16, r12
 606:	1d 05       	cpc	r17, r13
 608:	99 f6       	brne	.-90     	; 0x5b0 <_ZN9ImageGLcd11GLCD_StringEPKc+0x44>
		Command_Port ^= (1 << CS2);
		GLCD_Command((page_add+page_inc));/* Increment page address */
		page_inc=page_inc+0.5;
		k=k+64;						/* Increment pointer */
	}
	GLCD_Command(0x40);				/* Set Y address (column=0) */
 60a:	60 e4       	ldi	r22, 0x40	; 64
 60c:	c7 01       	movw	r24, r14
 60e:	0e 94 49 02 	call	0x492	; 0x492 <_ZN9ImageGLcd12GLCD_CommandEc>
	GLCD_Command(0xB8);				/* Set x address (page=0) */
 612:	68 eb       	ldi	r22, 0xB8	; 184
 614:	c7 01       	movw	r24, r14
 616:	0e 94 49 02 	call	0x492	; 0x492 <_ZN9ImageGLcd12GLCD_CommandEc>
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	1f 91       	pop	r17
 620:	0f 91       	pop	r16
 622:	ff 90       	pop	r15
 624:	ef 90       	pop	r14
 626:	df 90       	pop	r13
 628:	cf 90       	pop	r12
 62a:	bf 90       	pop	r11
 62c:	af 90       	pop	r10
 62e:	9f 90       	pop	r9
 630:	8f 90       	pop	r8
 632:	7f 90       	pop	r7
 634:	6f 90       	pop	r6
 636:	08 95       	ret

00000638 <main>:

ImageGLcd myGLcd;

int main(void)
{
	myGLcd.GLCD_Init();					/* Initialize GLCD */
 638:	80 e6       	ldi	r24, 0x60	; 96
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN9ImageGLcd9GLCD_InitEv>
	myGLcd.GLCD_ClearAll();				/* Clear all GLCD display */
 640:	80 e6       	ldi	r24, 0x60	; 96
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 94 8b 02 	call	0x516	; 0x516 <_ZN9ImageGLcd13GLCD_ClearAllEv>
	myGLcd.GLCD_String(img);
 648:	64 e5       	ldi	r22, 0x54	; 84
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	80 e6       	ldi	r24, 0x60	; 96
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 b6 02 	call	0x56c	; 0x56c <_ZN9ImageGLcd11GLCD_StringEPKc>
 654:	ff cf       	rjmp	.-2      	; 0x654 <main+0x1c>

00000656 <__subsf3>:
 656:	50 58       	subi	r21, 0x80	; 128

00000658 <__addsf3>:
 658:	bb 27       	eor	r27, r27
 65a:	aa 27       	eor	r26, r26
 65c:	0e 94 43 03 	call	0x686	; 0x686 <__addsf3x>
 660:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_round>
 664:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fp_pscA>
 668:	38 f0       	brcs	.+14     	; 0x678 <__addsf3+0x20>
 66a:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_pscB>
 66e:	20 f0       	brcs	.+8      	; 0x678 <__addsf3+0x20>
 670:	39 f4       	brne	.+14     	; 0x680 <__addsf3+0x28>
 672:	9f 3f       	cpi	r25, 0xFF	; 255
 674:	19 f4       	brne	.+6      	; 0x67c <__addsf3+0x24>
 676:	26 f4       	brtc	.+8      	; 0x680 <__addsf3+0x28>
 678:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_nan>
 67c:	0e f4       	brtc	.+2      	; 0x680 <__addsf3+0x28>
 67e:	e0 95       	com	r30
 680:	e7 fb       	bst	r30, 7
 682:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_inf>

00000686 <__addsf3x>:
 686:	e9 2f       	mov	r30, r25
 688:	0e 94 ef 03 	call	0x7de	; 0x7de <__fp_split3>
 68c:	58 f3       	brcs	.-42     	; 0x664 <__addsf3+0xc>
 68e:	ba 17       	cp	r27, r26
 690:	62 07       	cpc	r22, r18
 692:	73 07       	cpc	r23, r19
 694:	84 07       	cpc	r24, r20
 696:	95 07       	cpc	r25, r21
 698:	20 f0       	brcs	.+8      	; 0x6a2 <__addsf3x+0x1c>
 69a:	79 f4       	brne	.+30     	; 0x6ba <__addsf3x+0x34>
 69c:	a6 f5       	brtc	.+104    	; 0x706 <__addsf3x+0x80>
 69e:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_zero>
 6a2:	0e f4       	brtc	.+2      	; 0x6a6 <__addsf3x+0x20>
 6a4:	e0 95       	com	r30
 6a6:	0b 2e       	mov	r0, r27
 6a8:	ba 2f       	mov	r27, r26
 6aa:	a0 2d       	mov	r26, r0
 6ac:	0b 01       	movw	r0, r22
 6ae:	b9 01       	movw	r22, r18
 6b0:	90 01       	movw	r18, r0
 6b2:	0c 01       	movw	r0, r24
 6b4:	ca 01       	movw	r24, r20
 6b6:	a0 01       	movw	r20, r0
 6b8:	11 24       	eor	r1, r1
 6ba:	ff 27       	eor	r31, r31
 6bc:	59 1b       	sub	r21, r25
 6be:	99 f0       	breq	.+38     	; 0x6e6 <__addsf3x+0x60>
 6c0:	59 3f       	cpi	r21, 0xF9	; 249
 6c2:	50 f4       	brcc	.+20     	; 0x6d8 <__addsf3x+0x52>
 6c4:	50 3e       	cpi	r21, 0xE0	; 224
 6c6:	68 f1       	brcs	.+90     	; 0x722 <__addsf3x+0x9c>
 6c8:	1a 16       	cp	r1, r26
 6ca:	f0 40       	sbci	r31, 0x00	; 0
 6cc:	a2 2f       	mov	r26, r18
 6ce:	23 2f       	mov	r18, r19
 6d0:	34 2f       	mov	r19, r20
 6d2:	44 27       	eor	r20, r20
 6d4:	58 5f       	subi	r21, 0xF8	; 248
 6d6:	f3 cf       	rjmp	.-26     	; 0x6be <__addsf3x+0x38>
 6d8:	46 95       	lsr	r20
 6da:	37 95       	ror	r19
 6dc:	27 95       	ror	r18
 6de:	a7 95       	ror	r26
 6e0:	f0 40       	sbci	r31, 0x00	; 0
 6e2:	53 95       	inc	r21
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__addsf3x+0x52>
 6e6:	7e f4       	brtc	.+30     	; 0x706 <__addsf3x+0x80>
 6e8:	1f 16       	cp	r1, r31
 6ea:	ba 0b       	sbc	r27, r26
 6ec:	62 0b       	sbc	r22, r18
 6ee:	73 0b       	sbc	r23, r19
 6f0:	84 0b       	sbc	r24, r20
 6f2:	ba f0       	brmi	.+46     	; 0x722 <__addsf3x+0x9c>
 6f4:	91 50       	subi	r25, 0x01	; 1
 6f6:	a1 f0       	breq	.+40     	; 0x720 <__addsf3x+0x9a>
 6f8:	ff 0f       	add	r31, r31
 6fa:	bb 1f       	adc	r27, r27
 6fc:	66 1f       	adc	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	88 1f       	adc	r24, r24
 702:	c2 f7       	brpl	.-16     	; 0x6f4 <__addsf3x+0x6e>
 704:	0e c0       	rjmp	.+28     	; 0x722 <__addsf3x+0x9c>
 706:	ba 0f       	add	r27, r26
 708:	62 1f       	adc	r22, r18
 70a:	73 1f       	adc	r23, r19
 70c:	84 1f       	adc	r24, r20
 70e:	48 f4       	brcc	.+18     	; 0x722 <__addsf3x+0x9c>
 710:	87 95       	ror	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	b7 95       	ror	r27
 718:	f7 95       	ror	r31
 71a:	9e 3f       	cpi	r25, 0xFE	; 254
 71c:	08 f0       	brcs	.+2      	; 0x720 <__addsf3x+0x9a>
 71e:	b0 cf       	rjmp	.-160    	; 0x680 <__addsf3+0x28>
 720:	93 95       	inc	r25
 722:	88 0f       	add	r24, r24
 724:	08 f0       	brcs	.+2      	; 0x728 <__addsf3x+0xa2>
 726:	99 27       	eor	r25, r25
 728:	ee 0f       	add	r30, r30
 72a:	97 95       	ror	r25
 72c:	87 95       	ror	r24
 72e:	08 95       	ret

00000730 <__fixunssfsi>:
 730:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fp_splitA>
 734:	88 f0       	brcs	.+34     	; 0x758 <__fixunssfsi+0x28>
 736:	9f 57       	subi	r25, 0x7F	; 127
 738:	98 f0       	brcs	.+38     	; 0x760 <__fixunssfsi+0x30>
 73a:	b9 2f       	mov	r27, r25
 73c:	99 27       	eor	r25, r25
 73e:	b7 51       	subi	r27, 0x17	; 23
 740:	b0 f0       	brcs	.+44     	; 0x76e <__fixunssfsi+0x3e>
 742:	e1 f0       	breq	.+56     	; 0x77c <__fixunssfsi+0x4c>
 744:	66 0f       	add	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	88 1f       	adc	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	1a f0       	brmi	.+6      	; 0x754 <__fixunssfsi+0x24>
 74e:	ba 95       	dec	r27
 750:	c9 f7       	brne	.-14     	; 0x744 <__fixunssfsi+0x14>
 752:	14 c0       	rjmp	.+40     	; 0x77c <__fixunssfsi+0x4c>
 754:	b1 30       	cpi	r27, 0x01	; 1
 756:	91 f0       	breq	.+36     	; 0x77c <__fixunssfsi+0x4c>
 758:	0e 94 11 04 	call	0x822	; 0x822 <__fp_zero>
 75c:	b1 e0       	ldi	r27, 0x01	; 1
 75e:	08 95       	ret
 760:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_zero>
 764:	67 2f       	mov	r22, r23
 766:	78 2f       	mov	r23, r24
 768:	88 27       	eor	r24, r24
 76a:	b8 5f       	subi	r27, 0xF8	; 248
 76c:	39 f0       	breq	.+14     	; 0x77c <__fixunssfsi+0x4c>
 76e:	b9 3f       	cpi	r27, 0xF9	; 249
 770:	cc f3       	brlt	.-14     	; 0x764 <__fixunssfsi+0x34>
 772:	86 95       	lsr	r24
 774:	77 95       	ror	r23
 776:	67 95       	ror	r22
 778:	b3 95       	inc	r27
 77a:	d9 f7       	brne	.-10     	; 0x772 <__fixunssfsi+0x42>
 77c:	3e f4       	brtc	.+14     	; 0x78c <__fixunssfsi+0x5c>
 77e:	90 95       	com	r25
 780:	80 95       	com	r24
 782:	70 95       	com	r23
 784:	61 95       	neg	r22
 786:	7f 4f       	sbci	r23, 0xFF	; 255
 788:	8f 4f       	sbci	r24, 0xFF	; 255
 78a:	9f 4f       	sbci	r25, 0xFF	; 255
 78c:	08 95       	ret

0000078e <__fp_inf>:
 78e:	97 f9       	bld	r25, 7
 790:	9f 67       	ori	r25, 0x7F	; 127
 792:	80 e8       	ldi	r24, 0x80	; 128
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	08 95       	ret

0000079a <__fp_nan>:
 79a:	9f ef       	ldi	r25, 0xFF	; 255
 79c:	80 ec       	ldi	r24, 0xC0	; 192
 79e:	08 95       	ret

000007a0 <__fp_pscA>:
 7a0:	00 24       	eor	r0, r0
 7a2:	0a 94       	dec	r0
 7a4:	16 16       	cp	r1, r22
 7a6:	17 06       	cpc	r1, r23
 7a8:	18 06       	cpc	r1, r24
 7aa:	09 06       	cpc	r0, r25
 7ac:	08 95       	ret

000007ae <__fp_pscB>:
 7ae:	00 24       	eor	r0, r0
 7b0:	0a 94       	dec	r0
 7b2:	12 16       	cp	r1, r18
 7b4:	13 06       	cpc	r1, r19
 7b6:	14 06       	cpc	r1, r20
 7b8:	05 06       	cpc	r0, r21
 7ba:	08 95       	ret

000007bc <__fp_round>:
 7bc:	09 2e       	mov	r0, r25
 7be:	03 94       	inc	r0
 7c0:	00 0c       	add	r0, r0
 7c2:	11 f4       	brne	.+4      	; 0x7c8 <__fp_round+0xc>
 7c4:	88 23       	and	r24, r24
 7c6:	52 f0       	brmi	.+20     	; 0x7dc <__fp_round+0x20>
 7c8:	bb 0f       	add	r27, r27
 7ca:	40 f4       	brcc	.+16     	; 0x7dc <__fp_round+0x20>
 7cc:	bf 2b       	or	r27, r31
 7ce:	11 f4       	brne	.+4      	; 0x7d4 <__fp_round+0x18>
 7d0:	60 ff       	sbrs	r22, 0
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <__fp_round+0x20>
 7d4:	6f 5f       	subi	r22, 0xFF	; 255
 7d6:	7f 4f       	sbci	r23, 0xFF	; 255
 7d8:	8f 4f       	sbci	r24, 0xFF	; 255
 7da:	9f 4f       	sbci	r25, 0xFF	; 255
 7dc:	08 95       	ret

000007de <__fp_split3>:
 7de:	57 fd       	sbrc	r21, 7
 7e0:	90 58       	subi	r25, 0x80	; 128
 7e2:	44 0f       	add	r20, r20
 7e4:	55 1f       	adc	r21, r21
 7e6:	59 f0       	breq	.+22     	; 0x7fe <__fp_splitA+0x10>
 7e8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ea:	71 f0       	breq	.+28     	; 0x808 <__fp_splitA+0x1a>
 7ec:	47 95       	ror	r20

000007ee <__fp_splitA>:
 7ee:	88 0f       	add	r24, r24
 7f0:	97 fb       	bst	r25, 7
 7f2:	99 1f       	adc	r25, r25
 7f4:	61 f0       	breq	.+24     	; 0x80e <__fp_splitA+0x20>
 7f6:	9f 3f       	cpi	r25, 0xFF	; 255
 7f8:	79 f0       	breq	.+30     	; 0x818 <__fp_splitA+0x2a>
 7fa:	87 95       	ror	r24
 7fc:	08 95       	ret
 7fe:	12 16       	cp	r1, r18
 800:	13 06       	cpc	r1, r19
 802:	14 06       	cpc	r1, r20
 804:	55 1f       	adc	r21, r21
 806:	f2 cf       	rjmp	.-28     	; 0x7ec <__fp_split3+0xe>
 808:	46 95       	lsr	r20
 80a:	f1 df       	rcall	.-30     	; 0x7ee <__fp_splitA>
 80c:	08 c0       	rjmp	.+16     	; 0x81e <__fp_splitA+0x30>
 80e:	16 16       	cp	r1, r22
 810:	17 06       	cpc	r1, r23
 812:	18 06       	cpc	r1, r24
 814:	99 1f       	adc	r25, r25
 816:	f1 cf       	rjmp	.-30     	; 0x7fa <__fp_splitA+0xc>
 818:	86 95       	lsr	r24
 81a:	71 05       	cpc	r23, r1
 81c:	61 05       	cpc	r22, r1
 81e:	08 94       	sec
 820:	08 95       	ret

00000822 <__fp_zero>:
 822:	e8 94       	clt

00000824 <__fp_szero>:
 824:	bb 27       	eor	r27, r27
 826:	66 27       	eor	r22, r22
 828:	77 27       	eor	r23, r23
 82a:	cb 01       	movw	r24, r22
 82c:	97 f9       	bld	r25, 7
 82e:	08 95       	ret

00000830 <_exit>:
 830:	f8 94       	cli

00000832 <__stop_program>:
 832:	ff cf       	rjmp	.-2      	; 0x832 <__stop_program>
