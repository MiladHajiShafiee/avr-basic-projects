
AnalogComparaor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000644  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000572  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d6  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  000010e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e3  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  54:	56 00       	.word	0x0056	; ????
  56:	58 00       	.word	0x0058	; ????
  58:	5b 00       	.word	0x005b	; ????
  5a:	5e 00       	.word	0x005e	; ????
  5c:	61 00       	.word	0x0061	; ????
  5e:	64 00       	.word	0x0064	; ????
  60:	67 00       	.word	0x0067	; ????
  62:	6a 00       	.word	0x006a	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z6AcInit12PhraseValuesS_b>:
	False, Toggle,
	FallingEdge, RisingEdge
		};

uint8_t AcInit(PhraseValues ve, PhraseValues interruptMode, bool inputCaptureMode)
{
  7c:	e8 2f       	mov	r30, r24
	if (ve == AIN1)
  7e:	81 11       	cpse	r24, r1
  80:	05 c0       	rjmp	.+10     	; 0x8c <_Z6AcInit12PhraseValuesS_b+0x10>
	{
		SFIOR &= ~(1 << ACME);
  82:	80 b7       	in	r24, 0x30	; 48
  84:	87 7f       	andi	r24, 0xF7	; 247
  86:	80 bf       	out	0x30, r24	; 48
		ACSR = 0x00;
  88:	18 b8       	out	0x08, r1	; 8
  8a:	26 c0       	rjmp	.+76     	; 0xd8 <_Z6AcInit12PhraseValuesS_b+0x5c>
	} 
	else
	{
		ADCSRA &= ~(1 << ADEN);
  8c:	37 98       	cbi	0x06, 7	; 6
		SFIOR |= (1 << ACME);
  8e:	80 b7       	in	r24, 0x30	; 48
  90:	88 60       	ori	r24, 0x08	; 8
  92:	80 bf       	out	0x30, r24	; 48
		ACSR = 0x00;
  94:	18 b8       	out	0x08, r1	; 8
		switch (ve)
  96:	8e 2f       	mov	r24, r30
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	fc 01       	movw	r30, r24
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	e8 30       	cpi	r30, 0x08	; 8
  a0:	f1 05       	cpc	r31, r1
  a2:	d0 f4       	brcc	.+52     	; 0xd8 <_Z6AcInit12PhraseValuesS_b+0x5c>
  a4:	e6 5d       	subi	r30, 0xD6	; 214
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__tablejump2__>
		{
			case ADC0:
			ADMUX = 0b00000000;
  ac:	17 b8       	out	0x07, r1	; 7
			break;
  ae:	14 c0       	rjmp	.+40     	; 0xd8 <_Z6AcInit12PhraseValuesS_b+0x5c>
			case ADC1:
			ADMUX = 0b00000001;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	87 b9       	out	0x07, r24	; 7
			break;
  b4:	11 c0       	rjmp	.+34     	; 0xd8 <_Z6AcInit12PhraseValuesS_b+0x5c>
			case ADC2:
			ADMUX = 0b00000010;
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	87 b9       	out	0x07, r24	; 7
			break;
  ba:	0e c0       	rjmp	.+28     	; 0xd8 <_Z6AcInit12PhraseValuesS_b+0x5c>
			case ADC3:
			ADMUX = 0b00000011;
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	87 b9       	out	0x07, r24	; 7
			break;
  c0:	0b c0       	rjmp	.+22     	; 0xd8 <_Z6AcInit12PhraseValuesS_b+0x5c>
			case ADC4:
			ADMUX = 0b00000100;
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	87 b9       	out	0x07, r24	; 7
			break;
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <_Z6AcInit12PhraseValuesS_b+0x5c>
			case ADC5:
			ADMUX = 0b00000101;
  c8:	85 e0       	ldi	r24, 0x05	; 5
  ca:	87 b9       	out	0x07, r24	; 7
			break;
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <_Z6AcInit12PhraseValuesS_b+0x5c>
			case ADC6:
			ADMUX = 0b00000110;
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	87 b9       	out	0x07, r24	; 7
			break;
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <_Z6AcInit12PhraseValuesS_b+0x5c>
			case ADC7:
			ADMUX = 0b00000111;
  d4:	87 e0       	ldi	r24, 0x07	; 7
  d6:	87 b9       	out	0x07, r24	; 7
			break;
		}
	}
	if (interruptMode != False)
  d8:	69 30       	cpi	r22, 0x09	; 9
  da:	79 f0       	breq	.+30     	; 0xfa <_Z6AcInit12PhraseValuesS_b+0x7e>
	{
		ACSR |= (1 << ACIE);
  dc:	43 9a       	sbi	0x08, 3	; 8
		switch (interruptMode)
  de:	6b 30       	cpi	r22, 0x0B	; 11
  e0:	39 f0       	breq	.+14     	; 0xf0 <_Z6AcInit12PhraseValuesS_b+0x74>
  e2:	6c 30       	cpi	r22, 0x0C	; 12
  e4:	41 f0       	breq	.+16     	; 0xf6 <_Z6AcInit12PhraseValuesS_b+0x7a>
  e6:	6a 30       	cpi	r22, 0x0A	; 10
  e8:	41 f4       	brne	.+16     	; 0xfa <_Z6AcInit12PhraseValuesS_b+0x7e>
		{
			case Toggle:
			ACSR &= ~(1 << ACIS0);
  ea:	40 98       	cbi	0x08, 0	; 8
			ACSR &= ~(1 << ACIS1);
  ec:	41 98       	cbi	0x08, 1	; 8
			break;
  ee:	05 c0       	rjmp	.+10     	; 0xfa <_Z6AcInit12PhraseValuesS_b+0x7e>
			case FallingEdge:
			ACSR &= ~(1 << ACIS0);
  f0:	40 98       	cbi	0x08, 0	; 8
			ACSR |= (1 << ACIS1);
  f2:	41 9a       	sbi	0x08, 1	; 8
			break;
  f4:	02 c0       	rjmp	.+4      	; 0xfa <_Z6AcInit12PhraseValuesS_b+0x7e>
			case RisingEdge:
			ACSR = (1 << ACIS0)|(1 << ACIS1);
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	88 b9       	out	0x08, r24	; 8
			break;
		}
	}
	if (inputCaptureMode)
  fa:	44 23       	and	r20, r20
  fc:	11 f0       	breq	.+4      	; 0x102 <_Z6AcInit12PhraseValuesS_b+0x86>
	{
		ACSR |= (1 << ACIC);
  fe:	42 9a       	sbi	0x08, 2	; 8
 100:	01 c0       	rjmp	.+2      	; 0x104 <_Z6AcInit12PhraseValuesS_b+0x88>
	} 
	else
	{
		ACSR &= ~(1 << ACIC);
 102:	42 98       	cbi	0x08, 2	; 8
	}
	while (1)
	{
		if (ACSR & (1 << ACO))
 104:	88 b1       	in	r24, 0x08	; 8
		else
		{
			return 0;
		}
	}
}
 106:	85 fb       	bst	r24, 5
 108:	88 27       	eor	r24, r24
 10a:	80 f9       	bld	r24, 0
 10c:	08 95       	ret

0000010e <main>:
#include <util/delay.h>
#include "AnalogComparator.h"

int main()
{
	DDRA |= (1 << PA0);
 10e:	d0 9a       	sbi	0x1a, 0	; 26
	uint8_t AcValue;
	
	while (1)
	{
		AcValue = AcInit(ADC0, False, false);
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	69 e0       	ldi	r22, 0x09	; 9
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z6AcInit12PhraseValuesS_b>
		if (AcValue)
 11a:	88 23       	and	r24, r24
 11c:	11 f0       	breq	.+4      	; 0x122 <main+0x14>
		{
			PORTA |= (1 << PA0);
 11e:	d8 9a       	sbi	0x1b, 0	; 27
 120:	f7 cf       	rjmp	.-18     	; 0x110 <main+0x2>
		} 
		else
		{
			PORTA &= ~(1 << PA0);
 122:	d8 98       	cbi	0x1b, 0	; 27
 124:	f5 cf       	rjmp	.-22     	; 0x110 <main+0x2>

00000126 <__tablejump2__>:
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	05 90       	lpm	r0, Z+
 12c:	f4 91       	lpm	r31, Z
 12e:	e0 2d       	mov	r30, r0
 130:	09 94       	ijmp

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
