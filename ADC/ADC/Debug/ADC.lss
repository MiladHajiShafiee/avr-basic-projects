
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000004d2  00000566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800072  00800072  00000578  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026fc  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4c  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f87  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  000048ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008db  00000000  00000000  00004c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000275e  00000000  00000000  000054f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00007c55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
   c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
  54:	5b 00       	.word	0x005b	; ????
  56:	5e 00       	.word	0x005e	; ????
  58:	61 00       	.word	0x0061	; ????
  5a:	64 00       	.word	0x0064	; ????
  5c:	67 00       	.word	0x0067	; ????
  5e:	6a 00       	.word	0x006a	; ????
  60:	6d 00       	.word	0x006d	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e2 ed       	ldi	r30, 0xD2	; 210
  76:	f4 e0       	ldi	r31, 0x04	; 4
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a2 37       	cpi	r26, 0x72	; 114
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a2 e7       	ldi	r26, 0x72	; 114
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	a5 37       	cpi	r26, 0x75	; 117
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
  98:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <_exit>

0000009c <__bad_interrupt>:
  9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance>:

Registers IORegister;

void Adc::AdcInit(FrequencyDivision ADCSRAFrequency, VoltageReferance Vref)
{
	ADCSRA |= (1 << ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
	switch (ADCSRAFrequency)
  a2:	86 2f       	mov	r24, r22
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	87 30       	cpi	r24, 0x07	; 7
  a8:	91 05       	cpc	r25, r1
  aa:	c8 f4       	brcc	.+50     	; 0xde <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance+0x3e>
  ac:	fc 01       	movw	r30, r24
  ae:	e6 5d       	subi	r30, 0xD6	; 214
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	0c 94 2c 02 	jmp	0x458	; 0x458 <__tablejump2__>
	{
		case DevidedBy2:
		ADCSRA = (1 << ADEN)|(1 << ADPS0);
  b6:	81 e8       	ldi	r24, 0x81	; 129
  b8:	86 b9       	out	0x06, r24	; 6
		break;
  ba:	11 c0       	rjmp	.+34     	; 0xde <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance+0x3e>
		case DevidedBy4:
		ADCSRA =  (1 << ADEN)|(1 << ADPS1);
  bc:	82 e8       	ldi	r24, 0x82	; 130
  be:	86 b9       	out	0x06, r24	; 6
		break;
  c0:	0e c0       	rjmp	.+28     	; 0xde <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance+0x3e>
		case DevidedBy8:
		ADCSRA =  (1 << ADEN)|(1 << ADPS0)|(1 << ADPS1);
  c2:	83 e8       	ldi	r24, 0x83	; 131
  c4:	86 b9       	out	0x06, r24	; 6
		break;
  c6:	0b c0       	rjmp	.+22     	; 0xde <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance+0x3e>
		case DevidedBy16:
		ADCSRA =  (1 << ADEN)|(1 << ADPS2);
  c8:	84 e8       	ldi	r24, 0x84	; 132
  ca:	86 b9       	out	0x06, r24	; 6
		break;
  cc:	08 c0       	rjmp	.+16     	; 0xde <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance+0x3e>
		case DevidedBy32:
		ADCSRA =  (1 << ADEN)|(1 << ADPS0)|(1 << ADPS2);
  ce:	85 e8       	ldi	r24, 0x85	; 133
  d0:	86 b9       	out	0x06, r24	; 6
		break;
  d2:	05 c0       	rjmp	.+10     	; 0xde <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance+0x3e>
		case DevidedBy64:
		ADCSRA =  (1 << ADEN)|(1 << ADPS1)|(1 << ADPS2);
  d4:	86 e8       	ldi	r24, 0x86	; 134
  d6:	86 b9       	out	0x06, r24	; 6
		break;
  d8:	02 c0       	rjmp	.+4      	; 0xde <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance+0x3e>
		case DevidedBy128:
		ADCSRA =  (1 << ADEN)|(1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2);
  da:	87 e8       	ldi	r24, 0x87	; 135
  dc:	86 b9       	out	0x06, r24	; 6
		break;
	}
	
	if (Vref == AREF)
  de:	41 11       	cpse	r20, r1
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance+0x48>
	{
		ADMUX &= ~(1 << REFS0);
  e2:	3e 98       	cbi	0x07, 6	; 7
		ADMUX &= ~(1 << REFS1);
  e4:	3f 98       	cbi	0x07, 7	; 7
  e6:	08 95       	ret
	}
	else if (Vref == AVcc)
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	19 f4       	brne	.+6      	; 0xf2 <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance+0x52>
	{
			ADMUX |= (1 << REFS0);
  ec:	3e 9a       	sbi	0x07, 6	; 7
			ADMUX &= ~(1 << REFS1);
  ee:	3f 98       	cbi	0x07, 7	; 7
  f0:	08 95       	ret
	}
	else if (Vref == Internal)
  f2:	42 30       	cpi	r20, 0x02	; 2
  f4:	11 f4       	brne	.+4      	; 0xfa <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance+0x5a>
	{
		ADMUX |= (1 << REFS0);
  f6:	3e 9a       	sbi	0x07, 6	; 7
		ADMUX |= (1 << REFS1);
  f8:	3f 9a       	sbi	0x07, 7	; 7
  fa:	08 95       	ret

000000fc <_ZN3Adc7AdcReadEhj>:
	}
	
}

uint16_t Adc::AdcRead(unsigned char adcPort , unsigned int AdcChannel)
{
  fc:	cf 93       	push	r28
  fe:	c4 2f       	mov	r28, r20
	IORegister.DdrRegisters(adcPort , AdcChannel , 0);
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	82 e7       	ldi	r24, 0x72	; 114
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 91 00 	call	0x122	; 0x122 <_ZN9Registers12DdrRegistersEhjj>
	ADMUX = ADMUX|(AdcChannel & 0x0f);
 10c:	87 b1       	in	r24, 0x07	; 7
 10e:	cf 70       	andi	r28, 0x0F	; 15
 110:	c8 2b       	or	r28, r24
 112:	c7 b9       	out	0x07, r28	; 7
	ADCSRA = (1 << ADSC)|(1 << ADEN);
 114:	80 ec       	ldi	r24, 0xC0	; 192
 116:	86 b9       	out	0x06, r24	; 6
	while (ADIF == 0);
	ADCSRA |= (1 << ADIF);
 118:	34 9a       	sbi	0x06, 4	; 6
	return ADCW;
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	95 b1       	in	r25, 0x05	; 5
}
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <_ZN9Registers12DdrRegistersEhjj>:
	}
}

void Registers::DdrRegisters(unsigned char rName , unsigned int rNum , unsigned int rSituation)
{
	switch (rName)
 122:	62 34       	cpi	r22, 0x42	; 66
 124:	49 f1       	breq	.+82     	; 0x178 <_ZN9Registers12DdrRegistersEhjj+0x56>
 126:	18 f4       	brcc	.+6      	; 0x12e <_ZN9Registers12DdrRegistersEhjj+0xc>
 128:	61 34       	cpi	r22, 0x41	; 65
 12a:	41 f0       	breq	.+16     	; 0x13c <_ZN9Registers12DdrRegistersEhjj+0x1a>
 12c:	08 95       	ret
 12e:	63 34       	cpi	r22, 0x43	; 67
 130:	09 f4       	brne	.+2      	; 0x134 <_ZN9Registers12DdrRegistersEhjj+0x12>
 132:	40 c0       	rjmp	.+128    	; 0x1b4 <_ZN9Registers12DdrRegistersEhjj+0x92>
 134:	64 34       	cpi	r22, 0x44	; 68
 136:	09 f4       	brne	.+2      	; 0x13a <_ZN9Registers12DdrRegistersEhjj+0x18>
 138:	5a c0       	rjmp	.+180    	; 0x1ee <_ZN9Registers12DdrRegistersEhjj+0xcc>
 13a:	08 95       	ret
	{
		case 'A' :
			switch (rSituation)
 13c:	21 15       	cp	r18, r1
 13e:	31 05       	cpc	r19, r1
 140:	79 f0       	breq	.+30     	; 0x160 <_ZN9Registers12DdrRegistersEhjj+0x3e>
 142:	21 30       	cpi	r18, 0x01	; 1
 144:	31 05       	cpc	r19, r1
 146:	09 f0       	breq	.+2      	; 0x14a <_ZN9Registers12DdrRegistersEhjj+0x28>
 148:	6e c0       	rjmp	.+220    	; 0x226 <_ZN9Registers12DdrRegistersEhjj+0x104>
			{
				case 1 :
					DDRA |= (1 << rNum);
 14a:	2a b3       	in	r18, 0x1a	; 26
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <_ZN9Registers12DdrRegistersEhjj+0x34>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	4a 95       	dec	r20
 158:	e2 f7       	brpl	.-8      	; 0x152 <_ZN9Registers12DdrRegistersEhjj+0x30>
 15a:	82 2b       	or	r24, r18
 15c:	8a bb       	out	0x1a, r24	; 26
					break;
 15e:	08 95       	ret
				case 0 :
					DDRA &= ~(1 << rNum);
 160:	2a b3       	in	r18, 0x1a	; 26
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <_ZN9Registers12DdrRegistersEhjj+0x4a>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	4a 95       	dec	r20
 16e:	e2 f7       	brpl	.-8      	; 0x168 <_ZN9Registers12DdrRegistersEhjj+0x46>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	8a bb       	out	0x1a, r24	; 26
					break;
 176:	08 95       	ret
			}
			break;
			
		case 'B' :
			switch (rSituation)
 178:	21 15       	cp	r18, r1
 17a:	31 05       	cpc	r19, r1
 17c:	79 f0       	breq	.+30     	; 0x19c <_ZN9Registers12DdrRegistersEhjj+0x7a>
 17e:	21 30       	cpi	r18, 0x01	; 1
 180:	31 05       	cpc	r19, r1
 182:	09 f0       	breq	.+2      	; 0x186 <_ZN9Registers12DdrRegistersEhjj+0x64>
 184:	50 c0       	rjmp	.+160    	; 0x226 <_ZN9Registers12DdrRegistersEhjj+0x104>
			{
				case 1 :
					DDRB |= (1 << rNum);
 186:	27 b3       	in	r18, 0x17	; 23
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <_ZN9Registers12DdrRegistersEhjj+0x70>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	4a 95       	dec	r20
 194:	e2 f7       	brpl	.-8      	; 0x18e <_ZN9Registers12DdrRegistersEhjj+0x6c>
 196:	82 2b       	or	r24, r18
 198:	87 bb       	out	0x17, r24	; 23
					break;
 19a:	08 95       	ret
				case 0 :
					DDRB &= ~(1 << rNum);
 19c:	27 b3       	in	r18, 0x17	; 23
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <_ZN9Registers12DdrRegistersEhjj+0x86>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	4a 95       	dec	r20
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <_ZN9Registers12DdrRegistersEhjj+0x82>
 1ac:	80 95       	com	r24
 1ae:	82 23       	and	r24, r18
 1b0:	87 bb       	out	0x17, r24	; 23
					break;
 1b2:	08 95       	ret
			}
			break;
			
		case 'C' :
			switch (rSituation)
 1b4:	21 15       	cp	r18, r1
 1b6:	31 05       	cpc	r19, r1
 1b8:	71 f0       	breq	.+28     	; 0x1d6 <_ZN9Registers12DdrRegistersEhjj+0xb4>
 1ba:	21 30       	cpi	r18, 0x01	; 1
 1bc:	31 05       	cpc	r19, r1
 1be:	99 f5       	brne	.+102    	; 0x226 <_ZN9Registers12DdrRegistersEhjj+0x104>
			{
				case 1 :
					DDRC |= (1 << rNum);
 1c0:	24 b3       	in	r18, 0x14	; 20
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <_ZN9Registers12DdrRegistersEhjj+0xaa>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	4a 95       	dec	r20
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <_ZN9Registers12DdrRegistersEhjj+0xa6>
 1d0:	82 2b       	or	r24, r18
 1d2:	84 bb       	out	0x14, r24	; 20
					break;
 1d4:	08 95       	ret
				case 0 :
					DDRC &= ~(1 << rNum);
 1d6:	24 b3       	in	r18, 0x14	; 20
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <_ZN9Registers12DdrRegistersEhjj+0xc0>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	4a 95       	dec	r20
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <_ZN9Registers12DdrRegistersEhjj+0xbc>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	84 bb       	out	0x14, r24	; 20
					break;
 1ec:	08 95       	ret
			}
			break;
			
		case 'D' :
			switch (rSituation)
 1ee:	21 15       	cp	r18, r1
 1f0:	31 05       	cpc	r19, r1
 1f2:	71 f0       	breq	.+28     	; 0x210 <_ZN9Registers12DdrRegistersEhjj+0xee>
 1f4:	21 30       	cpi	r18, 0x01	; 1
 1f6:	31 05       	cpc	r19, r1
 1f8:	b1 f4       	brne	.+44     	; 0x226 <_ZN9Registers12DdrRegistersEhjj+0x104>
			{
				case 1 :
					DDRD |= (1 << rNum);
 1fa:	21 b3       	in	r18, 0x11	; 17
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <_ZN9Registers12DdrRegistersEhjj+0xe4>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	4a 95       	dec	r20
 208:	e2 f7       	brpl	.-8      	; 0x202 <_ZN9Registers12DdrRegistersEhjj+0xe0>
 20a:	82 2b       	or	r24, r18
 20c:	81 bb       	out	0x11, r24	; 17
					break;
 20e:	08 95       	ret
				case 0 :
					DDRD &= ~(1 << rNum);
 210:	21 b3       	in	r18, 0x11	; 17
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <_ZN9Registers12DdrRegistersEhjj+0xfa>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	4a 95       	dec	r20
 21e:	e2 f7       	brpl	.-8      	; 0x218 <_ZN9Registers12DdrRegistersEhjj+0xf6>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	81 bb       	out	0x11, r24	; 17
 226:	08 95       	ret

00000228 <_ZN13Lcd_4_BitMode10LcdCommandEh>:
	if (row == 0 && pos<16)
	LcdCommand((pos & 0x0F)|0x80);																			/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LcdCommand((pos & 0x0F)|0xC0);																			/* Command of first row and required position<16 */
	LcdString(str);																							/* Call LCD string function */
}
 228:	88 b3       	in	r24, 0x18	; 24
 22a:	8f 70       	andi	r24, 0x0F	; 15
 22c:	96 2f       	mov	r25, r22
 22e:	90 7f       	andi	r25, 0xF0	; 240
 230:	89 2b       	or	r24, r25
 232:	88 bb       	out	0x18, r24	; 24
 234:	c0 98       	cbi	0x18, 0	; 24
 236:	c1 9a       	sbi	0x18, 1	; 24
 238:	00 00       	nop
 23a:	c1 98       	cbi	0x18, 1	; 24
 23c:	82 e4       	ldi	r24, 0x42	; 66
 23e:	8a 95       	dec	r24
 240:	f1 f7       	brne	.-4      	; 0x23e <_ZN13Lcd_4_BitMode10LcdCommandEh+0x16>
 242:	00 c0       	rjmp	.+0      	; 0x244 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x1c>
 244:	88 b3       	in	r24, 0x18	; 24
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	90 e1       	ldi	r25, 0x10	; 16
 24a:	69 9f       	mul	r22, r25
 24c:	b0 01       	movw	r22, r0
 24e:	11 24       	eor	r1, r1
 250:	68 2b       	or	r22, r24
 252:	68 bb       	out	0x18, r22	; 24
 254:	c1 9a       	sbi	0x18, 1	; 24
 256:	00 00       	nop
 258:	c1 98       	cbi	0x18, 1	; 24
 25a:	83 ef       	ldi	r24, 0xF3	; 243
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <_ZN13Lcd_4_BitMode10LcdCommandEh+0x36>
 262:	00 c0       	rjmp	.+0      	; 0x264 <_ZN13Lcd_4_BitMode10LcdCommandEh+0x3c>
 264:	00 00       	nop
 266:	08 95       	ret

00000268 <_ZN13Lcd_4_BitMode7LcdCharEh>:
 268:	88 b3       	in	r24, 0x18	; 24
 26a:	8f 70       	andi	r24, 0x0F	; 15
 26c:	96 2f       	mov	r25, r22
 26e:	90 7f       	andi	r25, 0xF0	; 240
 270:	89 2b       	or	r24, r25
 272:	88 bb       	out	0x18, r24	; 24
 274:	c0 9a       	sbi	0x18, 0	; 24
 276:	c1 9a       	sbi	0x18, 1	; 24
 278:	00 00       	nop
 27a:	c1 98       	cbi	0x18, 1	; 24
 27c:	82 e4       	ldi	r24, 0x42	; 66
 27e:	8a 95       	dec	r24
 280:	f1 f7       	brne	.-4      	; 0x27e <_ZN13Lcd_4_BitMode7LcdCharEh+0x16>
 282:	00 c0       	rjmp	.+0      	; 0x284 <_ZN13Lcd_4_BitMode7LcdCharEh+0x1c>
 284:	88 b3       	in	r24, 0x18	; 24
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	90 e1       	ldi	r25, 0x10	; 16
 28a:	69 9f       	mul	r22, r25
 28c:	b0 01       	movw	r22, r0
 28e:	11 24       	eor	r1, r1
 290:	68 2b       	or	r22, r24
 292:	68 bb       	out	0x18, r22	; 24
 294:	c1 9a       	sbi	0x18, 1	; 24
 296:	00 00       	nop
 298:	c1 98       	cbi	0x18, 1	; 24
 29a:	83 ef       	ldi	r24, 0xF3	; 243
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <_ZN13Lcd_4_BitMode7LcdCharEh+0x36>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <_ZN13Lcd_4_BitMode7LcdCharEh+0x3c>
 2a4:	00 00       	nop
 2a6:	08 95       	ret

000002a8 <_ZN13Lcd_4_BitMode7LcdInitEv>:
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ec 01       	movw	r28, r24
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	87 bb       	out	0x17, r24	; 23
 2b2:	87 e8       	ldi	r24, 0x87	; 135
 2b4:	93 e1       	ldi	r25, 0x13	; 19
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <_ZN13Lcd_4_BitMode7LcdInitEv+0xe>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <_ZN13Lcd_4_BitMode7LcdInitEv+0x14>
 2bc:	00 00       	nop
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	ce 01       	movw	r24, r28
 2c2:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 2c6:	68 e2       	ldi	r22, 0x28	; 40
 2c8:	ce 01       	movw	r24, r28
 2ca:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 2ce:	6c e0       	ldi	r22, 0x0C	; 12
 2d0:	ce 01       	movw	r24, r28
 2d2:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 2d6:	66 e0       	ldi	r22, 0x06	; 6
 2d8:	ce 01       	movw	r24, r28
 2da:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	ce 01       	movw	r24, r28
 2e2:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 2e6:	83 ef       	ldi	r24, 0xF3	; 243
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <_ZN13Lcd_4_BitMode7LcdInitEv+0x42>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <_ZN13Lcd_4_BitMode7LcdInitEv+0x48>
 2f0:	00 00       	nop
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <_ZN13Lcd_4_BitMode9LcdStringEPc>:
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	eb 01       	movw	r28, r22
 306:	68 81       	ld	r22, Y
 308:	66 23       	and	r22, r22
 30a:	69 f0       	breq	.+26     	; 0x326 <_ZN13Lcd_4_BitMode9LcdStringEPc+0x2e>
 30c:	7c 01       	movw	r14, r24
 30e:	21 96       	adiw	r28, 0x01	; 1
 310:	00 e0       	ldi	r16, 0x00	; 0
 312:	10 e0       	ldi	r17, 0x00	; 0
 314:	c7 01       	movw	r24, r14
 316:	0e 94 34 01 	call	0x268	; 0x268 <_ZN13Lcd_4_BitMode7LcdCharEh>
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	69 91       	ld	r22, Y+
 320:	61 11       	cpse	r22, r1
 322:	f8 cf       	rjmp	.-16     	; 0x314 <_ZN13Lcd_4_BitMode9LcdStringEPc+0x1c>
 324:	02 c0       	rjmp	.+4      	; 0x32a <_ZN13Lcd_4_BitMode9LcdStringEPc+0x32>
 326:	00 e0       	ldi	r16, 0x00	; 0
 328:	10 e0       	ldi	r17, 0x00	; 0
 32a:	80 2f       	mov	r24, r16
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	08 95       	ret

0000033a <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords>:
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
 346:	a1 97       	sbiw	r28, 0x21	; 33
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	f8 94       	cli
 34c:	de bf       	out	0x3e, r29	; 62
 34e:	0f be       	out	0x3f, r0	; 63
 350:	cd bf       	out	0x3d, r28	; 61
 352:	8c 01       	movw	r16, r24
 354:	cb 01       	movw	r24, r22
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	31 f0       	breq	.+12     	; 0x366 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x2c>
 35a:	98 f0       	brcs	.+38     	; 0x382 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x48>
 35c:	42 30       	cpi	r20, 0x02	; 2
 35e:	51 f0       	breq	.+20     	; 0x374 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x3a>
 360:	43 30       	cpi	r20, 0x03	; 3
 362:	b1 f0       	breq	.+44     	; 0x390 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x56>
 364:	20 c0       	rjmp	.+64     	; 0x3a6 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x6c>
 366:	42 e0       	ldi	r20, 0x02	; 2
 368:	be 01       	movw	r22, r28
 36a:	6f 5f       	subi	r22, 0xFF	; 255
 36c:	7f 4f       	sbci	r23, 0xFF	; 255
 36e:	0e 94 32 02 	call	0x464	; 0x464 <__itoa_ncheck>
 372:	19 c0       	rjmp	.+50     	; 0x3a6 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x6c>
 374:	48 e0       	ldi	r20, 0x08	; 8
 376:	be 01       	movw	r22, r28
 378:	6f 5f       	subi	r22, 0xFF	; 255
 37a:	7f 4f       	sbci	r23, 0xFF	; 255
 37c:	0e 94 32 02 	call	0x464	; 0x464 <__itoa_ncheck>
 380:	12 c0       	rjmp	.+36     	; 0x3a6 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x6c>
 382:	4a e0       	ldi	r20, 0x0A	; 10
 384:	be 01       	movw	r22, r28
 386:	6f 5f       	subi	r22, 0xFF	; 255
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	0e 94 32 02 	call	0x464	; 0x464 <__itoa_ncheck>
 38e:	0b c0       	rjmp	.+22     	; 0x3a6 <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords+0x6c>
 390:	40 e1       	ldi	r20, 0x10	; 16
 392:	be 01       	movw	r22, r28
 394:	6f 5f       	subi	r22, 0xFF	; 255
 396:	7f 4f       	sbci	r23, 0xFF	; 255
 398:	0e 94 32 02 	call	0x464	; 0x464 <__itoa_ncheck>
 39c:	60 e6       	ldi	r22, 0x60	; 96
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	c8 01       	movw	r24, r16
 3a2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN13Lcd_4_BitMode9LcdStringEPc>
 3a6:	be 01       	movw	r22, r28
 3a8:	6f 5f       	subi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	c8 01       	movw	r24, r16
 3ae:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN13Lcd_4_BitMode9LcdStringEPc>
 3b2:	a1 96       	adiw	r28, 0x21	; 33
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	08 95       	ret

000003c8 <_ZN13Lcd_4_BitMode7LcdGoXyEhh>:

void Lcd_4_BitMode::LcdGoXy (unsigned char row,unsigned char pos)
{
	if (row == 0 && pos<16)
 3c8:	61 11       	cpse	r22, r1
 3ca:	08 c0       	rjmp	.+16     	; 0x3dc <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x14>
 3cc:	40 31       	cpi	r20, 0x10	; 16
 3ce:	78 f4       	brcc	.+30     	; 0x3ee <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
	LcdCommand((pos & 0x0F)|0x80);																			/* Command of first row and required position<16 */
 3d0:	4f 70       	andi	r20, 0x0F	; 15
 3d2:	64 2f       	mov	r22, r20
 3d4:	60 68       	ori	r22, 0x80	; 128
 3d6:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 3da:	08 95       	ret
	else if (row == 1 && pos<16)
 3dc:	61 30       	cpi	r22, 0x01	; 1
 3de:	39 f4       	brne	.+14     	; 0x3ee <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
 3e0:	40 31       	cpi	r20, 0x10	; 16
 3e2:	28 f4       	brcc	.+10     	; 0x3ee <_ZN13Lcd_4_BitMode7LcdGoXyEhh+0x26>
	LcdCommand((pos & 0x0F)|0xC0);																			/* Command of first row and required position<16 */
 3e4:	4f 70       	andi	r20, 0x0F	; 15
 3e6:	64 2f       	mov	r22, r20
 3e8:	60 6c       	ori	r22, 0xC0	; 192
 3ea:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13Lcd_4_BitMode10LcdCommandEh>
 3ee:	08 95       	ret

000003f0 <main>:
int main(void)
{
	
	uint16_t value;
	
	lcd.LcdInit();
 3f0:	84 e7       	ldi	r24, 0x74	; 116
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_ZN13Lcd_4_BitMode7LcdInitEv>
	adc.AdcInit(DevidedBy64, Internal);
 3f8:	42 e0       	ldi	r20, 0x02	; 2
 3fa:	65 e0       	ldi	r22, 0x05	; 5
 3fc:	83 e7       	ldi	r24, 0x73	; 115
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 50 00 	call	0xa0	; 0xa0 <_ZN3Adc7AdcInitE17FrequencyDivision16VoltageReferance>
	lcd.LcdString("Temperature:");
 404:	63 e6       	ldi	r22, 0x63	; 99
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	84 e7       	ldi	r24, 0x74	; 116
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN13Lcd_4_BitMode9LcdStringEPc>
	
    while (1) 
    {
		lcd.LcdCommand(MoveCursorRighttByOneCharacter);
 410:	64 e1       	ldi	r22, 0x14	; 20
 412:	84 e7       	ldi	r24, 0x74	; 116
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 14 01 	call	0x228	; 0x228 <_ZN13Lcd_4_BitMode10LcdCommandEh>
		value = adc.AdcRead('A' , 2)/4;
 41a:	42 e0       	ldi	r20, 0x02	; 2
 41c:	50 e0       	ldi	r21, 0x00	; 0
 41e:	61 e4       	ldi	r22, 0x41	; 65
 420:	83 e7       	ldi	r24, 0x73	; 115
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 7e 00 	call	0xfc	; 0xfc <_ZN3Adc7AdcReadEhj>
 428:	ec 01       	movw	r28, r24
		lcd.LcdGoXy(0 , strlen("Temperature:") + 1);
 42a:	4d e0       	ldi	r20, 0x0D	; 13
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	84 e7       	ldi	r24, 0x74	; 116
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <_ZN13Lcd_4_BitMode7LcdGoXyEhh>
		lcd.LcdNum(value, decimal);
 436:	be 01       	movw	r22, r28
 438:	76 95       	lsr	r23
 43a:	67 95       	ror	r22
 43c:	76 95       	lsr	r23
 43e:	67 95       	ror	r22
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	84 e7       	ldi	r24, 0x74	; 116
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 9d 01 	call	0x33a	; 0x33a <_ZN13Lcd_4_BitMode6LcdNumEj9BaseWords>
		lcd.LcdString(" ");
 44a:	60 e7       	ldi	r22, 0x70	; 112
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	84 e7       	ldi	r24, 0x74	; 116
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN13Lcd_4_BitMode9LcdStringEPc>
 456:	dc cf       	rjmp	.-72     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

00000458 <__tablejump2__>:
 458:	ee 0f       	add	r30, r30
 45a:	ff 1f       	adc	r31, r31
 45c:	05 90       	lpm	r0, Z+
 45e:	f4 91       	lpm	r31, Z
 460:	e0 2d       	mov	r30, r0
 462:	09 94       	ijmp

00000464 <__itoa_ncheck>:
 464:	bb 27       	eor	r27, r27
 466:	4a 30       	cpi	r20, 0x0A	; 10
 468:	31 f4       	brne	.+12     	; 0x476 <__itoa_ncheck+0x12>
 46a:	99 23       	and	r25, r25
 46c:	22 f4       	brpl	.+8      	; 0x476 <__itoa_ncheck+0x12>
 46e:	bd e2       	ldi	r27, 0x2D	; 45
 470:	90 95       	com	r25
 472:	81 95       	neg	r24
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__utoa_common>

0000047a <__utoa_ncheck>:
 47a:	bb 27       	eor	r27, r27

0000047c <__utoa_common>:
 47c:	fb 01       	movw	r30, r22
 47e:	55 27       	eor	r21, r21
 480:	aa 27       	eor	r26, r26
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	aa 1f       	adc	r26, r26
 488:	a4 17       	cp	r26, r20
 48a:	10 f0       	brcs	.+4      	; 0x490 <__utoa_common+0x14>
 48c:	a4 1b       	sub	r26, r20
 48e:	83 95       	inc	r24
 490:	50 51       	subi	r21, 0x10	; 16
 492:	b9 f7       	brne	.-18     	; 0x482 <__utoa_common+0x6>
 494:	a0 5d       	subi	r26, 0xD0	; 208
 496:	aa 33       	cpi	r26, 0x3A	; 58
 498:	08 f0       	brcs	.+2      	; 0x49c <__utoa_common+0x20>
 49a:	a9 5d       	subi	r26, 0xD9	; 217
 49c:	a1 93       	st	Z+, r26
 49e:	00 97       	sbiw	r24, 0x00	; 0
 4a0:	79 f7       	brne	.-34     	; 0x480 <__utoa_common+0x4>
 4a2:	b1 11       	cpse	r27, r1
 4a4:	b1 93       	st	Z+, r27
 4a6:	11 92       	st	Z+, r1
 4a8:	cb 01       	movw	r24, r22
 4aa:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <strrev>

000004ae <strrev>:
 4ae:	dc 01       	movw	r26, r24
 4b0:	fc 01       	movw	r30, r24
 4b2:	67 2f       	mov	r22, r23
 4b4:	71 91       	ld	r23, Z+
 4b6:	77 23       	and	r23, r23
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <strrev+0x4>
 4ba:	32 97       	sbiw	r30, 0x02	; 2
 4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <strrev+0x18>
 4be:	7c 91       	ld	r23, X
 4c0:	6d 93       	st	X+, r22
 4c2:	70 83       	st	Z, r23
 4c4:	62 91       	ld	r22, -Z
 4c6:	ae 17       	cp	r26, r30
 4c8:	bf 07       	cpc	r27, r31
 4ca:	c8 f3       	brcs	.-14     	; 0x4be <strrev+0x10>
 4cc:	08 95       	ret

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
