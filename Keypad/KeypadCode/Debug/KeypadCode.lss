
KeypadCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a88  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000afc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000afc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000334f  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5e  00000000  00000000  00003fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001347  00000000  00000000  00004c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00005f94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092d  00000000  00000000  00006310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a0c  00000000  00000000  00006c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00009649  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	5f 01       	movw	r10, r30
  56:	19 01       	movw	r2, r18
  58:	23 01       	movw	r4, r6
  5a:	2d 01       	movw	r4, r26
  5c:	37 01       	movw	r6, r14
  5e:	41 01       	movw	r8, r2
  60:	4b 01       	movw	r8, r22
  62:	55 01       	movw	r10, r10

00000064 <__ctors_start>:
  64:	ff 04       	cpc	r15, r15

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_clear_bss>:
  72:	20 e0       	ldi	r18, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a8 36       	cpi	r26, 0x68	; 104
  7e:	b2 07       	cpc	r27, r18
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>

00000082 <__do_global_ctors>:
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	c3 e3       	ldi	r28, 0x33	; 51
  86:	d0 e0       	ldi	r29, 0x00	; 0
  88:	04 c0       	rjmp	.+8      	; 0x92 <__do_global_ctors+0x10>
  8a:	21 97       	sbiw	r28, 0x01	; 1
  8c:	fe 01       	movw	r30, r28
  8e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__tablejump2__>
  92:	c2 33       	cpi	r28, 0x32	; 50
  94:	d1 07       	cpc	r29, r17
  96:	c9 f7       	brne	.-14     	; 0x8a <__do_global_ctors+0x8>
  98:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <main>
  9c:	0c 94 42 05 	jmp	0xa84	; 0xa84 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <_ZN6Button6KeypadEhhjjh>:
			break;
	}
}

unsigned int Button::Keypad(unsigned char rowPort , unsigned char columnPin , unsigned int row , unsigned int column , unsigned char operandPort)
{
  a4:	af 92       	push	r10
  a6:	bf 92       	push	r11
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	6c 01       	movw	r12, r24
  ba:	f6 2e       	mov	r15, r22
  bc:	64 2f       	mov	r22, r20
  be:	59 01       	movw	r10, r18
  c0:	e8 01       	movw	r28, r16
	
	keyRegisters.DdrRegisters(columnPin , 0 , (column - 1) , 0);
  c2:	98 01       	movw	r18, r16
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	31 09       	sbc	r19, r1
  c8:	00 e0       	ldi	r16, 0x00	; 0
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	80 e6       	ldi	r24, 0x60	; 96
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9Registers12DdrRegistersEhjjj>
	keyRegisters.DdrRegisters(rowPort , column , (row + column) , 1);
  d8:	9e 01       	movw	r18, r28
  da:	2a 0d       	add	r18, r10
  dc:	3b 1d       	adc	r19, r11
  de:	01 e0       	ldi	r16, 0x01	; 1
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	ae 01       	movw	r20, r28
  e4:	6f 2d       	mov	r22, r15
  e6:	80 e6       	ldi	r24, 0x60	; 96
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 de 01 	call	0x3bc	; 0x3bc <_ZN9Registers12DdrRegistersEhjjj>
	keyRegisters.DdrRegisters(operandPort , 1);
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	6e 2d       	mov	r22, r14
  f4:	80 e6       	ldi	r24, 0x60	; 96
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 c9 02 	call	0x592	; 0x592 <_ZN9Registers12DdrRegistersEhj>
	
	//----ROW1----
	keyRegisters.PortRegisters(rowPort , 3 , 0);
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	43 e0       	ldi	r20, 0x03	; 3
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	6f 2d       	mov	r22, r15
 106:	80 e6       	ldi	r24, 0x60	; 96
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	8f e9       	ldi	r24, 0x9F	; 159
 110:	9f e0       	ldi	r25, 0x0F	; 15
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <_ZN6Button6KeypadEhhjjh+0x6e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <_ZN6Button6KeypadEhhjjh+0x74>
 118:	00 00       	nop
	_delay_ms(2);
	for (unsigned int pinCounter = 0 ; pinCounter < column ; pinCounter ++)
 11a:	20 97       	sbiw	r28, 0x00	; 0
 11c:	09 f4       	brne	.+2      	; 0x120 <_ZN6Button6KeypadEhhjjh+0x7c>
 11e:	f7 c0       	rjmp	.+494    	; 0x30e <_ZN6Button6KeypadEhhjjh+0x26a>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (!(PIND & (1 << pinCounter)))
 124:	80 b3       	in	r24, 0x10	; 16
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <_ZN6Button6KeypadEhhjjh+0x8c>
 12c:	95 95       	asr	r25
 12e:	87 95       	ror	r24
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <_ZN6Button6KeypadEhhjjh+0x88>
 134:	80 fd       	sbrc	r24, 0
 136:	07 c0       	rjmp	.+14     	; 0x146 <_ZN6Button6KeypadEhhjjh+0xa2>
		{
			key = pinCounter + 1;
 138:	c9 01       	movw	r24, r18
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	d6 01       	movw	r26, r12
 13e:	15 96       	adiw	r26, 0x05	; 5
 140:	9c 93       	st	X, r25
 142:	8e 93       	st	-X, r24
 144:	14 97       	sbiw	r26, 0x04	; 4
	keyRegisters.DdrRegisters(operandPort , 1);
	
	//----ROW1----
	keyRegisters.PortRegisters(rowPort , 3 , 0);
	_delay_ms(2);
	for (unsigned int pinCounter = 0 ; pinCounter < column ; pinCounter ++)
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	c2 17       	cp	r28, r18
 14c:	d3 07       	cpc	r29, r19
 14e:	51 f7       	brne	.-44     	; 0x124 <_ZN6Button6KeypadEhhjjh+0x80>
 150:	c3 c0       	rjmp	.+390    	; 0x2d8 <_ZN6Button6KeypadEhhjjh+0x234>
	//----ROW2----
	keyRegisters.PortRegisters(rowPort , 4 , 0);
	_delay_ms(2);
	for (unsigned int pinCounter = 0 ; pinCounter < column ; pinCounter ++)
	{
		if (!(PIND & (1 << pinCounter)))
 152:	80 b3       	in	r24, 0x10	; 16
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <_ZN6Button6KeypadEhhjjh+0xba>
 15a:	95 95       	asr	r25
 15c:	87 95       	ror	r24
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <_ZN6Button6KeypadEhhjjh+0xb6>
 162:	80 fd       	sbrc	r24, 0
 164:	05 c0       	rjmp	.+10     	; 0x170 <_ZN6Button6KeypadEhhjjh+0xcc>
		{
			key = pinCounter + 4;
 166:	c9 01       	movw	r24, r18
 168:	04 96       	adiw	r24, 0x04	; 4
 16a:	f6 01       	movw	r30, r12
 16c:	95 83       	std	Z+5, r25	; 0x05
 16e:	84 83       	std	Z+4, r24	; 0x04
	keyRegisters.PortRegisters(rowPort , 3 , 1);
	
	//----ROW2----
	keyRegisters.PortRegisters(rowPort , 4 , 0);
	_delay_ms(2);
	for (unsigned int pinCounter = 0 ; pinCounter < column ; pinCounter ++)
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	c2 17       	cp	r28, r18
 176:	d3 07       	cpc	r29, r19
 178:	61 f7       	brne	.-40     	; 0x152 <_ZN6Button6KeypadEhhjjh+0xae>
 17a:	fa c0       	rjmp	.+500    	; 0x370 <_ZN6Button6KeypadEhhjjh+0x2cc>
	//----ROW3----
	keyRegisters.PortRegisters(rowPort , 5 , 0);
	_delay_ms(2);
	for (unsigned int pinCounter = 0 ; pinCounter < column ; pinCounter ++)
	{
		if (!(PIND & (1 << pinCounter)))
 17c:	80 b3       	in	r24, 0x10	; 16
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 2e       	mov	r0, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <_ZN6Button6KeypadEhhjjh+0xe4>
 184:	95 95       	asr	r25
 186:	87 95       	ror	r24
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <_ZN6Button6KeypadEhhjjh+0xe0>
 18c:	80 fd       	sbrc	r24, 0
 18e:	07 c0       	rjmp	.+14     	; 0x19e <_ZN6Button6KeypadEhhjjh+0xfa>
		{
			key = pinCounter + 7;
 190:	c9 01       	movw	r24, r18
 192:	07 96       	adiw	r24, 0x07	; 7
 194:	d6 01       	movw	r26, r12
 196:	15 96       	adiw	r26, 0x05	; 5
 198:	9c 93       	st	X, r25
 19a:	8e 93       	st	-X, r24
 19c:	14 97       	sbiw	r26, 0x04	; 4
	keyRegisters.PortRegisters(rowPort , 4 , 1);
	
	//----ROW3----
	keyRegisters.PortRegisters(rowPort , 5 , 0);
	_delay_ms(2);
	for (unsigned int pinCounter = 0 ; pinCounter < column ; pinCounter ++)
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	2c 17       	cp	r18, r28
 1a4:	3d 07       	cpc	r19, r29
 1a6:	50 f3       	brcs	.-44     	; 0x17c <_ZN6Button6KeypadEhhjjh+0xd8>
		if (!(PIND & (1 << pinCounter)))
		{
			key = pinCounter + 7;
		}
	}
	keyRegisters.PortRegisters(rowPort , 5 , 1);
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	45 e0       	ldi	r20, 0x05	; 5
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	6f 2d       	mov	r22, r15
 1b2:	80 e6       	ldi	r24, 0x60	; 96
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
	
	//----ROW4----
	keyRegisters.PortRegisters(rowPort , 6 , 0);
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	46 e0       	ldi	r20, 0x06	; 6
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	6f 2d       	mov	r22, r15
 1c4:	80 e6       	ldi	r24, 0x60	; 96
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
 1cc:	ef e9       	ldi	r30, 0x9F	; 159
 1ce:	ff e0       	ldi	r31, 0x0F	; 15
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_ZN6Button6KeypadEhhjjh+0x12c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_ZN6Button6KeypadEhhjjh+0x132>
 1d6:	00 00       	nop
	_delay_ms(2);
	if (!(PIND & (1 << 0))) key = 10;
 1d8:	80 99       	sbic	0x10, 0	; 16
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <_ZN6Button6KeypadEhhjjh+0x146>
 1dc:	8a e0       	ldi	r24, 0x0A	; 10
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	d6 01       	movw	r26, r12
 1e2:	15 96       	adiw	r26, 0x05	; 5
 1e4:	9c 93       	st	X, r25
 1e6:	8e 93       	st	-X, r24
 1e8:	14 97       	sbiw	r26, 0x04	; 4
	if (!(PIND & (1 << 1))) key = 0;
 1ea:	81 99       	sbic	0x10, 1	; 16
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <_ZN6Button6KeypadEhhjjh+0x150>
 1ee:	f6 01       	movw	r30, r12
 1f0:	15 82       	std	Z+5, r1	; 0x05
 1f2:	14 82       	std	Z+4, r1	; 0x04
	if (!(PIND & (1 << 2))) key = 11;
 1f4:	82 99       	sbic	0x10, 2	; 16
 1f6:	07 c0       	rjmp	.+14     	; 0x206 <_ZN6Button6KeypadEhhjjh+0x162>
 1f8:	8b e0       	ldi	r24, 0x0B	; 11
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	d6 01       	movw	r26, r12
 1fe:	15 96       	adiw	r26, 0x05	; 5
 200:	9c 93       	st	X, r25
 202:	8e 93       	st	-X, r24
 204:	14 97       	sbiw	r26, 0x04	; 4
	keyRegisters.PortRegisters(rowPort , 6 , 1);
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	46 e0       	ldi	r20, 0x06	; 6
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	6f 2d       	mov	r22, r15
 210:	80 e6       	ldi	r24, 0x60	; 96
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
	
	switch (key)
 218:	d6 01       	movw	r26, r12
 21a:	14 96       	adiw	r26, 0x04	; 4
 21c:	ed 91       	ld	r30, X+
 21e:	fc 91       	ld	r31, X
 220:	15 97       	sbiw	r26, 0x05	; 5
 222:	e8 30       	cpi	r30, 0x08	; 8
 224:	f1 05       	cpc	r31, r1
 226:	08 f0       	brcs	.+2      	; 0x22a <_ZN6Button6KeypadEhhjjh+0x186>
 228:	53 c0       	rjmp	.+166    	; 0x2d0 <_ZN6Button6KeypadEhhjjh+0x22c>
 22a:	e6 5d       	subi	r30, 0xD6	; 214
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__tablejump2__>
	{
		case (1) :
		keyRegisters.PortRegisters('A' , key , 1);
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	61 e4       	ldi	r22, 0x41	; 65
 23c:	80 e6       	ldi	r24, 0x60	; 96
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
		break;
 244:	45 c0       	rjmp	.+138    	; 0x2d0 <_ZN6Button6KeypadEhhjjh+0x22c>
		case (2) :
		keyRegisters.PortRegisters('A' , key , 1);
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	42 e0       	ldi	r20, 0x02	; 2
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	61 e4       	ldi	r22, 0x41	; 65
 250:	80 e6       	ldi	r24, 0x60	; 96
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
		break;		
 258:	3b c0       	rjmp	.+118    	; 0x2d0 <_ZN6Button6KeypadEhhjjh+0x22c>
		case (3) :
		keyRegisters.PortRegisters('A' , key , 1);
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	43 e0       	ldi	r20, 0x03	; 3
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	61 e4       	ldi	r22, 0x41	; 65
 264:	80 e6       	ldi	r24, 0x60	; 96
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
		break;
 26c:	31 c0       	rjmp	.+98     	; 0x2d0 <_ZN6Button6KeypadEhhjjh+0x22c>
		case (4) :
		keyRegisters.PortRegisters('A' , key , 1);
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	44 e0       	ldi	r20, 0x04	; 4
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	61 e4       	ldi	r22, 0x41	; 65
 278:	80 e6       	ldi	r24, 0x60	; 96
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
		break;
 280:	27 c0       	rjmp	.+78     	; 0x2d0 <_ZN6Button6KeypadEhhjjh+0x22c>
		case (5) :
		keyRegisters.PortRegisters('A' , key , 1);
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	45 e0       	ldi	r20, 0x05	; 5
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	61 e4       	ldi	r22, 0x41	; 65
 28c:	80 e6       	ldi	r24, 0x60	; 96
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
		break;
 294:	1d c0       	rjmp	.+58     	; 0x2d0 <_ZN6Button6KeypadEhhjjh+0x22c>
		case (6) :
		keyRegisters.PortRegisters('A' , key , 1);
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	46 e0       	ldi	r20, 0x06	; 6
 29c:	50 e0       	ldi	r21, 0x00	; 0
 29e:	61 e4       	ldi	r22, 0x41	; 65
 2a0:	80 e6       	ldi	r24, 0x60	; 96
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
		break;
 2a8:	13 c0       	rjmp	.+38     	; 0x2d0 <_ZN6Button6KeypadEhhjjh+0x22c>
		case (7) :
		keyRegisters.PortRegisters('A' , key , 1);
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	47 e0       	ldi	r20, 0x07	; 7
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	61 e4       	ldi	r22, 0x41	; 65
 2b4:	80 e6       	ldi	r24, 0x60	; 96
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
		break;
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <_ZN6Button6KeypadEhhjjh+0x22c>
		case (0) :
		keyRegisters.PortRegisters('A' , key , 1);
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	61 e4       	ldi	r22, 0x41	; 65
 2c8:	80 e6       	ldi	r24, 0x60	; 96
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
		break;
	}
	return key;
 2d0:	f6 01       	movw	r30, r12
 2d2:	84 81       	ldd	r24, Z+4	; 0x04
 2d4:	95 81       	ldd	r25, Z+5	; 0x05
 2d6:	67 c0       	rjmp	.+206    	; 0x3a6 <_ZN6Button6KeypadEhhjjh+0x302>
		if (!(PIND & (1 << pinCounter)))
		{
			key = pinCounter + 1;
		}
	}
	keyRegisters.PortRegisters(rowPort , 3 , 1);
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	43 e0       	ldi	r20, 0x03	; 3
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	6f 2d       	mov	r22, r15
 2e2:	80 e6       	ldi	r24, 0x60	; 96
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
	
	//----ROW2----
	keyRegisters.PortRegisters(rowPort , 4 , 0);
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	44 e0       	ldi	r20, 0x04	; 4
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	6f 2d       	mov	r22, r15
 2f4:	80 e6       	ldi	r24, 0x60	; 96
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
 2fc:	8f e9       	ldi	r24, 0x9F	; 159
 2fe:	9f e0       	ldi	r25, 0x0F	; 15
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <_ZN6Button6KeypadEhhjjh+0x25c>
 304:	00 c0       	rjmp	.+0      	; 0x306 <_ZN6Button6KeypadEhhjjh+0x262>
 306:	00 00       	nop
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	22 cf       	rjmp	.-444    	; 0x152 <_ZN6Button6KeypadEhhjjh+0xae>
		if (!(PIND & (1 << pinCounter)))
		{
			key = pinCounter + 1;
		}
	}
	keyRegisters.PortRegisters(rowPort , 3 , 1);
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	43 e0       	ldi	r20, 0x03	; 3
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	6f 2d       	mov	r22, r15
 318:	80 e6       	ldi	r24, 0x60	; 96
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
	
	//----ROW2----
	keyRegisters.PortRegisters(rowPort , 4 , 0);
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	44 e0       	ldi	r20, 0x04	; 4
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	6f 2d       	mov	r22, r15
 32a:	80 e6       	ldi	r24, 0x60	; 96
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
 332:	af e9       	ldi	r26, 0x9F	; 159
 334:	bf e0       	ldi	r27, 0x0F	; 15
 336:	11 97       	sbiw	r26, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <_ZN6Button6KeypadEhhjjh+0x292>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <_ZN6Button6KeypadEhhjjh+0x298>
 33c:	00 00       	nop
		if (!(PIND & (1 << pinCounter)))
		{
			key = pinCounter + 4;
		}
	}
	keyRegisters.PortRegisters(rowPort , 4 , 1);
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	44 e0       	ldi	r20, 0x04	; 4
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	6f 2d       	mov	r22, r15
 348:	80 e6       	ldi	r24, 0x60	; 96
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
	
	//----ROW3----
	keyRegisters.PortRegisters(rowPort , 5 , 0);
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	45 e0       	ldi	r20, 0x05	; 5
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	6f 2d       	mov	r22, r15
 35a:	80 e6       	ldi	r24, 0x60	; 96
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
 362:	ef e9       	ldi	r30, 0x9F	; 159
 364:	ff e0       	ldi	r31, 0x0F	; 15
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <_ZN6Button6KeypadEhhjjh+0x2c2>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <_ZN6Button6KeypadEhhjjh+0x2c8>
 36c:	00 00       	nop
 36e:	1c cf       	rjmp	.-456    	; 0x1a8 <_ZN6Button6KeypadEhhjjh+0x104>
		if (!(PIND & (1 << pinCounter)))
		{
			key = pinCounter + 4;
		}
	}
	keyRegisters.PortRegisters(rowPort , 4 , 1);
 370:	21 e0       	ldi	r18, 0x01	; 1
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	44 e0       	ldi	r20, 0x04	; 4
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	6f 2d       	mov	r22, r15
 37a:	80 e6       	ldi	r24, 0x60	; 96
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
	
	//----ROW3----
	keyRegisters.PortRegisters(rowPort , 5 , 0);
 382:	20 e0       	ldi	r18, 0x00	; 0
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	45 e0       	ldi	r20, 0x05	; 5
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	6f 2d       	mov	r22, r15
 38c:	80 e6       	ldi	r24, 0x60	; 96
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 91 03 	call	0x722	; 0x722 <_ZN9Registers13PortRegistersEhjj>
 394:	8f e9       	ldi	r24, 0x9F	; 159
 396:	9f e0       	ldi	r25, 0x0F	; 15
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <_ZN6Button6KeypadEhhjjh+0x2f4>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <_ZN6Button6KeypadEhhjjh+0x2fa>
 39e:	00 00       	nop
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	eb ce       	rjmp	.-554    	; 0x17c <_ZN6Button6KeypadEhhjjh+0xd8>
		case (0) :
		keyRegisters.PortRegisters('A' , key , 1);
		break;
	}
	return key;
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	df 90       	pop	r13
 3b4:	cf 90       	pop	r12
 3b6:	bf 90       	pop	r11
 3b8:	af 90       	pop	r10
 3ba:	08 95       	ret

000003bc <_ZN9Registers12DdrRegistersEhjjj>:
			}
			break;
		}
		break;
	}
}
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	62 34       	cpi	r22, 0x42	; 66
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <_ZN9Registers12DdrRegistersEhjjj+0xa>
 3c4:	42 c0       	rjmp	.+132    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <_ZN9Registers12DdrRegistersEhjjj+0x12>
 3c8:	61 34       	cpi	r22, 0x41	; 65
 3ca:	41 f0       	breq	.+16     	; 0x3dc <_ZN9Registers12DdrRegistersEhjjj+0x20>
 3cc:	df c0       	rjmp	.+446    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 3ce:	63 34       	cpi	r22, 0x43	; 67
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <_ZN9Registers12DdrRegistersEhjjj+0x18>
 3d2:	72 c0       	rjmp	.+228    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 3d4:	64 34       	cpi	r22, 0x44	; 68
 3d6:	09 f4       	brne	.+2      	; 0x3da <_ZN9Registers12DdrRegistersEhjjj+0x1e>
 3d8:	a6 c0       	rjmp	.+332    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 3da:	d8 c0       	rjmp	.+432    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 3dc:	01 15       	cp	r16, r1
 3de:	11 05       	cpc	r17, r1
 3e0:	59 f0       	breq	.+22     	; 0x3f8 <_ZN9Registers12DdrRegistersEhjjj+0x3c>
 3e2:	01 30       	cpi	r16, 0x01	; 1
 3e4:	11 05       	cpc	r17, r1
 3e6:	09 f0       	breq	.+2      	; 0x3ea <_ZN9Registers12DdrRegistersEhjjj+0x2e>
 3e8:	d1 c0       	rjmp	.+418    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 3ea:	24 17       	cp	r18, r20
 3ec:	35 07       	cpc	r19, r21
 3ee:	08 f4       	brcc	.+2      	; 0x3f2 <_ZN9Registers12DdrRegistersEhjjj+0x36>
 3f0:	cd c0       	rjmp	.+410    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 3f2:	e1 e0       	ldi	r30, 0x01	; 1
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	07 c0       	rjmp	.+14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f8:	24 17       	cp	r18, r20
 3fa:	35 07       	cpc	r19, r21
 3fc:	08 f4       	brcc	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	c6 c0       	rjmp	.+396    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 400:	e1 e0       	ldi	r30, 0x01	; 1
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	10 c0       	rjmp	.+32     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 406:	6a b3       	in	r22, 0x1a	; 26
 408:	cf 01       	movw	r24, r30
 40a:	04 2e       	mov	r0, r20
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	86 2b       	or	r24, r22
 418:	8a bb       	out	0x1a, r24	; 26
 41a:	4f 5f       	subi	r20, 0xFF	; 255
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	24 17       	cp	r18, r20
 420:	35 07       	cpc	r19, r21
 422:	88 f7       	brcc	.-30     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 424:	b3 c0       	rjmp	.+358    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 426:	9a b3       	in	r25, 0x1a	; 26
 428:	bf 01       	movw	r22, r30
 42a:	04 2e       	mov	r0, r20
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	86 2f       	mov	r24, r22
 438:	80 95       	com	r24
 43a:	89 23       	and	r24, r25
 43c:	8a bb       	out	0x1a, r24	; 26
 43e:	4f 5f       	subi	r20, 0xFF	; 255
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	24 17       	cp	r18, r20
 444:	35 07       	cpc	r19, r21
 446:	78 f7       	brcc	.-34     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 448:	a1 c0       	rjmp	.+322    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 44a:	01 15       	cp	r16, r1
 44c:	11 05       	cpc	r17, r1
 44e:	59 f0       	breq	.+22     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 450:	01 30       	cpi	r16, 0x01	; 1
 452:	11 05       	cpc	r17, r1
 454:	09 f0       	breq	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	9a c0       	rjmp	.+308    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 458:	24 17       	cp	r18, r20
 45a:	35 07       	cpc	r19, r21
 45c:	08 f4       	brcc	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	96 c0       	rjmp	.+300    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 460:	e1 e0       	ldi	r30, 0x01	; 1
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	07 c0       	rjmp	.+14     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 466:	24 17       	cp	r18, r20
 468:	35 07       	cpc	r19, r21
 46a:	08 f4       	brcc	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46c:	8f c0       	rjmp	.+286    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 46e:	e1 e0       	ldi	r30, 0x01	; 1
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	10 c0       	rjmp	.+32     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 474:	67 b3       	in	r22, 0x17	; 23
 476:	cf 01       	movw	r24, r30
 478:	04 2e       	mov	r0, r20
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	0a 94       	dec	r0
 482:	e2 f7       	brpl	.-8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 484:	86 2b       	or	r24, r22
 486:	87 bb       	out	0x17, r24	; 23
 488:	4f 5f       	subi	r20, 0xFF	; 255
 48a:	5f 4f       	sbci	r21, 0xFF	; 255
 48c:	24 17       	cp	r18, r20
 48e:	35 07       	cpc	r19, r21
 490:	88 f7       	brcc	.-30     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 492:	7c c0       	rjmp	.+248    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 494:	97 b3       	in	r25, 0x17	; 23
 496:	bf 01       	movw	r22, r30
 498:	04 2e       	mov	r0, r20
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 4a4:	86 2f       	mov	r24, r22
 4a6:	80 95       	com	r24
 4a8:	89 23       	and	r24, r25
 4aa:	87 bb       	out	0x17, r24	; 23
 4ac:	4f 5f       	subi	r20, 0xFF	; 255
 4ae:	5f 4f       	sbci	r21, 0xFF	; 255
 4b0:	24 17       	cp	r18, r20
 4b2:	35 07       	cpc	r19, r21
 4b4:	78 f7       	brcc	.-34     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 4b6:	6a c0       	rjmp	.+212    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 4b8:	01 15       	cp	r16, r1
 4ba:	11 05       	cpc	r17, r1
 4bc:	59 f0       	breq	.+22     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4be:	01 30       	cpi	r16, 0x01	; 1
 4c0:	11 05       	cpc	r17, r1
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c4:	63 c0       	rjmp	.+198    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 4c6:	24 17       	cp	r18, r20
 4c8:	35 07       	cpc	r19, r21
 4ca:	08 f4       	brcc	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4cc:	5f c0       	rjmp	.+190    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 4ce:	e1 e0       	ldi	r30, 0x01	; 1
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	07 c0       	rjmp	.+14     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4d4:	24 17       	cp	r18, r20
 4d6:	35 07       	cpc	r19, r21
 4d8:	08 f4       	brcc	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4da:	58 c0       	rjmp	.+176    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 4dc:	e1 e0       	ldi	r30, 0x01	; 1
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	10 c0       	rjmp	.+32     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4e2:	64 b3       	in	r22, 0x14	; 20
 4e4:	cf 01       	movw	r24, r30
 4e6:	04 2e       	mov	r0, r20
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4f2:	86 2b       	or	r24, r22
 4f4:	84 bb       	out	0x14, r24	; 20
 4f6:	4f 5f       	subi	r20, 0xFF	; 255
 4f8:	5f 4f       	sbci	r21, 0xFF	; 255
 4fa:	24 17       	cp	r18, r20
 4fc:	35 07       	cpc	r19, r21
 4fe:	88 f7       	brcc	.-30     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 500:	45 c0       	rjmp	.+138    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 502:	94 b3       	in	r25, 0x14	; 20
 504:	bf 01       	movw	r22, r30
 506:	04 2e       	mov	r0, r20
 508:	02 c0       	rjmp	.+4      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	0a 94       	dec	r0
 510:	e2 f7       	brpl	.-8      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 512:	86 2f       	mov	r24, r22
 514:	80 95       	com	r24
 516:	89 23       	and	r24, r25
 518:	84 bb       	out	0x14, r24	; 20
 51a:	4f 5f       	subi	r20, 0xFF	; 255
 51c:	5f 4f       	sbci	r21, 0xFF	; 255
 51e:	24 17       	cp	r18, r20
 520:	35 07       	cpc	r19, r21
 522:	78 f7       	brcc	.-34     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 524:	33 c0       	rjmp	.+102    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 526:	01 15       	cp	r16, r1
 528:	11 05       	cpc	r17, r1
 52a:	49 f0       	breq	.+18     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 52c:	01 30       	cpi	r16, 0x01	; 1
 52e:	11 05       	cpc	r17, r1
 530:	69 f5       	brne	.+90     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 532:	24 17       	cp	r18, r20
 534:	35 07       	cpc	r19, r21
 536:	50 f1       	brcs	.+84     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 538:	e1 e0       	ldi	r30, 0x01	; 1
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	06 c0       	rjmp	.+12     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 53e:	24 17       	cp	r18, r20
 540:	35 07       	cpc	r19, r21
 542:	20 f1       	brcs	.+72     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 544:	e1 e0       	ldi	r30, 0x01	; 1
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	10 c0       	rjmp	.+32     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 54a:	61 b3       	in	r22, 0x11	; 17
 54c:	cf 01       	movw	r24, r30
 54e:	04 2e       	mov	r0, r20
 550:	02 c0       	rjmp	.+4      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	0a 94       	dec	r0
 558:	e2 f7       	brpl	.-8      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 55a:	86 2b       	or	r24, r22
 55c:	81 bb       	out	0x11, r24	; 17
 55e:	4f 5f       	subi	r20, 0xFF	; 255
 560:	5f 4f       	sbci	r21, 0xFF	; 255
 562:	24 17       	cp	r18, r20
 564:	35 07       	cpc	r19, r21
 566:	88 f7       	brcc	.-30     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 568:	11 c0       	rjmp	.+34     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 56a:	91 b3       	in	r25, 0x11	; 17
 56c:	bf 01       	movw	r22, r30
 56e:	04 2e       	mov	r0, r20
 570:	02 c0       	rjmp	.+4      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 572:	66 0f       	add	r22, r22
 574:	77 1f       	adc	r23, r23
 576:	0a 94       	dec	r0
 578:	e2 f7       	brpl	.-8      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 57a:	86 2f       	mov	r24, r22
 57c:	80 95       	com	r24
 57e:	89 23       	and	r24, r25
 580:	81 bb       	out	0x11, r24	; 17
 582:	4f 5f       	subi	r20, 0xFF	; 255
 584:	5f 4f       	sbci	r21, 0xFF	; 255
 586:	24 17       	cp	r18, r20
 588:	35 07       	cpc	r19, r21
 58a:	78 f7       	brcc	.-34     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <_ZN9Registers12DdrRegistersEhj>:
 592:	62 34       	cpi	r22, 0x42	; 66
 594:	d1 f1       	breq	.+116    	; 0x60a <_ZN9Registers12DdrRegistersEhj+0x78>
 596:	18 f4       	brcc	.+6      	; 0x59e <_ZN9Registers12DdrRegistersEhj+0xc>
 598:	61 34       	cpi	r22, 0x41	; 65
 59a:	41 f0       	breq	.+16     	; 0x5ac <_ZN9Registers12DdrRegistersEhj+0x1a>
 59c:	08 95       	ret
 59e:	63 34       	cpi	r22, 0x43	; 67
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <_ZN9Registers12DdrRegistersEhj+0x12>
 5a2:	62 c0       	rjmp	.+196    	; 0x668 <_ZN9Registers12DdrRegistersEhj+0xd6>
 5a4:	64 34       	cpi	r22, 0x44	; 68
 5a6:	09 f4       	brne	.+2      	; 0x5aa <_ZN9Registers12DdrRegistersEhj+0x18>
 5a8:	8e c0       	rjmp	.+284    	; 0x6c6 <_ZN9Registers12DdrRegistersEhj+0x134>
 5aa:	08 95       	ret
 5ac:	41 15       	cp	r20, r1
 5ae:	51 05       	cpc	r21, r1
 5b0:	b9 f0       	breq	.+46     	; 0x5e0 <_ZN9Registers12DdrRegistersEhj+0x4e>
 5b2:	41 30       	cpi	r20, 0x01	; 1
 5b4:	51 05       	cpc	r21, r1
 5b6:	09 f0       	breq	.+2      	; 0x5ba <_ZN9Registers12DdrRegistersEhj+0x28>
 5b8:	b3 c0       	rjmp	.+358    	; 0x720 <_ZN9Registers12DdrRegistersEhj+0x18e>
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	4a b3       	in	r20, 0x1a	; 26
 5c4:	9b 01       	movw	r18, r22
 5c6:	08 2e       	mov	r0, r24
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <_ZN9Registers12DdrRegistersEhj+0x3c>
 5ca:	22 0f       	add	r18, r18
 5cc:	33 1f       	adc	r19, r19
 5ce:	0a 94       	dec	r0
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <_ZN9Registers12DdrRegistersEhj+0x38>
 5d2:	24 2b       	or	r18, r20
 5d4:	2a bb       	out	0x1a, r18	; 26
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	88 30       	cpi	r24, 0x08	; 8
 5da:	91 05       	cpc	r25, r1
 5dc:	91 f7       	brne	.-28     	; 0x5c2 <_ZN9Registers12DdrRegistersEhj+0x30>
 5de:	08 95       	ret
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	61 e0       	ldi	r22, 0x01	; 1
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	3a b3       	in	r19, 0x1a	; 26
 5ea:	ab 01       	movw	r20, r22
 5ec:	08 2e       	mov	r0, r24
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <_ZN9Registers12DdrRegistersEhj+0x62>
 5f0:	44 0f       	add	r20, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	0a 94       	dec	r0
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <_ZN9Registers12DdrRegistersEhj+0x5e>
 5f8:	24 2f       	mov	r18, r20
 5fa:	20 95       	com	r18
 5fc:	23 23       	and	r18, r19
 5fe:	2a bb       	out	0x1a, r18	; 26
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	88 30       	cpi	r24, 0x08	; 8
 604:	91 05       	cpc	r25, r1
 606:	81 f7       	brne	.-32     	; 0x5e8 <_ZN9Registers12DdrRegistersEhj+0x56>
 608:	08 95       	ret
 60a:	41 15       	cp	r20, r1
 60c:	51 05       	cpc	r21, r1
 60e:	b9 f0       	breq	.+46     	; 0x63e <_ZN9Registers12DdrRegistersEhj+0xac>
 610:	41 30       	cpi	r20, 0x01	; 1
 612:	51 05       	cpc	r21, r1
 614:	09 f0       	breq	.+2      	; 0x618 <_ZN9Registers12DdrRegistersEhj+0x86>
 616:	84 c0       	rjmp	.+264    	; 0x720 <_ZN9Registers12DdrRegistersEhj+0x18e>
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	47 b3       	in	r20, 0x17	; 23
 622:	9b 01       	movw	r18, r22
 624:	08 2e       	mov	r0, r24
 626:	02 c0       	rjmp	.+4      	; 0x62c <_ZN9Registers12DdrRegistersEhj+0x9a>
 628:	22 0f       	add	r18, r18
 62a:	33 1f       	adc	r19, r19
 62c:	0a 94       	dec	r0
 62e:	e2 f7       	brpl	.-8      	; 0x628 <_ZN9Registers12DdrRegistersEhj+0x96>
 630:	24 2b       	or	r18, r20
 632:	27 bb       	out	0x17, r18	; 23
 634:	01 96       	adiw	r24, 0x01	; 1
 636:	88 30       	cpi	r24, 0x08	; 8
 638:	91 05       	cpc	r25, r1
 63a:	91 f7       	brne	.-28     	; 0x620 <_ZN9Registers12DdrRegistersEhj+0x8e>
 63c:	08 95       	ret
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	37 b3       	in	r19, 0x17	; 23
 648:	ab 01       	movw	r20, r22
 64a:	08 2e       	mov	r0, r24
 64c:	02 c0       	rjmp	.+4      	; 0x652 <_ZN9Registers12DdrRegistersEhj+0xc0>
 64e:	44 0f       	add	r20, r20
 650:	55 1f       	adc	r21, r21
 652:	0a 94       	dec	r0
 654:	e2 f7       	brpl	.-8      	; 0x64e <_ZN9Registers12DdrRegistersEhj+0xbc>
 656:	24 2f       	mov	r18, r20
 658:	20 95       	com	r18
 65a:	23 23       	and	r18, r19
 65c:	27 bb       	out	0x17, r18	; 23
 65e:	01 96       	adiw	r24, 0x01	; 1
 660:	88 30       	cpi	r24, 0x08	; 8
 662:	91 05       	cpc	r25, r1
 664:	81 f7       	brne	.-32     	; 0x646 <_ZN9Registers12DdrRegistersEhj+0xb4>
 666:	08 95       	ret
 668:	41 15       	cp	r20, r1
 66a:	51 05       	cpc	r21, r1
 66c:	b9 f0       	breq	.+46     	; 0x69c <_ZN9Registers12DdrRegistersEhj+0x10a>
 66e:	41 30       	cpi	r20, 0x01	; 1
 670:	51 05       	cpc	r21, r1
 672:	09 f0       	breq	.+2      	; 0x676 <_ZN9Registers12DdrRegistersEhj+0xe4>
 674:	55 c0       	rjmp	.+170    	; 0x720 <_ZN9Registers12DdrRegistersEhj+0x18e>
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	61 e0       	ldi	r22, 0x01	; 1
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	44 b3       	in	r20, 0x14	; 20
 680:	9b 01       	movw	r18, r22
 682:	08 2e       	mov	r0, r24
 684:	02 c0       	rjmp	.+4      	; 0x68a <_ZN9Registers12DdrRegistersEhj+0xf8>
 686:	22 0f       	add	r18, r18
 688:	33 1f       	adc	r19, r19
 68a:	0a 94       	dec	r0
 68c:	e2 f7       	brpl	.-8      	; 0x686 <_ZN9Registers12DdrRegistersEhj+0xf4>
 68e:	24 2b       	or	r18, r20
 690:	24 bb       	out	0x14, r18	; 20
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	88 30       	cpi	r24, 0x08	; 8
 696:	91 05       	cpc	r25, r1
 698:	91 f7       	brne	.-28     	; 0x67e <_ZN9Registers12DdrRegistersEhj+0xec>
 69a:	08 95       	ret
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	61 e0       	ldi	r22, 0x01	; 1
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	34 b3       	in	r19, 0x14	; 20
 6a6:	ab 01       	movw	r20, r22
 6a8:	08 2e       	mov	r0, r24
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <_ZN9Registers12DdrRegistersEhj+0x11e>
 6ac:	44 0f       	add	r20, r20
 6ae:	55 1f       	adc	r21, r21
 6b0:	0a 94       	dec	r0
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <_ZN9Registers12DdrRegistersEhj+0x11a>
 6b4:	24 2f       	mov	r18, r20
 6b6:	20 95       	com	r18
 6b8:	23 23       	and	r18, r19
 6ba:	24 bb       	out	0x14, r18	; 20
 6bc:	01 96       	adiw	r24, 0x01	; 1
 6be:	88 30       	cpi	r24, 0x08	; 8
 6c0:	91 05       	cpc	r25, r1
 6c2:	81 f7       	brne	.-32     	; 0x6a4 <_ZN9Registers12DdrRegistersEhj+0x112>
 6c4:	08 95       	ret
 6c6:	41 15       	cp	r20, r1
 6c8:	51 05       	cpc	r21, r1
 6ca:	b1 f0       	breq	.+44     	; 0x6f8 <_ZN9Registers12DdrRegistersEhj+0x166>
 6cc:	41 30       	cpi	r20, 0x01	; 1
 6ce:	51 05       	cpc	r21, r1
 6d0:	39 f5       	brne	.+78     	; 0x720 <_ZN9Registers12DdrRegistersEhj+0x18e>
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	61 e0       	ldi	r22, 0x01	; 1
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	41 b3       	in	r20, 0x11	; 17
 6dc:	9b 01       	movw	r18, r22
 6de:	08 2e       	mov	r0, r24
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <_ZN9Registers12DdrRegistersEhj+0x154>
 6e2:	22 0f       	add	r18, r18
 6e4:	33 1f       	adc	r19, r19
 6e6:	0a 94       	dec	r0
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <_ZN9Registers12DdrRegistersEhj+0x150>
 6ea:	24 2b       	or	r18, r20
 6ec:	21 bb       	out	0x11, r18	; 17
 6ee:	01 96       	adiw	r24, 0x01	; 1
 6f0:	88 30       	cpi	r24, 0x08	; 8
 6f2:	91 05       	cpc	r25, r1
 6f4:	91 f7       	brne	.-28     	; 0x6da <_ZN9Registers12DdrRegistersEhj+0x148>
 6f6:	08 95       	ret
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	31 b3       	in	r19, 0x11	; 17
 702:	ab 01       	movw	r20, r22
 704:	08 2e       	mov	r0, r24
 706:	02 c0       	rjmp	.+4      	; 0x70c <_ZN9Registers12DdrRegistersEhj+0x17a>
 708:	44 0f       	add	r20, r20
 70a:	55 1f       	adc	r21, r21
 70c:	0a 94       	dec	r0
 70e:	e2 f7       	brpl	.-8      	; 0x708 <_ZN9Registers12DdrRegistersEhj+0x176>
 710:	24 2f       	mov	r18, r20
 712:	20 95       	com	r18
 714:	23 23       	and	r18, r19
 716:	21 bb       	out	0x11, r18	; 17
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	88 30       	cpi	r24, 0x08	; 8
 71c:	91 05       	cpc	r25, r1
 71e:	81 f7       	brne	.-32     	; 0x700 <_ZN9Registers12DdrRegistersEhj+0x16e>
 720:	08 95       	ret

00000722 <_ZN9Registers13PortRegistersEhjj>:

void Registers::PortRegisters(unsigned char rName , unsigned int rNum , unsigned int rSituation)
{
	switch (rName)
 722:	62 34       	cpi	r22, 0x42	; 66
 724:	49 f1       	breq	.+82     	; 0x778 <_ZN9Registers13PortRegistersEhjj+0x56>
 726:	18 f4       	brcc	.+6      	; 0x72e <_ZN9Registers13PortRegistersEhjj+0xc>
 728:	61 34       	cpi	r22, 0x41	; 65
 72a:	41 f0       	breq	.+16     	; 0x73c <_ZN9Registers13PortRegistersEhjj+0x1a>
 72c:	08 95       	ret
 72e:	63 34       	cpi	r22, 0x43	; 67
 730:	09 f4       	brne	.+2      	; 0x734 <_ZN9Registers13PortRegistersEhjj+0x12>
 732:	40 c0       	rjmp	.+128    	; 0x7b4 <_ZN9Registers13PortRegistersEhjj+0x92>
 734:	64 34       	cpi	r22, 0x44	; 68
 736:	09 f4       	brne	.+2      	; 0x73a <_ZN9Registers13PortRegistersEhjj+0x18>
 738:	5a c0       	rjmp	.+180    	; 0x7ee <_ZN9Registers13PortRegistersEhjj+0xcc>
 73a:	08 95       	ret
	{
		case 'A' :
			switch (rSituation)
 73c:	21 15       	cp	r18, r1
 73e:	31 05       	cpc	r19, r1
 740:	79 f0       	breq	.+30     	; 0x760 <_ZN9Registers13PortRegistersEhjj+0x3e>
 742:	21 30       	cpi	r18, 0x01	; 1
 744:	31 05       	cpc	r19, r1
 746:	09 f0       	breq	.+2      	; 0x74a <_ZN9Registers13PortRegistersEhjj+0x28>
 748:	6e c0       	rjmp	.+220    	; 0x826 <_ZN9Registers13PortRegistersEhjj+0x104>
			{
				case 1 :
					PORTA |= (1 << rNum);
 74a:	2b b3       	in	r18, 0x1b	; 27
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 c0       	rjmp	.+4      	; 0x756 <_ZN9Registers13PortRegistersEhjj+0x34>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	4a 95       	dec	r20
 758:	e2 f7       	brpl	.-8      	; 0x752 <_ZN9Registers13PortRegistersEhjj+0x30>
 75a:	82 2b       	or	r24, r18
 75c:	8b bb       	out	0x1b, r24	; 27
					break;
 75e:	08 95       	ret
				case 0 :
					PORTA &= ~(1 << rNum);
 760:	2b b3       	in	r18, 0x1b	; 27
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <_ZN9Registers13PortRegistersEhjj+0x4a>
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	4a 95       	dec	r20
 76e:	e2 f7       	brpl	.-8      	; 0x768 <_ZN9Registers13PortRegistersEhjj+0x46>
 770:	80 95       	com	r24
 772:	82 23       	and	r24, r18
 774:	8b bb       	out	0x1b, r24	; 27
					break;
 776:	08 95       	ret
			}
			break;
			
		case 'B' :
			switch (rSituation)
 778:	21 15       	cp	r18, r1
 77a:	31 05       	cpc	r19, r1
 77c:	79 f0       	breq	.+30     	; 0x79c <_ZN9Registers13PortRegistersEhjj+0x7a>
 77e:	21 30       	cpi	r18, 0x01	; 1
 780:	31 05       	cpc	r19, r1
 782:	09 f0       	breq	.+2      	; 0x786 <_ZN9Registers13PortRegistersEhjj+0x64>
 784:	50 c0       	rjmp	.+160    	; 0x826 <_ZN9Registers13PortRegistersEhjj+0x104>
			{
				case 1 :
					PORTB |= (1 << rNum);
 786:	28 b3       	in	r18, 0x18	; 24
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	02 c0       	rjmp	.+4      	; 0x792 <_ZN9Registers13PortRegistersEhjj+0x70>
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	4a 95       	dec	r20
 794:	e2 f7       	brpl	.-8      	; 0x78e <_ZN9Registers13PortRegistersEhjj+0x6c>
 796:	82 2b       	or	r24, r18
 798:	88 bb       	out	0x18, r24	; 24
					break;
 79a:	08 95       	ret
				case 0 :
					PORTB &= ~(1 << rNum);
 79c:	28 b3       	in	r18, 0x18	; 24
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <_ZN9Registers13PortRegistersEhjj+0x86>
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	4a 95       	dec	r20
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <_ZN9Registers13PortRegistersEhjj+0x82>
 7ac:	80 95       	com	r24
 7ae:	82 23       	and	r24, r18
 7b0:	88 bb       	out	0x18, r24	; 24
					break;
 7b2:	08 95       	ret
			}
			break;
			
		case 'C' :
			switch (rSituation)
 7b4:	21 15       	cp	r18, r1
 7b6:	31 05       	cpc	r19, r1
 7b8:	71 f0       	breq	.+28     	; 0x7d6 <_ZN9Registers13PortRegistersEhjj+0xb4>
 7ba:	21 30       	cpi	r18, 0x01	; 1
 7bc:	31 05       	cpc	r19, r1
 7be:	99 f5       	brne	.+102    	; 0x826 <_ZN9Registers13PortRegistersEhjj+0x104>
			{
				case 1 :
					PORTC |= (1 << rNum);
 7c0:	25 b3       	in	r18, 0x15	; 21
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <_ZN9Registers13PortRegistersEhjj+0xaa>
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	4a 95       	dec	r20
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <_ZN9Registers13PortRegistersEhjj+0xa6>
 7d0:	82 2b       	or	r24, r18
 7d2:	85 bb       	out	0x15, r24	; 21
					break;
 7d4:	08 95       	ret
				case 0 :
					PORTC &= ~(1 << rNum);
 7d6:	25 b3       	in	r18, 0x15	; 21
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <_ZN9Registers13PortRegistersEhjj+0xc0>
 7de:	88 0f       	add	r24, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	4a 95       	dec	r20
 7e4:	e2 f7       	brpl	.-8      	; 0x7de <_ZN9Registers13PortRegistersEhjj+0xbc>
 7e6:	80 95       	com	r24
 7e8:	82 23       	and	r24, r18
 7ea:	85 bb       	out	0x15, r24	; 21
					break;
 7ec:	08 95       	ret
			}
			break;
			
		case 'D' :
			switch (rSituation)
 7ee:	21 15       	cp	r18, r1
 7f0:	31 05       	cpc	r19, r1
 7f2:	71 f0       	breq	.+28     	; 0x810 <_ZN9Registers13PortRegistersEhjj+0xee>
 7f4:	21 30       	cpi	r18, 0x01	; 1
 7f6:	31 05       	cpc	r19, r1
 7f8:	b1 f4       	brne	.+44     	; 0x826 <_ZN9Registers13PortRegistersEhjj+0x104>
			{
				case 1 :
					PORTD |= (1 << rNum);
 7fa:	22 b3       	in	r18, 0x12	; 18
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	02 c0       	rjmp	.+4      	; 0x806 <_ZN9Registers13PortRegistersEhjj+0xe4>
 802:	88 0f       	add	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	4a 95       	dec	r20
 808:	e2 f7       	brpl	.-8      	; 0x802 <_ZN9Registers13PortRegistersEhjj+0xe0>
 80a:	82 2b       	or	r24, r18
 80c:	82 bb       	out	0x12, r24	; 18
					break;
 80e:	08 95       	ret
				case 0 :
					PORTD &= ~(1 << rNum);
 810:	22 b3       	in	r18, 0x12	; 18
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	02 c0       	rjmp	.+4      	; 0x81c <_ZN9Registers13PortRegistersEhjj+0xfa>
 818:	88 0f       	add	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	4a 95       	dec	r20
 81e:	e2 f7       	brpl	.-8      	; 0x818 <_ZN9Registers13PortRegistersEhjj+0xf6>
 820:	80 95       	com	r24
 822:	82 23       	and	r24, r18
 824:	82 bb       	out	0x12, r24	; 18
 826:	08 95       	ret

00000828 <_ZN13Lcd_4_BitMode11LCD_CommandEh>:



void Lcd_4_BitMode::LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);															/* sending upper nibble */
 828:	85 b3       	in	r24, 0x15	; 21
 82a:	8f 70       	andi	r24, 0x0F	; 15
 82c:	96 2f       	mov	r25, r22
 82e:	90 7f       	andi	r25, 0xF0	; 240
 830:	89 2b       	or	r24, r25
 832:	85 bb       	out	0x15, r24	; 21
	LCD_Port &= ~ (1<<RS);																					/* RS=0, command reg. */
 834:	a8 98       	cbi	0x15, 0	; 21
	LCD_Port |= (1<<EN);																					/* Enable pulse */
 836:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 838:	82 e0       	ldi	r24, 0x02	; 2
 83a:	8a 95       	dec	r24
 83c:	f1 f7       	brne	.-4      	; 0x83a <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x12>
 83e:	00 c0       	rjmp	.+0      	; 0x840 <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x18>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 840:	a9 98       	cbi	0x15, 1	; 21
 842:	8f e8       	ldi	r24, 0x8F	; 143
 844:	91 e0       	ldi	r25, 0x01	; 1
 846:	01 97       	sbiw	r24, 0x01	; 1
 848:	f1 f7       	brne	.-4      	; 0x846 <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x1e>
 84a:	00 c0       	rjmp	.+0      	; 0x84c <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x24>
 84c:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);																/* sending lower nibble */
 84e:	85 b3       	in	r24, 0x15	; 21
 850:	8f 70       	andi	r24, 0x0F	; 15
 852:	90 e1       	ldi	r25, 0x10	; 16
 854:	69 9f       	mul	r22, r25
 856:	b0 01       	movw	r22, r0
 858:	11 24       	eor	r1, r1
 85a:	68 2b       	or	r22, r24
 85c:	65 bb       	out	0x15, r22	; 21
	LCD_Port |= (1<<EN);
 85e:	a9 9a       	sbi	0x15, 1	; 21
 860:	82 e0       	ldi	r24, 0x02	; 2
 862:	8a 95       	dec	r24
 864:	f1 f7       	brne	.-4      	; 0x862 <__stack+0x3>
 866:	00 c0       	rjmp	.+0      	; 0x868 <__stack+0x9>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 868:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 86a:	8f e9       	ldi	r24, 0x9F	; 159
 86c:	9f e0       	ldi	r25, 0x0F	; 15
 86e:	01 97       	sbiw	r24, 0x01	; 1
 870:	f1 f7       	brne	.-4      	; 0x86e <__stack+0xf>
 872:	00 c0       	rjmp	.+0      	; 0x874 <__stack+0x15>
 874:	00 00       	nop
 876:	08 95       	ret

00000878 <_ZN13Lcd_4_BitMode8LCD_CharEh>:
	_delay_ms(2);
}

void Lcd_4_BitMode::LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);															/* sending upper nibble */
 878:	85 b3       	in	r24, 0x15	; 21
 87a:	8f 70       	andi	r24, 0x0F	; 15
 87c:	96 2f       	mov	r25, r22
 87e:	90 7f       	andi	r25, 0xF0	; 240
 880:	89 2b       	or	r24, r25
 882:	85 bb       	out	0x15, r24	; 21
	LCD_Port |= (1<<RS);																					/* RS=1, data reg. */
 884:	a8 9a       	sbi	0x15, 0	; 21
	LCD_Port|= (1<<EN);
 886:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 888:	82 e0       	ldi	r24, 0x02	; 2
 88a:	8a 95       	dec	r24
 88c:	f1 f7       	brne	.-4      	; 0x88a <_ZN13Lcd_4_BitMode8LCD_CharEh+0x12>
 88e:	00 c0       	rjmp	.+0      	; 0x890 <_ZN13Lcd_4_BitMode8LCD_CharEh+0x18>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 890:	a9 98       	cbi	0x15, 1	; 21
 892:	8f e8       	ldi	r24, 0x8F	; 143
 894:	91 e0       	ldi	r25, 0x01	; 1
 896:	01 97       	sbiw	r24, 0x01	; 1
 898:	f1 f7       	brne	.-4      	; 0x896 <_ZN13Lcd_4_BitMode8LCD_CharEh+0x1e>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <_ZN13Lcd_4_BitMode8LCD_CharEh+0x24>
 89c:	00 00       	nop
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (data << 4);																/* sending lower nibble */
 89e:	85 b3       	in	r24, 0x15	; 21
 8a0:	8f 70       	andi	r24, 0x0F	; 15
 8a2:	90 e1       	ldi	r25, 0x10	; 16
 8a4:	69 9f       	mul	r22, r25
 8a6:	b0 01       	movw	r22, r0
 8a8:	11 24       	eor	r1, r1
 8aa:	68 2b       	or	r22, r24
 8ac:	65 bb       	out	0x15, r22	; 21
	LCD_Port |= (1<<EN);
 8ae:	a9 9a       	sbi	0x15, 1	; 21
 8b0:	82 e0       	ldi	r24, 0x02	; 2
 8b2:	8a 95       	dec	r24
 8b4:	f1 f7       	brne	.-4      	; 0x8b2 <_ZN13Lcd_4_BitMode8LCD_CharEh+0x3a>
 8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <_ZN13Lcd_4_BitMode8LCD_CharEh+0x40>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 8b8:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8ba:	8f e9       	ldi	r24, 0x9F	; 159
 8bc:	9f e0       	ldi	r25, 0x0F	; 15
 8be:	01 97       	sbiw	r24, 0x01	; 1
 8c0:	f1 f7       	brne	.-4      	; 0x8be <_ZN13Lcd_4_BitMode8LCD_CharEh+0x46>
 8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <_ZN13Lcd_4_BitMode8LCD_CharEh+0x4c>
 8c4:	00 00       	nop
 8c6:	08 95       	ret

000008c8 <_ZN13Lcd_4_BitMode8LCD_InitEv>:
	_delay_ms(2);
}

void Lcd_4_BitMode::LCD_Init (void)
{
 8c8:	cf 93       	push	r28
 8ca:	df 93       	push	r29
 8cc:	ec 01       	movw	r28, r24
	LCD_Dir = 0xFF;																							/* Make LCD port direction as o/p */
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	84 bb       	out	0x14, r24	; 20
 8d2:	8f e3       	ldi	r24, 0x3F	; 63
 8d4:	9c e9       	ldi	r25, 0x9C	; 156
 8d6:	01 97       	sbiw	r24, 0x01	; 1
 8d8:	f1 f7       	brne	.-4      	; 0x8d6 <_ZN13Lcd_4_BitMode8LCD_InitEv+0xe>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <_ZN13Lcd_4_BitMode8LCD_InitEv+0x14>
 8dc:	00 00       	nop
	_delay_ms(20);																							/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);																						/* send for 4 bit initialization of LCD  */
 8de:	62 e0       	ldi	r22, 0x02	; 2
 8e0:	ce 01       	movw	r24, r28
 8e2:	0e 94 14 04 	call	0x828	; 0x828 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
	LCD_Command(0x28);																					    /* 2 line, 5*7 matrix in 4-bit mode */
 8e6:	68 e2       	ldi	r22, 0x28	; 40
 8e8:	ce 01       	movw	r24, r28
 8ea:	0e 94 14 04 	call	0x828	; 0x828 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
	LCD_Command(0x0c);																				        /* Display on cursor off*/
 8ee:	6c e0       	ldi	r22, 0x0C	; 12
 8f0:	ce 01       	movw	r24, r28
 8f2:	0e 94 14 04 	call	0x828	; 0x828 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
	LCD_Command(0x06);																						/* Increment cursor (shift cursor to right)*/
 8f6:	66 e0       	ldi	r22, 0x06	; 6
 8f8:	ce 01       	movw	r24, r28
 8fa:	0e 94 14 04 	call	0x828	; 0x828 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
	LCD_Command(0x01);																					    /* Clear display screen*/
 8fe:	61 e0       	ldi	r22, 0x01	; 1
 900:	ce 01       	movw	r24, r28
 902:	0e 94 14 04 	call	0x828	; 0x828 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
 906:	8f e9       	ldi	r24, 0x9F	; 159
 908:	9f e0       	ldi	r25, 0x0F	; 15
 90a:	01 97       	sbiw	r24, 0x01	; 1
 90c:	f1 f7       	brne	.-4      	; 0x90a <_ZN13Lcd_4_BitMode8LCD_InitEv+0x42>
 90e:	00 c0       	rjmp	.+0      	; 0x910 <_ZN13Lcd_4_BitMode8LCD_InitEv+0x48>
 910:	00 00       	nop
	_delay_ms(2);
}
 912:	df 91       	pop	r29
 914:	cf 91       	pop	r28
 916:	08 95       	ret

00000918 <_ZN13Lcd_4_BitMode10LCD_StringEPc>:

unsigned int Lcd_4_BitMode::LCD_String (char *str)
{
 918:	ef 92       	push	r14
 91a:	ff 92       	push	r15
 91c:	0f 93       	push	r16
 91e:	1f 93       	push	r17
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	fb 01       	movw	r30, r22
	int i;
	for(i = 0 ; str[i] != 0; i ++)																			/* Send each char of string till the NULL */
 926:	60 81       	ld	r22, Z
 928:	66 23       	and	r22, r22
 92a:	91 f0       	breq	.+36     	; 0x950 <_ZN13Lcd_4_BitMode10LCD_StringEPc+0x38>
 92c:	8f 01       	movw	r16, r30
 92e:	7c 01       	movw	r14, r24
 930:	0f 5f       	subi	r16, 0xFF	; 255
 932:	1f 4f       	sbci	r17, 0xFF	; 255
 934:	c0 e0       	ldi	r28, 0x00	; 0
 936:	d0 e0       	ldi	r29, 0x00	; 0
	{
		LCD_Char (str[i]);
 938:	c7 01       	movw	r24, r14
 93a:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN13Lcd_4_BitMode8LCD_CharEh>
}

unsigned int Lcd_4_BitMode::LCD_String (char *str)
{
	int i;
	for(i = 0 ; str[i] != 0; i ++)																			/* Send each char of string till the NULL */
 93e:	21 96       	adiw	r28, 0x01	; 1
 940:	8c 2f       	mov	r24, r28
 942:	9d 2f       	mov	r25, r29
 944:	f8 01       	movw	r30, r16
 946:	61 91       	ld	r22, Z+
 948:	8f 01       	movw	r16, r30
 94a:	61 11       	cpse	r22, r1
 94c:	f5 cf       	rjmp	.-22     	; 0x938 <_ZN13Lcd_4_BitMode10LCD_StringEPc+0x20>
 94e:	02 c0       	rjmp	.+4      	; 0x954 <_ZN13Lcd_4_BitMode10LCD_StringEPc+0x3c>
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	90 e0       	ldi	r25, 0x00	; 0
	{
		LCD_Char (str[i]);
	}
	return i;
}
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	ff 90       	pop	r15
 95e:	ef 90       	pop	r14
 960:	08 95       	ret

00000962 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc>:

void Lcd_4_BitMode::LCD_String_xy (char row, char pos, char *str)
{
 962:	0f 93       	push	r16
 964:	1f 93       	push	r17
 966:	cf 93       	push	r28
 968:	df 93       	push	r29
 96a:	8c 01       	movw	r16, r24
 96c:	e9 01       	movw	r28, r18
	if (row == 0 && pos<16)
 96e:	61 11       	cpse	r22, r1
 970:	08 c0       	rjmp	.+16     	; 0x982 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc+0x20>
 972:	40 31       	cpi	r20, 0x10	; 16
 974:	78 f4       	brcc	.+30     	; 0x994 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc+0x32>
	LCD_Command((pos & 0x0F)|0x80);																			/* Command of first row and required position<16 */
 976:	4f 70       	andi	r20, 0x0F	; 15
 978:	64 2f       	mov	r22, r20
 97a:	60 68       	ori	r22, 0x80	; 128
 97c:	0e 94 14 04 	call	0x828	; 0x828 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
 980:	09 c0       	rjmp	.+18     	; 0x994 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc+0x32>
	else if (row == 1 && pos<16)
 982:	61 30       	cpi	r22, 0x01	; 1
 984:	39 f4       	brne	.+14     	; 0x994 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc+0x32>
 986:	40 31       	cpi	r20, 0x10	; 16
 988:	28 f4       	brcc	.+10     	; 0x994 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc+0x32>
	LCD_Command((pos & 0x0F)|0xC0);																			/* Command of first row and required position<16 */
 98a:	4f 70       	andi	r20, 0x0F	; 15
 98c:	64 2f       	mov	r22, r20
 98e:	60 6c       	ori	r22, 0xC0	; 192
 990:	0e 94 14 04 	call	0x828	; 0x828 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
	LCD_String(str);																						/* Call LCD string function */
 994:	be 01       	movw	r22, r28
 996:	c8 01       	movw	r24, r16
 998:	0e 94 8c 04 	call	0x918	; 0x918 <_ZN13Lcd_4_BitMode10LCD_StringEPc>
}
 99c:	df 91       	pop	r29
 99e:	cf 91       	pop	r28
 9a0:	1f 91       	pop	r17
 9a2:	0f 91       	pop	r16
 9a4:	08 95       	ret

000009a6 <main>:

Button keypad;
Lcd_4_BitMode lcd;

int main(void)
{
 9a6:	cf 93       	push	r28
 9a8:	df 93       	push	r29
 9aa:	cd b7       	in	r28, 0x3d	; 61
 9ac:	de b7       	in	r29, 0x3e	; 62
 9ae:	2a 97       	sbiw	r28, 0x0a	; 10
 9b0:	0f b6       	in	r0, 0x3f	; 63
 9b2:	f8 94       	cli
 9b4:	de bf       	out	0x3e, r29	; 62
 9b6:	0f be       	out	0x3f, r0	; 63
 9b8:	cd bf       	out	0x3d, r28	; 61
	int value;
	char printChar[10];
	
	lcd.LCD_Init();
 9ba:	81 e6       	ldi	r24, 0x61	; 97
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN13Lcd_4_BitMode8LCD_InitEv>
	
	while(true)
	{
		value = keypad.Keypad('D' , 'D' , 4 , 3 , 'A');
 9c2:	0f 2e       	mov	r0, r31
 9c4:	f1 e4       	ldi	r31, 0x41	; 65
 9c6:	ef 2e       	mov	r14, r31
 9c8:	f0 2d       	mov	r31, r0
 9ca:	03 e0       	ldi	r16, 0x03	; 3
 9cc:	10 e0       	ldi	r17, 0x00	; 0
 9ce:	24 e0       	ldi	r18, 0x04	; 4
 9d0:	30 e0       	ldi	r19, 0x00	; 0
 9d2:	44 e4       	ldi	r20, 0x44	; 68
 9d4:	64 e4       	ldi	r22, 0x44	; 68
 9d6:	82 e6       	ldi	r24, 0x62	; 98
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN6Button6KeypadEhhjjh>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 9de:	4a e0       	ldi	r20, 0x0A	; 10
 9e0:	be 01       	movw	r22, r28
 9e2:	6f 5f       	subi	r22, 0xFF	; 255
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__itoa_ncheck>
		itoa(value , printChar , 10);
		lcd.LCD_String_xy(0 , 0 , printChar);
 9ea:	9e 01       	movw	r18, r28
 9ec:	2f 5f       	subi	r18, 0xFF	; 255
 9ee:	3f 4f       	sbci	r19, 0xFF	; 255
 9f0:	40 e0       	ldi	r20, 0x00	; 0
 9f2:	60 e0       	ldi	r22, 0x00	; 0
 9f4:	81 e6       	ldi	r24, 0x61	; 97
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 b1 04 	call	0x962	; 0x962 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc>
 9fc:	e2 cf       	rjmp	.-60     	; 0x9c2 <main+0x1c>

000009fe <_GLOBAL__sub_I_keypad>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>
#include "IORegisters.h"

class Button
 9fe:	e2 e6       	ldi	r30, 0x62	; 98
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	80 83       	st	Z, r24
 a06:	11 82       	std	Z+1, r1	; 0x01
 a08:	13 82       	std	Z+3, r1	; 0x03
 a0a:	12 82       	std	Z+2, r1	; 0x02
 a0c:	08 95       	ret

00000a0e <__tablejump2__>:
 a0e:	ee 0f       	add	r30, r30
 a10:	ff 1f       	adc	r31, r31
 a12:	05 90       	lpm	r0, Z+
 a14:	f4 91       	lpm	r31, Z
 a16:	e0 2d       	mov	r30, r0
 a18:	09 94       	ijmp

00000a1a <__itoa_ncheck>:
 a1a:	bb 27       	eor	r27, r27
 a1c:	4a 30       	cpi	r20, 0x0A	; 10
 a1e:	31 f4       	brne	.+12     	; 0xa2c <__itoa_ncheck+0x12>
 a20:	99 23       	and	r25, r25
 a22:	22 f4       	brpl	.+8      	; 0xa2c <__itoa_ncheck+0x12>
 a24:	bd e2       	ldi	r27, 0x2D	; 45
 a26:	90 95       	com	r25
 a28:	81 95       	neg	r24
 a2a:	9f 4f       	sbci	r25, 0xFF	; 255
 a2c:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__utoa_common>

00000a30 <__utoa_ncheck>:
 a30:	bb 27       	eor	r27, r27

00000a32 <__utoa_common>:
 a32:	fb 01       	movw	r30, r22
 a34:	55 27       	eor	r21, r21
 a36:	aa 27       	eor	r26, r26
 a38:	88 0f       	add	r24, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	aa 1f       	adc	r26, r26
 a3e:	a4 17       	cp	r26, r20
 a40:	10 f0       	brcs	.+4      	; 0xa46 <__utoa_common+0x14>
 a42:	a4 1b       	sub	r26, r20
 a44:	83 95       	inc	r24
 a46:	50 51       	subi	r21, 0x10	; 16
 a48:	b9 f7       	brne	.-18     	; 0xa38 <__utoa_common+0x6>
 a4a:	a0 5d       	subi	r26, 0xD0	; 208
 a4c:	aa 33       	cpi	r26, 0x3A	; 58
 a4e:	08 f0       	brcs	.+2      	; 0xa52 <__utoa_common+0x20>
 a50:	a9 5d       	subi	r26, 0xD9	; 217
 a52:	a1 93       	st	Z+, r26
 a54:	00 97       	sbiw	r24, 0x00	; 0
 a56:	79 f7       	brne	.-34     	; 0xa36 <__utoa_common+0x4>
 a58:	b1 11       	cpse	r27, r1
 a5a:	b1 93       	st	Z+, r27
 a5c:	11 92       	st	Z+, r1
 a5e:	cb 01       	movw	r24, r22
 a60:	0c 94 32 05 	jmp	0xa64	; 0xa64 <strrev>

00000a64 <strrev>:
 a64:	dc 01       	movw	r26, r24
 a66:	fc 01       	movw	r30, r24
 a68:	67 2f       	mov	r22, r23
 a6a:	71 91       	ld	r23, Z+
 a6c:	77 23       	and	r23, r23
 a6e:	e1 f7       	brne	.-8      	; 0xa68 <strrev+0x4>
 a70:	32 97       	sbiw	r30, 0x02	; 2
 a72:	04 c0       	rjmp	.+8      	; 0xa7c <strrev+0x18>
 a74:	7c 91       	ld	r23, X
 a76:	6d 93       	st	X+, r22
 a78:	70 83       	st	Z, r23
 a7a:	62 91       	ld	r22, -Z
 a7c:	ae 17       	cp	r26, r30
 a7e:	bf 07       	cpc	r27, r31
 a80:	c8 f3       	brcs	.-14     	; 0xa74 <strrev+0x10>
 a82:	08 95       	ret

00000a84 <_exit>:
 a84:	f8 94       	cli

00000a86 <__stop_program>:
 a86:	ff cf       	rjmp	.-2      	; 0xa86 <__stop_program>
