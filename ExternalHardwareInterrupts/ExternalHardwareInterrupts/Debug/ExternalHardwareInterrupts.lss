
ExternalHardwareInterrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f2  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b6  00000000  00000000  00000aaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003be  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000434  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f1  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001ab1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  74:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_ZN11ExInterrupt12interrptInitE6intReq7trigSty>:
#include "ExternalInterrupt.h"


void ExInterrupt::interrptInit(intReq R , trigSty T)
{
	switch (R)
  7c:	61 30       	cpi	r22, 0x01	; 1
  7e:	51 f1       	breq	.+84     	; 0xd4 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0x58>
  80:	20 f0       	brcs	.+8      	; 0x8a <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xe>
  82:	62 30       	cpi	r22, 0x02	; 2
  84:	09 f4       	brne	.+2      	; 0x88 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xc>
  86:	4f c0       	rjmp	.+158    	; 0x126 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xaa>
  88:	5f c0       	rjmp	.+190    	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
	{
		case Int0:
		DDRD &= ~(1 << PD2);
  8a:	8a 98       	cbi	0x11, 2	; 17
		PORTD |= (1 << PD2);
  8c:	92 9a       	sbi	0x12, 2	; 18
		GICR |= (1 << INT0);
  8e:	8b b7       	in	r24, 0x3b	; 59
  90:	80 64       	ori	r24, 0x40	; 64
  92:	8b bf       	out	0x3b, r24	; 59
		switch (T)
  94:	41 30       	cpi	r20, 0x01	; 1
  96:	69 f0       	breq	.+26     	; 0xb2 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0x36>
  98:	28 f0       	brcs	.+10     	; 0xa4 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0x28>
  9a:	42 30       	cpi	r20, 0x02	; 2
  9c:	89 f0       	breq	.+34     	; 0xc0 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0x44>
  9e:	43 30       	cpi	r20, 0x03	; 3
  a0:	b1 f0       	breq	.+44     	; 0xce <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0x52>
  a2:	52 c0       	rjmp	.+164    	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
		{
			case level:
			MCUCR &= ~(1 << ISC00);
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	8e 7f       	andi	r24, 0xFE	; 254
  a8:	85 bf       	out	0x35, r24	; 53
			MCUCR &= ~(1 << ISC01);
  aa:	85 b7       	in	r24, 0x35	; 53
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	85 bf       	out	0x35, r24	; 53
			break;
  b0:	4b c0       	rjmp	.+150    	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
			
			case anyTrigger:
			MCUCR |= (1 << ISC00);
  b2:	85 b7       	in	r24, 0x35	; 53
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	85 bf       	out	0x35, r24	; 53
			MCUCR &= ~(1 << ISC01);
  b8:	85 b7       	in	r24, 0x35	; 53
  ba:	8d 7f       	andi	r24, 0xFD	; 253
  bc:	85 bf       	out	0x35, r24	; 53
			break;
  be:	44 c0       	rjmp	.+136    	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
			
			case fallingEdge:
			MCUCR &= ~(1 << ISC00);
  c0:	85 b7       	in	r24, 0x35	; 53
  c2:	8e 7f       	andi	r24, 0xFE	; 254
  c4:	85 bf       	out	0x35, r24	; 53
			MCUCR |= (1 << ISC01);
  c6:	85 b7       	in	r24, 0x35	; 53
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	85 bf       	out	0x35, r24	; 53
			break;
  cc:	3d c0       	rjmp	.+122    	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
			
			case risingEdge:
			MCUCR = (1 << ISC00)|(1 << ISC01);
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	85 bf       	out	0x35, r24	; 53
			break;
  d2:	3a c0       	rjmp	.+116    	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
		}
		break;
		
		case Int1:
		GICR |= (1 << INT1);
  d4:	8b b7       	in	r24, 0x3b	; 59
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	8b bf       	out	0x3b, r24	; 59
		DDRD &= ~(1 << 3);
  da:	8b 98       	cbi	0x11, 3	; 17
		PORTD |= (1 << 3);
  dc:	93 9a       	sbi	0x12, 3	; 18
		switch (T)
  de:	41 30       	cpi	r20, 0x01	; 1
  e0:	69 f0       	breq	.+26     	; 0xfc <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0x80>
  e2:	28 f0       	brcs	.+10     	; 0xee <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0x72>
  e4:	42 30       	cpi	r20, 0x02	; 2
  e6:	89 f0       	breq	.+34     	; 0x10a <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0x8e>
  e8:	43 30       	cpi	r20, 0x03	; 3
  ea:	b1 f0       	breq	.+44     	; 0x118 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0x9c>
  ec:	2d c0       	rjmp	.+90     	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
		{
			case level:
			MCUCR &= ~(1 << ISC10);
  ee:	85 b7       	in	r24, 0x35	; 53
  f0:	8b 7f       	andi	r24, 0xFB	; 251
  f2:	85 bf       	out	0x35, r24	; 53
			MCUCR &= ~(1 << ISC11);
  f4:	85 b7       	in	r24, 0x35	; 53
  f6:	87 7f       	andi	r24, 0xF7	; 247
  f8:	85 bf       	out	0x35, r24	; 53
			break;
  fa:	26 c0       	rjmp	.+76     	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
			
			case anyTrigger:
			MCUCR |= (1 << ISC10);
  fc:	85 b7       	in	r24, 0x35	; 53
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	85 bf       	out	0x35, r24	; 53
			MCUCR &= ~(1 << ISC11);
 102:	85 b7       	in	r24, 0x35	; 53
 104:	87 7f       	andi	r24, 0xF7	; 247
 106:	85 bf       	out	0x35, r24	; 53
			break;
 108:	1f c0       	rjmp	.+62     	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
			
			case fallingEdge:
			MCUCR &= ~(1 << ISC10);
 10a:	85 b7       	in	r24, 0x35	; 53
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	85 bf       	out	0x35, r24	; 53
			MCUCR |= (1 << ISC11);
 110:	85 b7       	in	r24, 0x35	; 53
 112:	88 60       	ori	r24, 0x08	; 8
 114:	85 bf       	out	0x35, r24	; 53
			break;
 116:	18 c0       	rjmp	.+48     	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
			
			case risingEdge:
			MCUCR |= (1 << ISC10);
 118:	85 b7       	in	r24, 0x35	; 53
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	85 bf       	out	0x35, r24	; 53
			MCUCR |= (1 << ISC11);
 11e:	85 b7       	in	r24, 0x35	; 53
 120:	88 60       	ori	r24, 0x08	; 8
 122:	85 bf       	out	0x35, r24	; 53
			break;
 124:	11 c0       	rjmp	.+34     	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
		}
		break;
		
		case Int2:
		GICR |= (1 << INT2);
 126:	8b b7       	in	r24, 0x3b	; 59
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	8b bf       	out	0x3b, r24	; 59
		DDRB &= ~(1 << 2);
 12c:	ba 98       	cbi	0x17, 2	; 23
		PORTB |= (1 << 2);
 12e:	c2 9a       	sbi	0x18, 2	; 24
		switch (T)
 130:	42 30       	cpi	r20, 0x02	; 2
 132:	19 f0       	breq	.+6      	; 0x13a <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xbe>
 134:	43 30       	cpi	r20, 0x03	; 3
 136:	29 f0       	breq	.+10     	; 0x142 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xc6>
 138:	07 c0       	rjmp	.+14     	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
		{	
			case fallingEdge:
			MCUCR &= ~(1 << ISC2);
 13a:	85 b7       	in	r24, 0x35	; 53
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	85 bf       	out	0x35, r24	; 53
			break;
 140:	03 c0       	rjmp	.+6      	; 0x148 <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xcc>
			
			case risingEdge:
			MCUCR |= (1 << ISC2);
 142:	85 b7       	in	r24, 0x35	; 53
 144:	80 64       	ori	r24, 0x40	; 64
 146:	85 bf       	out	0x35, r24	; 53
			break;
		}
		break;
	}
	sei();
 148:	78 94       	sei
 14a:	ff cf       	rjmp	.-2      	; 0x14a <_ZN11ExInterrupt12interrptInitE6intReq7trigSty+0xce>

0000014c <__vector_1>:
#include "ExternalInterrupt.h"

ExInterrupt exInt;

ISR(INT0_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
	PORTA |= (1 << PA0);
 15a:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	83 ed       	ldi	r24, 0xD3	; 211
 15e:	90 e3       	ldi	r25, 0x30	; 48
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <__vector_1+0x14>
 164:	00 c0       	rjmp	.+0      	; 0x166 <__vector_1+0x1a>
 166:	00 00       	nop
	_delay_ms(50);  								/* Software debouncing control delay */
	
}
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <main>:


int main(void)
{
	DDRA |= (1 << 0);
 176:	d0 9a       	sbi	0x1a, 0	; 26
	PORTA &= ~(1 << 0);
 178:	d8 98       	cbi	0x1b, 0	; 27
	exInt.interrptInit(Int0, anyTrigger);
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	80 e6       	ldi	r24, 0x60	; 96
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 3e 00 	call	0x7c	; 0x7c <_ZN11ExInterrupt12interrptInitE6intReq7trigSty>
}
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
