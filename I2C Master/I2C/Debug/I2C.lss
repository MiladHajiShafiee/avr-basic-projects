
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001228  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00001228  000012bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080009a  0080009a  000012f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f47  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ef  00000000  00000000  00003407  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c69  00000000  00000000  00003df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00004a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000884  00000000  00000000  00004d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001545  00000000  00000000  000055f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006b39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <pow+0x64>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e8 e2       	ldi	r30, 0x28	; 40
      ea:	f2 e1       	ldi	r31, 0x12	; 18
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	aa 39       	cpi	r26, 0x9A	; 154
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	aa e9       	ldi	r26, 0x9A	; 154
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	ac 39       	cpi	r26, 0x9C	; 156
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <main>
     10c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <_ZN9I2cMaster13i2cMasterInitEh>:
	}
    else
	{
		return 3;									/* Else return 3 to indicate SLA+W failed */
	}
}
     114:	64 30       	cpi	r22, 0x04	; 4
     116:	61 f0       	breq	.+24     	; 0x130 <_ZN9I2cMaster13i2cMasterInitEh+0x1c>
     118:	18 f4       	brcc	.+6      	; 0x120 <_ZN9I2cMaster13i2cMasterInitEh+0xc>
     11a:	61 30       	cpi	r22, 0x01	; 1
     11c:	31 f0       	breq	.+12     	; 0x12a <_ZN9I2cMaster13i2cMasterInitEh+0x16>
     11e:	0e c0       	rjmp	.+28     	; 0x13c <_ZN9I2cMaster13i2cMasterInitEh+0x28>
     120:	60 31       	cpi	r22, 0x10	; 16
     122:	41 f0       	breq	.+16     	; 0x134 <_ZN9I2cMaster13i2cMasterInitEh+0x20>
     124:	60 34       	cpi	r22, 0x40	; 64
     126:	41 f0       	breq	.+16     	; 0x138 <_ZN9I2cMaster13i2cMasterInitEh+0x24>
     128:	09 c0       	rjmp	.+18     	; 0x13c <_ZN9I2cMaster13i2cMasterInitEh+0x28>
     12a:	08 98       	cbi	0x01, 0	; 1
     12c:	09 98       	cbi	0x01, 1	; 1
     12e:	06 c0       	rjmp	.+12     	; 0x13c <_ZN9I2cMaster13i2cMasterInitEh+0x28>
     130:	08 9a       	sbi	0x01, 0	; 1
     132:	09 98       	cbi	0x01, 1	; 1
     134:	08 98       	cbi	0x01, 0	; 1
     136:	09 9a       	sbi	0x01, 1	; 1
     138:	83 e0       	ldi	r24, 0x03	; 3
     13a:	81 b9       	out	0x01, r24	; 1
     13c:	61 b1       	in	r22, 0x01	; 1
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 a8 03 	call	0x750	; 0x750 <__floatunsisf>
     148:	9b 01       	movw	r18, r22
     14a:	ac 01       	movw	r20, r24
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	80 e8       	ldi	r24, 0x80	; 128
     152:	90 e4       	ldi	r25, 0x40	; 64
     154:	0e 94 36 04 	call	0x86c	; 0x86c <pow>
     158:	9b 01       	movw	r18, r22
     15a:	ac 01       	movw	r20, r24
     15c:	0e 94 9b 02 	call	0x536	; 0x536 <__addsf3>
     160:	9b 01       	movw	r18, r22
     162:	ac 01       	movw	r20, r24
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	70 e0       	ldi	r23, 0x00	; 0
     168:	80 e8       	ldi	r24, 0x80	; 128
     16a:	92 e4       	ldi	r25, 0x42	; 66
     16c:	0e 94 07 03 	call	0x60e	; 0x60e <__divsf3>
     170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixunssfsi>
     174:	60 b9       	out	0x00, r22	; 0
     176:	08 95       	ret

00000178 <_ZN9I2cMaster16i2cReapetedStartEh>:
}

uint8_t I2cMaster::i2cReapetedStart(unsigned char readAddress)
{
	uint8_t status;									/* Declare variable */
    TWCR = (1 << TWSTA)|(1 << TWEN)|(1 << TWINT);	/* Enable TWI, generate start */
     178:	84 ea       	ldi	r24, 0xA4	; 164
     17a:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 << TWINT)));					/* Wait until TWI finish its current job */
     17c:	06 b6       	in	r0, 0x36	; 54
     17e:	07 fe       	sbrs	r0, 7
     180:	fd cf       	rjmp	.-6      	; 0x17c <_ZN9I2cMaster16i2cReapetedStartEh+0x4>
    status = TWSR & 0xF8;							/* Read TWI status register */
     182:	81 b1       	in	r24, 0x01	; 1
    if(status != 0x10)								/* Check for repeated start transmitted */
     184:	88 7f       	andi	r24, 0xF8	; 248
     186:	80 31       	cpi	r24, 0x10	; 16
     188:	71 f4       	brne	.+28     	; 0x1a6 <_ZN9I2cMaster16i2cReapetedStartEh+0x2e>
	{
		return 0;									/* Return 0 for repeated start condition fail */
	}
    TWDR = readAddress;								/* Write SLA+R in TWI data register */
     18a:	63 b9       	out	0x03, r22	; 3
    TWCR = (1 << TWEN)|(1 << TWINT);				/* Enable TWI and clear interrupt flag */
     18c:	84 e8       	ldi	r24, 0x84	; 132
     18e:	86 bf       	out	0x36, r24	; 54
    while (!(TWCR & (1 << TWINT)));					/* Wait until TWI finish its current job */
     190:	06 b6       	in	r0, 0x36	; 54
     192:	07 fe       	sbrs	r0, 7
     194:	fd cf       	rjmp	.-6      	; 0x190 <_ZN9I2cMaster16i2cReapetedStartEh+0x18>
    status = TWSR & 0xF8;							/* Read TWI status register */
     196:	81 b1       	in	r24, 0x01	; 1
     198:	88 7f       	andi	r24, 0xF8	; 248
    if (status == 0x40)								/* Check for SLA+R transmitted & ack received */
     19a:	80 34       	cpi	r24, 0x40	; 64
     19c:	31 f0       	breq	.+12     	; 0x1aa <_ZN9I2cMaster16i2cReapetedStartEh+0x32>
	{
		return 1;									/* Return 1 to indicate ack received */
	}
    if (status == 0x48)								/* Check for SLA+R transmitted & nack received */
     19e:	88 34       	cpi	r24, 0x48	; 72
     1a0:	31 f0       	breq	.+12     	; 0x1ae <_ZN9I2cMaster16i2cReapetedStartEh+0x36>
	{
		return 2;									/* Return 2 to indicate nack received */
	}
    else
	{
		return 3;									/* Else return 3 to indicate SLA+W failed */
     1a2:	83 e0       	ldi	r24, 0x03	; 3
     1a4:	08 95       	ret
    TWCR = (1 << TWSTA)|(1 << TWEN)|(1 << TWINT);	/* Enable TWI, generate start */
    while (!(TWCR & (1 << TWINT)));					/* Wait until TWI finish its current job */
    status = TWSR & 0xF8;							/* Read TWI status register */
    if(status != 0x10)								/* Check for repeated start transmitted */
	{
		return 0;									/* Return 0 for repeated start condition fail */
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	08 95       	ret
    TWCR = (1 << TWEN)|(1 << TWINT);				/* Enable TWI and clear interrupt flag */
    while (!(TWCR & (1 << TWINT)));					/* Wait until TWI finish its current job */
    status = TWSR & 0xF8;							/* Read TWI status register */
    if (status == 0x40)								/* Check for SLA+R transmitted & ack received */
	{
		return 1;									/* Return 1 to indicate ack received */
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	08 95       	ret
	}
    if (status == 0x48)								/* Check for SLA+R transmitted & nack received */
	{
		return 2;									/* Return 2 to indicate nack received */
     1ae:	82 e0       	ldi	r24, 0x02	; 2
	}
    else
	{
		return 3;									/* Else return 3 to indicate SLA+W failed */
	}
}
     1b0:	08 95       	ret

000001b2 <_ZN9I2cMaster8i2cWriteEh>:

uint8_t I2cMaster::i2cWrite(unsigned char data)
{
	uint8_t status;									/* Declare variable */
	TWDR = data;									/* Copy data in TWI data register */
     1b2:	63 b9       	out	0x03, r22	; 3
	TWCR = (1 << TWEN)|(1 << TWINT);				/* Enable TWI and clear interrupt flag */
     1b4:	84 e8       	ldi	r24, 0x84	; 132
     1b6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));					/* Wait until TWI finish its current job */
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <_ZN9I2cMaster8i2cWriteEh+0x6>
	status = TWSR & 0xF8;							/* Read TWI status register */
     1be:	81 b1       	in	r24, 0x01	; 1
     1c0:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)								/* Check for data transmitted & ack received */
     1c2:	88 32       	cpi	r24, 0x28	; 40
     1c4:	21 f0       	breq	.+8      	; 0x1ce <_ZN9I2cMaster8i2cWriteEh+0x1c>
	{
		return 0;									/* Return 0 to indicate ack received */
	}
	if (status == 0x30)								/* Check for data transmitted & nack received */
     1c6:	80 33       	cpi	r24, 0x30	; 48
     1c8:	21 f0       	breq	.+8      	; 0x1d2 <_ZN9I2cMaster8i2cWriteEh+0x20>
	{
		return 1;									/* Return 1 to indicate nack received */
	}
	else
	{
		return 2;
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	08 95       	ret
	TWCR = (1 << TWEN)|(1 << TWINT);				/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));					/* Wait until TWI finish its current job */
	status = TWSR & 0xF8;							/* Read TWI status register */
	if (status == 0x28)								/* Check for data transmitted & ack received */
	{
		return 0;									/* Return 0 to indicate ack received */
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	08 95       	ret
	}
	if (status == 0x30)								/* Check for data transmitted & nack received */
	{
		return 1;									/* Return 1 to indicate nack received */
     1d2:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 2;
	}
}
     1d4:	08 95       	ret

000001d6 <_ZN9I2cMaster10i2cReadAckEv>:

unsigned char I2cMaster::i2cReadAck(void)
{
	TWCR = (1 << TWEN)|(1 << TWINT)|(1 << TWEA);	/* Enable TWI, generation of ack */
     1d6:	84 ec       	ldi	r24, 0xC4	; 196
     1d8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));					/* Wait until TWI finish its current job */
     1da:	06 b6       	in	r0, 0x36	; 54
     1dc:	07 fe       	sbrs	r0, 7
     1de:	fd cf       	rjmp	.-6      	; 0x1da <_ZN9I2cMaster10i2cReadAckEv+0x4>
	return TWDR;									/* Return received data */
     1e0:	83 b1       	in	r24, 0x03	; 3
}
     1e2:	08 95       	ret

000001e4 <_ZN9I2cMaster11i2cReadNackEv>:

unsigned char I2cMaster::i2cReadNack(void)
{
	TWCR = (1 << TWEN)|(1 << TWINT);				/* Enable TWI and clear interrupt flag */
     1e4:	84 e8       	ldi	r24, 0x84	; 132
     1e6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));					/* Wait until TWI finish its current job */
     1e8:	06 b6       	in	r0, 0x36	; 54
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <_ZN9I2cMaster11i2cReadNackEv+0x4>
	return TWDR;									/* Return received data */
     1ee:	83 b1       	in	r24, 0x03	; 3
}
     1f0:	08 95       	ret

000001f2 <_ZN9I2cMaster7i2cStopEv>:

void I2cMaster::i2cStop(void)
{
	TWCR = (1 << TWSTO)|(1 << TWINT)|(1 << TWEN);	/* Enable TWI, generate stop */
     1f2:	84 e9       	ldi	r24, 0x94	; 148
     1f4:	86 bf       	out	0x36, r24	; 54
	while (TWCR & (1 << TWSTO));					/* Wait until stop condition execution */
     1f6:	06 b6       	in	r0, 0x36	; 54
     1f8:	04 fc       	sbrc	r0, 4
     1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <_ZN9I2cMaster7i2cStopEv+0x4>
}
     1fc:	08 95       	ret

000001fe <_ZN9I2cMaster12i2cStartWaitEh>:
		return 3;									/* Else return 3 to indicate SLA+W failed */
	}
}

void I2cMaster::i2cStartWait(unsigned char writeAddress)
{
     1fe:	ef 92       	push	r14
     200:	ff 92       	push	r15
     202:	1f 93       	push	r17
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	7c 01       	movw	r14, r24
     20a:	16 2f       	mov	r17, r22
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1 << TWSTA)|(1 << TWEN)|(1 << TWINT);		/* Enable TWI, generate start condition and clear interrupt flag */
     20c:	c4 ea       	ldi	r28, 0xA4	; 164
		while (!(TWCR & (1 << TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = writeAddress;								/* If yes then write SLA+W in TWI data register */
		TWCR = (1 << TWEN)|(1 << TWINT);					/* Enable TWI and clear interrupt flag */
     20e:	d4 e8       	ldi	r29, 0x84	; 132
void I2cMaster::i2cStartWait(unsigned char writeAddress)
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1 << TWSTA)|(1 << TWEN)|(1 << TWINT);		/* Enable TWI, generate start condition and clear interrupt flag */
     210:	c6 bf       	out	0x36, r28	; 54
		while (!(TWCR & (1 << TWINT)));						/* Wait until TWI finish its current job (start condition) */
     212:	06 b6       	in	r0, 0x36	; 54
     214:	07 fe       	sbrs	r0, 7
     216:	fd cf       	rjmp	.-6      	; 0x212 <_ZN9I2cMaster12i2cStartWaitEh+0x14>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     218:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     21a:	88 7f       	andi	r24, 0xF8	; 248
     21c:	88 30       	cpi	r24, 0x08	; 8
     21e:	c1 f7       	brne	.-16     	; 0x210 <_ZN9I2cMaster12i2cStartWaitEh+0x12>
		continue;											/* If no then continue with start loop again */
		TWDR = writeAddress;								/* If yes then write SLA+W in TWI data register */
     220:	13 b9       	out	0x03, r17	; 3
		TWCR = (1 << TWEN)|(1 << TWINT);					/* Enable TWI and clear interrupt flag */
     222:	d6 bf       	out	0x36, r29	; 54
		while (!(TWCR & (1 << TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     224:	06 b6       	in	r0, 0x36	; 54
     226:	07 fe       	sbrs	r0, 7
     228:	fd cf       	rjmp	.-6      	; 0x224 <_ZN9I2cMaster12i2cStartWaitEh+0x26>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     22a:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     22c:	88 7f       	andi	r24, 0xF8	; 248
     22e:	88 31       	cpi	r24, 0x18	; 24
     230:	21 f0       	breq	.+8      	; 0x23a <_ZN9I2cMaster12i2cStartWaitEh+0x3c>
		{
			i2cStop();							/* If not then generate stop condition */
     232:	c7 01       	movw	r24, r14
     234:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZN9I2cMaster7i2cStopEv>
			continue;										/* continue with start loop again */
     238:	eb cf       	rjmp	.-42     	; 0x210 <_ZN9I2cMaster12i2cStartWaitEh+0x12>
		}
		break;												/* If yes then break loop */
	}
}
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	1f 91       	pop	r17
     240:	ff 90       	pop	r15
     242:	ef 90       	pop	r14
     244:	08 95       	ret

00000246 <_ZN13Lcd_4_BitMode11LCD_CommandEh>:



void Lcd_4_BitMode::LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);															/* sending upper nibble */
     246:	88 b3       	in	r24, 0x18	; 24
     248:	8f 70       	andi	r24, 0x0F	; 15
     24a:	96 2f       	mov	r25, r22
     24c:	90 7f       	andi	r25, 0xF0	; 240
     24e:	89 2b       	or	r24, r25
     250:	88 bb       	out	0x18, r24	; 24
	LCD_Port &= ~ (1<<RS);																					/* RS=0, command reg. */
     252:	c0 98       	cbi	0x18, 0	; 24
	LCD_Port |= (1<<EN);																					/* Enable pulse */
     254:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     256:	82 e0       	ldi	r24, 0x02	; 2
     258:	8a 95       	dec	r24
     25a:	f1 f7       	brne	.-4      	; 0x258 <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x12>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x18>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     25e:	c1 98       	cbi	0x18, 1	; 24
     260:	8f e8       	ldi	r24, 0x8F	; 143
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x1e>
     268:	00 c0       	rjmp	.+0      	; 0x26a <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x24>
     26a:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);																/* sending lower nibble */
     26c:	88 b3       	in	r24, 0x18	; 24
     26e:	8f 70       	andi	r24, 0x0F	; 15
     270:	90 e1       	ldi	r25, 0x10	; 16
     272:	69 9f       	mul	r22, r25
     274:	b0 01       	movw	r22, r0
     276:	11 24       	eor	r1, r1
     278:	68 2b       	or	r22, r24
     27a:	68 bb       	out	0x18, r22	; 24
	LCD_Port |= (1<<EN);
     27c:	c1 9a       	sbi	0x18, 1	; 24
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	8a 95       	dec	r24
     282:	f1 f7       	brne	.-4      	; 0x280 <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x3a>
     284:	00 c0       	rjmp	.+0      	; 0x286 <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x40>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     286:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     288:	8f e9       	ldi	r24, 0x9F	; 159
     28a:	9f e0       	ldi	r25, 0x0F	; 15
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x46>
     290:	00 c0       	rjmp	.+0      	; 0x292 <_ZN13Lcd_4_BitMode11LCD_CommandEh+0x4c>
     292:	00 00       	nop
     294:	08 95       	ret

00000296 <_ZN13Lcd_4_BitMode8LCD_CharEh>:
	_delay_ms(2);
}

void Lcd_4_BitMode::LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);															/* sending upper nibble */
     296:	88 b3       	in	r24, 0x18	; 24
     298:	8f 70       	andi	r24, 0x0F	; 15
     29a:	96 2f       	mov	r25, r22
     29c:	90 7f       	andi	r25, 0xF0	; 240
     29e:	89 2b       	or	r24, r25
     2a0:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<RS);																					/* RS=1, data reg. */
     2a2:	c0 9a       	sbi	0x18, 0	; 24
	LCD_Port|= (1<<EN);
     2a4:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a6:	82 e0       	ldi	r24, 0x02	; 2
     2a8:	8a 95       	dec	r24
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <_ZN13Lcd_4_BitMode8LCD_CharEh+0x12>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <_ZN13Lcd_4_BitMode8LCD_CharEh+0x18>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     2ae:	c1 98       	cbi	0x18, 1	; 24
     2b0:	8f e8       	ldi	r24, 0x8F	; 143
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <_ZN13Lcd_4_BitMode8LCD_CharEh+0x1e>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <_ZN13Lcd_4_BitMode8LCD_CharEh+0x24>
     2ba:	00 00       	nop
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (data << 4);																/* sending lower nibble */
     2bc:	88 b3       	in	r24, 0x18	; 24
     2be:	8f 70       	andi	r24, 0x0F	; 15
     2c0:	90 e1       	ldi	r25, 0x10	; 16
     2c2:	69 9f       	mul	r22, r25
     2c4:	b0 01       	movw	r22, r0
     2c6:	11 24       	eor	r1, r1
     2c8:	68 2b       	or	r22, r24
     2ca:	68 bb       	out	0x18, r22	; 24
	LCD_Port |= (1<<EN);
     2cc:	c1 9a       	sbi	0x18, 1	; 24
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	8a 95       	dec	r24
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <_ZN13Lcd_4_BitMode8LCD_CharEh+0x3a>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <_ZN13Lcd_4_BitMode8LCD_CharEh+0x40>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     2d6:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2d8:	8f e9       	ldi	r24, 0x9F	; 159
     2da:	9f e0       	ldi	r25, 0x0F	; 15
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <_ZN13Lcd_4_BitMode8LCD_CharEh+0x46>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <_ZN13Lcd_4_BitMode8LCD_CharEh+0x4c>
     2e2:	00 00       	nop
     2e4:	08 95       	ret

000002e6 <_ZN13Lcd_4_BitMode8LCD_InitEv>:
	_delay_ms(2);
}

void Lcd_4_BitMode::LCD_Init (void)
{
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	ec 01       	movw	r28, r24
	LCD_Dir = 0xFF;																							/* Make LCD port direction as o/p */
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	87 bb       	out	0x17, r24	; 23
     2f0:	8f e3       	ldi	r24, 0x3F	; 63
     2f2:	9c e9       	ldi	r25, 0x9C	; 156
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <_ZN13Lcd_4_BitMode8LCD_InitEv+0xe>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <_ZN13Lcd_4_BitMode8LCD_InitEv+0x14>
     2fa:	00 00       	nop
	_delay_ms(20);																							/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);																						/* send for 4 bit initialization of LCD  */
     2fc:	62 e0       	ldi	r22, 0x02	; 2
     2fe:	ce 01       	movw	r24, r28
     300:	0e 94 23 01 	call	0x246	; 0x246 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
	LCD_Command(0x28);																					    /* 2 line, 5*7 matrix in 4-bit mode */
     304:	68 e2       	ldi	r22, 0x28	; 40
     306:	ce 01       	movw	r24, r28
     308:	0e 94 23 01 	call	0x246	; 0x246 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
	LCD_Command(0x0c);																				        /* Display on cursor off*/
     30c:	6c e0       	ldi	r22, 0x0C	; 12
     30e:	ce 01       	movw	r24, r28
     310:	0e 94 23 01 	call	0x246	; 0x246 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
	LCD_Command(0x06);																						/* Increment cursor (shift cursor to right)*/
     314:	66 e0       	ldi	r22, 0x06	; 6
     316:	ce 01       	movw	r24, r28
     318:	0e 94 23 01 	call	0x246	; 0x246 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
	LCD_Command(0x01);																					    /* Clear display screen*/
     31c:	61 e0       	ldi	r22, 0x01	; 1
     31e:	ce 01       	movw	r24, r28
     320:	0e 94 23 01 	call	0x246	; 0x246 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
     324:	8f e9       	ldi	r24, 0x9F	; 159
     326:	9f e0       	ldi	r25, 0x0F	; 15
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <_ZN13Lcd_4_BitMode8LCD_InitEv+0x42>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <_ZN13Lcd_4_BitMode8LCD_InitEv+0x48>
     32e:	00 00       	nop
	_delay_ms(2);
}
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <_ZN13Lcd_4_BitMode10LCD_StringEPc>:

unsigned int Lcd_4_BitMode::LCD_String (char *str)
{
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	fb 01       	movw	r30, r22
	int i;
	for(i = 0 ; str[i] != 0; i ++)																			/* Send each char of string till the NULL */
     344:	60 81       	ld	r22, Z
     346:	66 23       	and	r22, r22
     348:	91 f0       	breq	.+36     	; 0x36e <_ZN13Lcd_4_BitMode10LCD_StringEPc+0x38>
     34a:	8f 01       	movw	r16, r30
     34c:	7c 01       	movw	r14, r24
     34e:	0f 5f       	subi	r16, 0xFF	; 255
     350:	1f 4f       	sbci	r17, 0xFF	; 255
     352:	c0 e0       	ldi	r28, 0x00	; 0
     354:	d0 e0       	ldi	r29, 0x00	; 0
	{
		LCD_Char (str[i]);
     356:	c7 01       	movw	r24, r14
     358:	0e 94 4b 01 	call	0x296	; 0x296 <_ZN13Lcd_4_BitMode8LCD_CharEh>
}

unsigned int Lcd_4_BitMode::LCD_String (char *str)
{
	int i;
	for(i = 0 ; str[i] != 0; i ++)																			/* Send each char of string till the NULL */
     35c:	21 96       	adiw	r28, 0x01	; 1
     35e:	8c 2f       	mov	r24, r28
     360:	9d 2f       	mov	r25, r29
     362:	f8 01       	movw	r30, r16
     364:	61 91       	ld	r22, Z+
     366:	8f 01       	movw	r16, r30
     368:	61 11       	cpse	r22, r1
     36a:	f5 cf       	rjmp	.-22     	; 0x356 <_ZN13Lcd_4_BitMode10LCD_StringEPc+0x20>
     36c:	02 c0       	rjmp	.+4      	; 0x372 <_ZN13Lcd_4_BitMode10LCD_StringEPc+0x3c>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
	{
		LCD_Char (str[i]);
	}
	return i;
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	08 95       	ret

00000380 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc>:

void Lcd_4_BitMode::LCD_String_xy (char row, char pos, char *str)
{
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	8c 01       	movw	r16, r24
     38a:	e9 01       	movw	r28, r18
	if (row == 0 && pos<16)
     38c:	61 11       	cpse	r22, r1
     38e:	08 c0       	rjmp	.+16     	; 0x3a0 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc+0x20>
     390:	40 31       	cpi	r20, 0x10	; 16
     392:	78 f4       	brcc	.+30     	; 0x3b2 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc+0x32>
	LCD_Command((pos & 0x0F)|0x80);																			/* Command of first row and required position<16 */
     394:	4f 70       	andi	r20, 0x0F	; 15
     396:	64 2f       	mov	r22, r20
     398:	60 68       	ori	r22, 0x80	; 128
     39a:	0e 94 23 01 	call	0x246	; 0x246 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
     39e:	09 c0       	rjmp	.+18     	; 0x3b2 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc+0x32>
	else if (row == 1 && pos<16)
     3a0:	61 30       	cpi	r22, 0x01	; 1
     3a2:	39 f4       	brne	.+14     	; 0x3b2 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc+0x32>
     3a4:	40 31       	cpi	r20, 0x10	; 16
     3a6:	28 f4       	brcc	.+10     	; 0x3b2 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc+0x32>
	LCD_Command((pos & 0x0F)|0xC0);																			/* Command of first row and required position<16 */
     3a8:	4f 70       	andi	r20, 0x0F	; 15
     3aa:	64 2f       	mov	r22, r20
     3ac:	60 6c       	ori	r22, 0xC0	; 192
     3ae:	0e 94 23 01 	call	0x246	; 0x246 <_ZN13Lcd_4_BitMode11LCD_CommandEh>
	LCD_String(str);																						/* Call LCD string function */
     3b2:	be 01       	movw	r22, r28
     3b4:	c8 01       	movw	r24, r16
     3b6:	0e 94 9b 01 	call	0x336	; 0x336 <_ZN13Lcd_4_BitMode10LCD_StringEPc>
}
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	08 95       	ret

000003c4 <main>:
Lcd_4_BitMode lcd;
I2cMaster i2c;


int main()
{
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	2a 97       	sbiw	r28, 0x0a	; 10
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	
	lcd.LCD_Init();														/* Initialize LCD */
     3d8:	8b e9       	ldi	r24, 0x9B	; 155
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_ZN13Lcd_4_BitMode8LCD_InitEv>
	i2c.i2cMasterInit(64);												/* Initialize I2C */
     3e0:	60 e4       	ldi	r22, 0x40	; 64
     3e2:	8a e9       	ldi	r24, 0x9A	; 154
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN9I2cMaster13i2cMasterInitEh>
	
	lcd.LCD_String_xy(1, 0, "Master Device");
     3ea:	20 e6       	ldi	r18, 0x60	; 96
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	61 e0       	ldi	r22, 0x01	; 1
     3f2:	8b e9       	ldi	r24, 0x9B	; 155
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc>
		lcd.LCD_String_xy(2, 0, "Sending :       ");
		i2c.i2cStartWait(Slave_Write_Address);							/* Start I2C with SLA+W */
		_delay_ms(5);
		for (uint8_t i = 0; i < count ; i++)
		{
			sprintf(buffer, "%d    ",i);
     3fa:	0f 2e       	mov	r0, r31
     3fc:	ff e7       	ldi	r31, 0x7F	; 127
     3fe:	ef 2e       	mov	r14, r31
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	ff 2e       	mov	r15, r31
     404:	f0 2d       	mov	r31, r0
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	6c 01       	movw	r12, r24
     40c:	a8 2e       	mov	r10, r24
     40e:	bd 2c       	mov	r11, r13
	
	lcd.LCD_String_xy(1, 0, "Master Device");
	
	while (1)
	{
		lcd.LCD_String_xy(2, 0, "Sending :       ");
     410:	2e e6       	ldi	r18, 0x6E	; 110
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	8b e9       	ldi	r24, 0x9B	; 155
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc>
		i2c.i2cStartWait(Slave_Write_Address);							/* Start I2C with SLA+W */
     420:	60 e2       	ldi	r22, 0x20	; 32
     422:	8a e9       	ldi	r24, 0x9A	; 154
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 ff 00 	call	0x1fe	; 0x1fe <_ZN9I2cMaster12i2cStartWaitEh>
     42a:	8f e0       	ldi	r24, 0x0F	; 15
     42c:	97 e2       	ldi	r25, 0x27	; 39
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     434:	00 00       	nop
     436:	00 e0       	ldi	r16, 0x00	; 0
     438:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(5);
		for (uint8_t i = 0; i < count ; i++)
		{
			sprintf(buffer, "%d    ",i);
     43a:	1f 93       	push	r17
     43c:	0f 93       	push	r16
     43e:	ff 92       	push	r15
     440:	ef 92       	push	r14
     442:	df 92       	push	r13
     444:	cf 92       	push	r12
     446:	0e 94 28 06 	call	0xc50	; 0xc50 <sprintf>
			lcd.LCD_String_xy(2, 13, buffer);
     44a:	2a 2d       	mov	r18, r10
     44c:	3b 2d       	mov	r19, r11
     44e:	4d e0       	ldi	r20, 0x0D	; 13
     450:	62 e0       	ldi	r22, 0x02	; 2
     452:	8b e9       	ldi	r24, 0x9B	; 155
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc>
			i2c.i2cWrite(i);											/* Send Incrementing count */
     45a:	60 2f       	mov	r22, r16
     45c:	8a e9       	ldi	r24, 0x9A	; 154
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_ZN9I2cMaster8i2cWriteEh>
     464:	9f ef       	ldi	r25, 0xFF	; 255
     466:	24 e3       	ldi	r18, 0x34	; 52
     468:	8c e0       	ldi	r24, 0x0C	; 12
     46a:	91 50       	subi	r25, 0x01	; 1
     46c:	20 40       	sbci	r18, 0x00	; 0
     46e:	80 40       	sbci	r24, 0x00	; 0
     470:	e1 f7       	brne	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     472:	00 c0       	rjmp	.+0      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     474:	00 00       	nop
     476:	0f 5f       	subi	r16, 0xFF	; 255
     478:	1f 4f       	sbci	r17, 0xFF	; 255
	while (1)
	{
		lcd.LCD_String_xy(2, 0, "Sending :       ");
		i2c.i2cStartWait(Slave_Write_Address);							/* Start I2C with SLA+W */
		_delay_ms(5);
		for (uint8_t i = 0; i < count ; i++)
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0a 30       	cpi	r16, 0x0A	; 10
     488:	11 05       	cpc	r17, r1
     48a:	b9 f6       	brne	.-82     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
			sprintf(buffer, "%d    ",i);
			lcd.LCD_String_xy(2, 13, buffer);
			i2c.i2cWrite(i);											/* Send Incrementing count */
			_delay_ms(500);
		}
		lcd.LCD_String_xy(2, 0, "Receiving :       ");
     48c:	26 e8       	ldi	r18, 0x86	; 134
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	62 e0       	ldi	r22, 0x02	; 2
     494:	8b e9       	ldi	r24, 0x9B	; 155
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc>
		i2c.i2cReapetedStart(Slave_Read_Address);						/* Repeated Start with SLA+R */
     49c:	61 e2       	ldi	r22, 0x21	; 33
     49e:	8a e9       	ldi	r24, 0x9A	; 154
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 bc 00 	call	0x178	; 0x178 <_ZN9I2cMaster16i2cReapetedStartEh>
     4a6:	8f e0       	ldi	r24, 0x0F	; 15
     4a8:	97 e2       	ldi	r25, 0x27	; 39
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4b0:	00 00       	nop
		_delay_ms(5);
		for (uint8_t i = 0; i < count; i++)
     4b2:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(i < count - 1)
     4b4:	19 30       	cpi	r17, 0x09	; 9
     4b6:	98 f4       	brcc	.+38     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			sprintf(buffer, "%d    ", i2c.i2cReadAck());				/* Read & Ack of data */
     4b8:	8a e9       	ldi	r24, 0x9A	; 154
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_ZN9I2cMaster10i2cReadAckEv>
     4c0:	1f 92       	push	r1
     4c2:	8f 93       	push	r24
     4c4:	ff 92       	push	r15
     4c6:	ef 92       	push	r14
     4c8:	df 92       	push	r13
     4ca:	cf 92       	push	r12
     4cc:	0e 94 28 06 	call	0xc50	; 0xc50 <sprintf>
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	12 c0       	rjmp	.+36     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
			else
			sprintf(buffer, "%d    ", i2c.i2cReadNack());				/* Read & Nack to data */
     4de:	8a e9       	ldi	r24, 0x9A	; 154
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN9I2cMaster11i2cReadNackEv>
     4e6:	1f 92       	push	r1
     4e8:	8f 93       	push	r24
     4ea:	ff 92       	push	r15
     4ec:	ef 92       	push	r14
     4ee:	df 92       	push	r13
     4f0:	cf 92       	push	r12
     4f2:	0e 94 28 06 	call	0xc50	; 0xc50 <sprintf>
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
			lcd.LCD_String_xy(2, 13, buffer);
     502:	2a 2d       	mov	r18, r10
     504:	3b 2d       	mov	r19, r11
     506:	4d e0       	ldi	r20, 0x0D	; 13
     508:	62 e0       	ldi	r22, 0x02	; 2
     50a:	8b e9       	ldi	r24, 0x9B	; 155
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 c0 01 	call	0x380	; 0x380 <_ZN13Lcd_4_BitMode13LCD_String_xyEccPc>
     512:	9f ef       	ldi	r25, 0xFF	; 255
     514:	24 e3       	ldi	r18, 0x34	; 52
     516:	8c e0       	ldi	r24, 0x0C	; 12
     518:	91 50       	subi	r25, 0x01	; 1
     51a:	20 40       	sbci	r18, 0x00	; 0
     51c:	80 40       	sbci	r24, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
     520:	00 c0       	rjmp	.+0      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     522:	00 00       	nop
			_delay_ms(500);
		}
		lcd.LCD_String_xy(2, 0, "Receiving :       ");
		i2c.i2cReapetedStart(Slave_Read_Address);						/* Repeated Start with SLA+R */
		_delay_ms(5);
		for (uint8_t i = 0; i < count; i++)
     524:	1f 5f       	subi	r17, 0xFF	; 255
     526:	1a 30       	cpi	r17, 0x0A	; 10
     528:	29 f6       	brne	.-118    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
			else
			sprintf(buffer, "%d    ", i2c.i2cReadNack());				/* Read & Nack to data */
			lcd.LCD_String_xy(2, 13, buffer);
			_delay_ms(500);
		}
		i2c.i2cStop();													/* Stop I2C */
     52a:	8a e9       	ldi	r24, 0x9A	; 154
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_ZN9I2cMaster7i2cStopEv>
	lcd.LCD_Init();														/* Initialize LCD */
	i2c.i2cMasterInit(64);												/* Initialize I2C */
	
	lcd.LCD_String_xy(1, 0, "Master Device");
	
	while (1)
     532:	6e cf       	rjmp	.-292    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

00000534 <__subsf3>:
     534:	50 58       	subi	r21, 0x80	; 128

00000536 <__addsf3>:
     536:	bb 27       	eor	r27, r27
     538:	aa 27       	eor	r26, r26
     53a:	0e 94 b2 02 	call	0x564	; 0x564 <__addsf3x>
     53e:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_round>
     542:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_pscA>
     546:	38 f0       	brcs	.+14     	; 0x556 <__addsf3+0x20>
     548:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_pscB>
     54c:	20 f0       	brcs	.+8      	; 0x556 <__addsf3+0x20>
     54e:	39 f4       	brne	.+14     	; 0x55e <__addsf3+0x28>
     550:	9f 3f       	cpi	r25, 0xFF	; 255
     552:	19 f4       	brne	.+6      	; 0x55a <__addsf3+0x24>
     554:	26 f4       	brtc	.+8      	; 0x55e <__addsf3+0x28>
     556:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_nan>
     55a:	0e f4       	brtc	.+2      	; 0x55e <__addsf3+0x28>
     55c:	e0 95       	com	r30
     55e:	e7 fb       	bst	r30, 7
     560:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>

00000564 <__addsf3x>:
     564:	e9 2f       	mov	r30, r25
     566:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_split3>
     56a:	58 f3       	brcs	.-42     	; 0x542 <__addsf3+0xc>
     56c:	ba 17       	cp	r27, r26
     56e:	62 07       	cpc	r22, r18
     570:	73 07       	cpc	r23, r19
     572:	84 07       	cpc	r24, r20
     574:	95 07       	cpc	r25, r21
     576:	20 f0       	brcs	.+8      	; 0x580 <__addsf3x+0x1c>
     578:	79 f4       	brne	.+30     	; 0x598 <__addsf3x+0x34>
     57a:	a6 f5       	brtc	.+104    	; 0x5e4 <__addsf3x+0x80>
     57c:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_zero>
     580:	0e f4       	brtc	.+2      	; 0x584 <__addsf3x+0x20>
     582:	e0 95       	com	r30
     584:	0b 2e       	mov	r0, r27
     586:	ba 2f       	mov	r27, r26
     588:	a0 2d       	mov	r26, r0
     58a:	0b 01       	movw	r0, r22
     58c:	b9 01       	movw	r22, r18
     58e:	90 01       	movw	r18, r0
     590:	0c 01       	movw	r0, r24
     592:	ca 01       	movw	r24, r20
     594:	a0 01       	movw	r20, r0
     596:	11 24       	eor	r1, r1
     598:	ff 27       	eor	r31, r31
     59a:	59 1b       	sub	r21, r25
     59c:	99 f0       	breq	.+38     	; 0x5c4 <__addsf3x+0x60>
     59e:	59 3f       	cpi	r21, 0xF9	; 249
     5a0:	50 f4       	brcc	.+20     	; 0x5b6 <__addsf3x+0x52>
     5a2:	50 3e       	cpi	r21, 0xE0	; 224
     5a4:	68 f1       	brcs	.+90     	; 0x600 <__addsf3x+0x9c>
     5a6:	1a 16       	cp	r1, r26
     5a8:	f0 40       	sbci	r31, 0x00	; 0
     5aa:	a2 2f       	mov	r26, r18
     5ac:	23 2f       	mov	r18, r19
     5ae:	34 2f       	mov	r19, r20
     5b0:	44 27       	eor	r20, r20
     5b2:	58 5f       	subi	r21, 0xF8	; 248
     5b4:	f3 cf       	rjmp	.-26     	; 0x59c <__addsf3x+0x38>
     5b6:	46 95       	lsr	r20
     5b8:	37 95       	ror	r19
     5ba:	27 95       	ror	r18
     5bc:	a7 95       	ror	r26
     5be:	f0 40       	sbci	r31, 0x00	; 0
     5c0:	53 95       	inc	r21
     5c2:	c9 f7       	brne	.-14     	; 0x5b6 <__addsf3x+0x52>
     5c4:	7e f4       	brtc	.+30     	; 0x5e4 <__addsf3x+0x80>
     5c6:	1f 16       	cp	r1, r31
     5c8:	ba 0b       	sbc	r27, r26
     5ca:	62 0b       	sbc	r22, r18
     5cc:	73 0b       	sbc	r23, r19
     5ce:	84 0b       	sbc	r24, r20
     5d0:	ba f0       	brmi	.+46     	; 0x600 <__addsf3x+0x9c>
     5d2:	91 50       	subi	r25, 0x01	; 1
     5d4:	a1 f0       	breq	.+40     	; 0x5fe <__addsf3x+0x9a>
     5d6:	ff 0f       	add	r31, r31
     5d8:	bb 1f       	adc	r27, r27
     5da:	66 1f       	adc	r22, r22
     5dc:	77 1f       	adc	r23, r23
     5de:	88 1f       	adc	r24, r24
     5e0:	c2 f7       	brpl	.-16     	; 0x5d2 <__addsf3x+0x6e>
     5e2:	0e c0       	rjmp	.+28     	; 0x600 <__addsf3x+0x9c>
     5e4:	ba 0f       	add	r27, r26
     5e6:	62 1f       	adc	r22, r18
     5e8:	73 1f       	adc	r23, r19
     5ea:	84 1f       	adc	r24, r20
     5ec:	48 f4       	brcc	.+18     	; 0x600 <__addsf3x+0x9c>
     5ee:	87 95       	ror	r24
     5f0:	77 95       	ror	r23
     5f2:	67 95       	ror	r22
     5f4:	b7 95       	ror	r27
     5f6:	f7 95       	ror	r31
     5f8:	9e 3f       	cpi	r25, 0xFE	; 254
     5fa:	08 f0       	brcs	.+2      	; 0x5fe <__addsf3x+0x9a>
     5fc:	b0 cf       	rjmp	.-160    	; 0x55e <__addsf3+0x28>
     5fe:	93 95       	inc	r25
     600:	88 0f       	add	r24, r24
     602:	08 f0       	brcs	.+2      	; 0x606 <__addsf3x+0xa2>
     604:	99 27       	eor	r25, r25
     606:	ee 0f       	add	r30, r30
     608:	97 95       	ror	r25
     60a:	87 95       	ror	r24
     60c:	08 95       	ret

0000060e <__divsf3>:
     60e:	0e 94 1b 03 	call	0x636	; 0x636 <__divsf3x>
     612:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_round>
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_pscB>
     61a:	58 f0       	brcs	.+22     	; 0x632 <__divsf3+0x24>
     61c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_pscA>
     620:	40 f0       	brcs	.+16     	; 0x632 <__divsf3+0x24>
     622:	29 f4       	brne	.+10     	; 0x62e <__divsf3+0x20>
     624:	5f 3f       	cpi	r21, 0xFF	; 255
     626:	29 f0       	breq	.+10     	; 0x632 <__divsf3+0x24>
     628:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>
     62c:	51 11       	cpse	r21, r1
     62e:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_szero>
     632:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_nan>

00000636 <__divsf3x>:
     636:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_split3>
     63a:	68 f3       	brcs	.-38     	; 0x616 <__divsf3+0x8>

0000063c <__divsf3_pse>:
     63c:	99 23       	and	r25, r25
     63e:	b1 f3       	breq	.-20     	; 0x62c <__divsf3+0x1e>
     640:	55 23       	and	r21, r21
     642:	91 f3       	breq	.-28     	; 0x628 <__divsf3+0x1a>
     644:	95 1b       	sub	r25, r21
     646:	55 0b       	sbc	r21, r21
     648:	bb 27       	eor	r27, r27
     64a:	aa 27       	eor	r26, r26
     64c:	62 17       	cp	r22, r18
     64e:	73 07       	cpc	r23, r19
     650:	84 07       	cpc	r24, r20
     652:	38 f0       	brcs	.+14     	; 0x662 <__divsf3_pse+0x26>
     654:	9f 5f       	subi	r25, 0xFF	; 255
     656:	5f 4f       	sbci	r21, 0xFF	; 255
     658:	22 0f       	add	r18, r18
     65a:	33 1f       	adc	r19, r19
     65c:	44 1f       	adc	r20, r20
     65e:	aa 1f       	adc	r26, r26
     660:	a9 f3       	breq	.-22     	; 0x64c <__divsf3_pse+0x10>
     662:	35 d0       	rcall	.+106    	; 0x6ce <__divsf3_pse+0x92>
     664:	0e 2e       	mov	r0, r30
     666:	3a f0       	brmi	.+14     	; 0x676 <__divsf3_pse+0x3a>
     668:	e0 e8       	ldi	r30, 0x80	; 128
     66a:	32 d0       	rcall	.+100    	; 0x6d0 <__divsf3_pse+0x94>
     66c:	91 50       	subi	r25, 0x01	; 1
     66e:	50 40       	sbci	r21, 0x00	; 0
     670:	e6 95       	lsr	r30
     672:	00 1c       	adc	r0, r0
     674:	ca f7       	brpl	.-14     	; 0x668 <__divsf3_pse+0x2c>
     676:	2b d0       	rcall	.+86     	; 0x6ce <__divsf3_pse+0x92>
     678:	fe 2f       	mov	r31, r30
     67a:	29 d0       	rcall	.+82     	; 0x6ce <__divsf3_pse+0x92>
     67c:	66 0f       	add	r22, r22
     67e:	77 1f       	adc	r23, r23
     680:	88 1f       	adc	r24, r24
     682:	bb 1f       	adc	r27, r27
     684:	26 17       	cp	r18, r22
     686:	37 07       	cpc	r19, r23
     688:	48 07       	cpc	r20, r24
     68a:	ab 07       	cpc	r26, r27
     68c:	b0 e8       	ldi	r27, 0x80	; 128
     68e:	09 f0       	breq	.+2      	; 0x692 <__divsf3_pse+0x56>
     690:	bb 0b       	sbc	r27, r27
     692:	80 2d       	mov	r24, r0
     694:	bf 01       	movw	r22, r30
     696:	ff 27       	eor	r31, r31
     698:	93 58       	subi	r25, 0x83	; 131
     69a:	5f 4f       	sbci	r21, 0xFF	; 255
     69c:	3a f0       	brmi	.+14     	; 0x6ac <__divsf3_pse+0x70>
     69e:	9e 3f       	cpi	r25, 0xFE	; 254
     6a0:	51 05       	cpc	r21, r1
     6a2:	78 f0       	brcs	.+30     	; 0x6c2 <__divsf3_pse+0x86>
     6a4:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>
     6a8:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_szero>
     6ac:	5f 3f       	cpi	r21, 0xFF	; 255
     6ae:	e4 f3       	brlt	.-8      	; 0x6a8 <__divsf3_pse+0x6c>
     6b0:	98 3e       	cpi	r25, 0xE8	; 232
     6b2:	d4 f3       	brlt	.-12     	; 0x6a8 <__divsf3_pse+0x6c>
     6b4:	86 95       	lsr	r24
     6b6:	77 95       	ror	r23
     6b8:	67 95       	ror	r22
     6ba:	b7 95       	ror	r27
     6bc:	f7 95       	ror	r31
     6be:	9f 5f       	subi	r25, 0xFF	; 255
     6c0:	c9 f7       	brne	.-14     	; 0x6b4 <__divsf3_pse+0x78>
     6c2:	88 0f       	add	r24, r24
     6c4:	91 1d       	adc	r25, r1
     6c6:	96 95       	lsr	r25
     6c8:	87 95       	ror	r24
     6ca:	97 f9       	bld	r25, 7
     6cc:	08 95       	ret
     6ce:	e1 e0       	ldi	r30, 0x01	; 1
     6d0:	66 0f       	add	r22, r22
     6d2:	77 1f       	adc	r23, r23
     6d4:	88 1f       	adc	r24, r24
     6d6:	bb 1f       	adc	r27, r27
     6d8:	62 17       	cp	r22, r18
     6da:	73 07       	cpc	r23, r19
     6dc:	84 07       	cpc	r24, r20
     6de:	ba 07       	cpc	r27, r26
     6e0:	20 f0       	brcs	.+8      	; 0x6ea <__divsf3_pse+0xae>
     6e2:	62 1b       	sub	r22, r18
     6e4:	73 0b       	sbc	r23, r19
     6e6:	84 0b       	sbc	r24, r20
     6e8:	ba 0b       	sbc	r27, r26
     6ea:	ee 1f       	adc	r30, r30
     6ec:	88 f7       	brcc	.-30     	; 0x6d0 <__divsf3_pse+0x94>
     6ee:	e0 95       	com	r30
     6f0:	08 95       	ret

000006f2 <__fixunssfsi>:
     6f2:	0e 94 15 04 	call	0x82a	; 0x82a <__fp_splitA>
     6f6:	88 f0       	brcs	.+34     	; 0x71a <__fixunssfsi+0x28>
     6f8:	9f 57       	subi	r25, 0x7F	; 127
     6fa:	98 f0       	brcs	.+38     	; 0x722 <__fixunssfsi+0x30>
     6fc:	b9 2f       	mov	r27, r25
     6fe:	99 27       	eor	r25, r25
     700:	b7 51       	subi	r27, 0x17	; 23
     702:	b0 f0       	brcs	.+44     	; 0x730 <__fixunssfsi+0x3e>
     704:	e1 f0       	breq	.+56     	; 0x73e <__fixunssfsi+0x4c>
     706:	66 0f       	add	r22, r22
     708:	77 1f       	adc	r23, r23
     70a:	88 1f       	adc	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	1a f0       	brmi	.+6      	; 0x716 <__fixunssfsi+0x24>
     710:	ba 95       	dec	r27
     712:	c9 f7       	brne	.-14     	; 0x706 <__fixunssfsi+0x14>
     714:	14 c0       	rjmp	.+40     	; 0x73e <__fixunssfsi+0x4c>
     716:	b1 30       	cpi	r27, 0x01	; 1
     718:	91 f0       	breq	.+36     	; 0x73e <__fixunssfsi+0x4c>
     71a:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_zero>
     71e:	b1 e0       	ldi	r27, 0x01	; 1
     720:	08 95       	ret
     722:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_zero>
     726:	67 2f       	mov	r22, r23
     728:	78 2f       	mov	r23, r24
     72a:	88 27       	eor	r24, r24
     72c:	b8 5f       	subi	r27, 0xF8	; 248
     72e:	39 f0       	breq	.+14     	; 0x73e <__fixunssfsi+0x4c>
     730:	b9 3f       	cpi	r27, 0xF9	; 249
     732:	cc f3       	brlt	.-14     	; 0x726 <__fixunssfsi+0x34>
     734:	86 95       	lsr	r24
     736:	77 95       	ror	r23
     738:	67 95       	ror	r22
     73a:	b3 95       	inc	r27
     73c:	d9 f7       	brne	.-10     	; 0x734 <__fixunssfsi+0x42>
     73e:	3e f4       	brtc	.+14     	; 0x74e <__fixunssfsi+0x5c>
     740:	90 95       	com	r25
     742:	80 95       	com	r24
     744:	70 95       	com	r23
     746:	61 95       	neg	r22
     748:	7f 4f       	sbci	r23, 0xFF	; 255
     74a:	8f 4f       	sbci	r24, 0xFF	; 255
     74c:	9f 4f       	sbci	r25, 0xFF	; 255
     74e:	08 95       	ret

00000750 <__floatunsisf>:
     750:	e8 94       	clt
     752:	09 c0       	rjmp	.+18     	; 0x766 <__floatsisf+0x12>

00000754 <__floatsisf>:
     754:	97 fb       	bst	r25, 7
     756:	3e f4       	brtc	.+14     	; 0x766 <__floatsisf+0x12>
     758:	90 95       	com	r25
     75a:	80 95       	com	r24
     75c:	70 95       	com	r23
     75e:	61 95       	neg	r22
     760:	7f 4f       	sbci	r23, 0xFF	; 255
     762:	8f 4f       	sbci	r24, 0xFF	; 255
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	99 23       	and	r25, r25
     768:	a9 f0       	breq	.+42     	; 0x794 <__floatsisf+0x40>
     76a:	f9 2f       	mov	r31, r25
     76c:	96 e9       	ldi	r25, 0x96	; 150
     76e:	bb 27       	eor	r27, r27
     770:	93 95       	inc	r25
     772:	f6 95       	lsr	r31
     774:	87 95       	ror	r24
     776:	77 95       	ror	r23
     778:	67 95       	ror	r22
     77a:	b7 95       	ror	r27
     77c:	f1 11       	cpse	r31, r1
     77e:	f8 cf       	rjmp	.-16     	; 0x770 <__floatsisf+0x1c>
     780:	fa f4       	brpl	.+62     	; 0x7c0 <__floatsisf+0x6c>
     782:	bb 0f       	add	r27, r27
     784:	11 f4       	brne	.+4      	; 0x78a <__floatsisf+0x36>
     786:	60 ff       	sbrs	r22, 0
     788:	1b c0       	rjmp	.+54     	; 0x7c0 <__floatsisf+0x6c>
     78a:	6f 5f       	subi	r22, 0xFF	; 255
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	8f 4f       	sbci	r24, 0xFF	; 255
     790:	9f 4f       	sbci	r25, 0xFF	; 255
     792:	16 c0       	rjmp	.+44     	; 0x7c0 <__floatsisf+0x6c>
     794:	88 23       	and	r24, r24
     796:	11 f0       	breq	.+4      	; 0x79c <__floatsisf+0x48>
     798:	96 e9       	ldi	r25, 0x96	; 150
     79a:	11 c0       	rjmp	.+34     	; 0x7be <__floatsisf+0x6a>
     79c:	77 23       	and	r23, r23
     79e:	21 f0       	breq	.+8      	; 0x7a8 <__floatsisf+0x54>
     7a0:	9e e8       	ldi	r25, 0x8E	; 142
     7a2:	87 2f       	mov	r24, r23
     7a4:	76 2f       	mov	r23, r22
     7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <__floatsisf+0x5e>
     7a8:	66 23       	and	r22, r22
     7aa:	71 f0       	breq	.+28     	; 0x7c8 <__floatsisf+0x74>
     7ac:	96 e8       	ldi	r25, 0x86	; 134
     7ae:	86 2f       	mov	r24, r22
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	2a f0       	brmi	.+10     	; 0x7c0 <__floatsisf+0x6c>
     7b6:	9a 95       	dec	r25
     7b8:	66 0f       	add	r22, r22
     7ba:	77 1f       	adc	r23, r23
     7bc:	88 1f       	adc	r24, r24
     7be:	da f7       	brpl	.-10     	; 0x7b6 <__floatsisf+0x62>
     7c0:	88 0f       	add	r24, r24
     7c2:	96 95       	lsr	r25
     7c4:	87 95       	ror	r24
     7c6:	97 f9       	bld	r25, 7
     7c8:	08 95       	ret

000007ca <__fp_inf>:
     7ca:	97 f9       	bld	r25, 7
     7cc:	9f 67       	ori	r25, 0x7F	; 127
     7ce:	80 e8       	ldi	r24, 0x80	; 128
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	08 95       	ret

000007d6 <__fp_nan>:
     7d6:	9f ef       	ldi	r25, 0xFF	; 255
     7d8:	80 ec       	ldi	r24, 0xC0	; 192
     7da:	08 95       	ret

000007dc <__fp_pscA>:
     7dc:	00 24       	eor	r0, r0
     7de:	0a 94       	dec	r0
     7e0:	16 16       	cp	r1, r22
     7e2:	17 06       	cpc	r1, r23
     7e4:	18 06       	cpc	r1, r24
     7e6:	09 06       	cpc	r0, r25
     7e8:	08 95       	ret

000007ea <__fp_pscB>:
     7ea:	00 24       	eor	r0, r0
     7ec:	0a 94       	dec	r0
     7ee:	12 16       	cp	r1, r18
     7f0:	13 06       	cpc	r1, r19
     7f2:	14 06       	cpc	r1, r20
     7f4:	05 06       	cpc	r0, r21
     7f6:	08 95       	ret

000007f8 <__fp_round>:
     7f8:	09 2e       	mov	r0, r25
     7fa:	03 94       	inc	r0
     7fc:	00 0c       	add	r0, r0
     7fe:	11 f4       	brne	.+4      	; 0x804 <__fp_round+0xc>
     800:	88 23       	and	r24, r24
     802:	52 f0       	brmi	.+20     	; 0x818 <__fp_round+0x20>
     804:	bb 0f       	add	r27, r27
     806:	40 f4       	brcc	.+16     	; 0x818 <__fp_round+0x20>
     808:	bf 2b       	or	r27, r31
     80a:	11 f4       	brne	.+4      	; 0x810 <__fp_round+0x18>
     80c:	60 ff       	sbrs	r22, 0
     80e:	04 c0       	rjmp	.+8      	; 0x818 <__fp_round+0x20>
     810:	6f 5f       	subi	r22, 0xFF	; 255
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	8f 4f       	sbci	r24, 0xFF	; 255
     816:	9f 4f       	sbci	r25, 0xFF	; 255
     818:	08 95       	ret

0000081a <__fp_split3>:
     81a:	57 fd       	sbrc	r21, 7
     81c:	90 58       	subi	r25, 0x80	; 128
     81e:	44 0f       	add	r20, r20
     820:	55 1f       	adc	r21, r21
     822:	59 f0       	breq	.+22     	; 0x83a <__fp_splitA+0x10>
     824:	5f 3f       	cpi	r21, 0xFF	; 255
     826:	71 f0       	breq	.+28     	; 0x844 <__fp_splitA+0x1a>
     828:	47 95       	ror	r20

0000082a <__fp_splitA>:
     82a:	88 0f       	add	r24, r24
     82c:	97 fb       	bst	r25, 7
     82e:	99 1f       	adc	r25, r25
     830:	61 f0       	breq	.+24     	; 0x84a <__fp_splitA+0x20>
     832:	9f 3f       	cpi	r25, 0xFF	; 255
     834:	79 f0       	breq	.+30     	; 0x854 <__fp_splitA+0x2a>
     836:	87 95       	ror	r24
     838:	08 95       	ret
     83a:	12 16       	cp	r1, r18
     83c:	13 06       	cpc	r1, r19
     83e:	14 06       	cpc	r1, r20
     840:	55 1f       	adc	r21, r21
     842:	f2 cf       	rjmp	.-28     	; 0x828 <__fp_split3+0xe>
     844:	46 95       	lsr	r20
     846:	f1 df       	rcall	.-30     	; 0x82a <__fp_splitA>
     848:	08 c0       	rjmp	.+16     	; 0x85a <__fp_splitA+0x30>
     84a:	16 16       	cp	r1, r22
     84c:	17 06       	cpc	r1, r23
     84e:	18 06       	cpc	r1, r24
     850:	99 1f       	adc	r25, r25
     852:	f1 cf       	rjmp	.-30     	; 0x836 <__fp_splitA+0xc>
     854:	86 95       	lsr	r24
     856:	71 05       	cpc	r23, r1
     858:	61 05       	cpc	r22, r1
     85a:	08 94       	sec
     85c:	08 95       	ret

0000085e <__fp_zero>:
     85e:	e8 94       	clt

00000860 <__fp_szero>:
     860:	bb 27       	eor	r27, r27
     862:	66 27       	eor	r22, r22
     864:	77 27       	eor	r23, r23
     866:	cb 01       	movw	r24, r22
     868:	97 f9       	bld	r25, 7
     86a:	08 95       	ret

0000086c <pow>:
     86c:	fa 01       	movw	r30, r20
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	30 96       	adiw	r30, 0x00	; 0
     874:	21 05       	cpc	r18, r1
     876:	31 05       	cpc	r19, r1
     878:	a1 f1       	breq	.+104    	; 0x8e2 <pow+0x76>
     87a:	61 15       	cp	r22, r1
     87c:	71 05       	cpc	r23, r1
     87e:	61 f4       	brne	.+24     	; 0x898 <pow+0x2c>
     880:	80 38       	cpi	r24, 0x80	; 128
     882:	bf e3       	ldi	r27, 0x3F	; 63
     884:	9b 07       	cpc	r25, r27
     886:	49 f1       	breq	.+82     	; 0x8da <pow+0x6e>
     888:	68 94       	set
     88a:	90 38       	cpi	r25, 0x80	; 128
     88c:	81 05       	cpc	r24, r1
     88e:	61 f0       	breq	.+24     	; 0x8a8 <pow+0x3c>
     890:	80 38       	cpi	r24, 0x80	; 128
     892:	bf ef       	ldi	r27, 0xFF	; 255
     894:	9b 07       	cpc	r25, r27
     896:	41 f0       	breq	.+16     	; 0x8a8 <pow+0x3c>
     898:	99 23       	and	r25, r25
     89a:	4a f5       	brpl	.+82     	; 0x8ee <pow+0x82>
     89c:	ff 3f       	cpi	r31, 0xFF	; 255
     89e:	e1 05       	cpc	r30, r1
     8a0:	31 05       	cpc	r19, r1
     8a2:	21 05       	cpc	r18, r1
     8a4:	19 f1       	breq	.+70     	; 0x8ec <pow+0x80>
     8a6:	e8 94       	clt
     8a8:	08 94       	sec
     8aa:	e7 95       	ror	r30
     8ac:	d9 01       	movw	r26, r18
     8ae:	aa 23       	and	r26, r26
     8b0:	29 f4       	brne	.+10     	; 0x8bc <pow+0x50>
     8b2:	ab 2f       	mov	r26, r27
     8b4:	be 2f       	mov	r27, r30
     8b6:	f8 5f       	subi	r31, 0xF8	; 248
     8b8:	d0 f3       	brcs	.-12     	; 0x8ae <pow+0x42>
     8ba:	10 c0       	rjmp	.+32     	; 0x8dc <pow+0x70>
     8bc:	ff 5f       	subi	r31, 0xFF	; 255
     8be:	70 f4       	brcc	.+28     	; 0x8dc <pow+0x70>
     8c0:	a6 95       	lsr	r26
     8c2:	e0 f7       	brcc	.-8      	; 0x8bc <pow+0x50>
     8c4:	f7 39       	cpi	r31, 0x97	; 151
     8c6:	50 f0       	brcs	.+20     	; 0x8dc <pow+0x70>
     8c8:	19 f0       	breq	.+6      	; 0x8d0 <pow+0x64>
     8ca:	ff 3a       	cpi	r31, 0xAF	; 175
     8cc:	38 f4       	brcc	.+14     	; 0x8dc <pow+0x70>
     8ce:	9f 77       	andi	r25, 0x7F	; 127
     8d0:	9f 93       	push	r25
     8d2:	0d d0       	rcall	.+26     	; 0x8ee <pow+0x82>
     8d4:	0f 90       	pop	r0
     8d6:	07 fc       	sbrc	r0, 7
     8d8:	90 58       	subi	r25, 0x80	; 128
     8da:	08 95       	ret
     8dc:	46 f0       	brts	.+16     	; 0x8ee <pow+0x82>
     8de:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_nan>
     8e2:	60 e0       	ldi	r22, 0x00	; 0
     8e4:	70 e0       	ldi	r23, 0x00	; 0
     8e6:	80 e8       	ldi	r24, 0x80	; 128
     8e8:	9f e3       	ldi	r25, 0x3F	; 63
     8ea:	08 95       	ret
     8ec:	4f e7       	ldi	r20, 0x7F	; 127
     8ee:	9f 77       	andi	r25, 0x7F	; 127
     8f0:	5f 93       	push	r21
     8f2:	4f 93       	push	r20
     8f4:	3f 93       	push	r19
     8f6:	2f 93       	push	r18
     8f8:	0e 94 31 05 	call	0xa62	; 0xa62 <log>
     8fc:	2f 91       	pop	r18
     8fe:	3f 91       	pop	r19
     900:	4f 91       	pop	r20
     902:	5f 91       	pop	r21
     904:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__mulsf3>
     908:	0c 94 8e 04 	jmp	0x91c	; 0x91c <exp>
     90c:	29 f4       	brne	.+10     	; 0x918 <pow+0xac>
     90e:	16 f0       	brts	.+4      	; 0x914 <pow+0xa8>
     910:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>
     914:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__fp_zero>
     918:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_nan>

0000091c <exp>:
     91c:	0e 94 15 04 	call	0x82a	; 0x82a <__fp_splitA>
     920:	a8 f3       	brcs	.-22     	; 0x90c <pow+0xa0>
     922:	96 38       	cpi	r25, 0x86	; 134
     924:	a0 f7       	brcc	.-24     	; 0x90e <pow+0xa2>
     926:	07 f8       	bld	r0, 7
     928:	0f 92       	push	r0
     92a:	e8 94       	clt
     92c:	2b e3       	ldi	r18, 0x3B	; 59
     92e:	3a ea       	ldi	r19, 0xAA	; 170
     930:	48 eb       	ldi	r20, 0xB8	; 184
     932:	5f e7       	ldi	r21, 0x7F	; 127
     934:	0e 94 c3 05 	call	0xb86	; 0xb86 <__mulsf3_pse>
     938:	0f 92       	push	r0
     93a:	0f 92       	push	r0
     93c:	0f 92       	push	r0
     93e:	4d b7       	in	r20, 0x3d	; 61
     940:	5e b7       	in	r21, 0x3e	; 62
     942:	0f 92       	push	r0
     944:	0e 94 79 05 	call	0xaf2	; 0xaf2 <modf>
     948:	e4 e5       	ldi	r30, 0x54	; 84
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_powser>
     950:	4f 91       	pop	r20
     952:	5f 91       	pop	r21
     954:	ef 91       	pop	r30
     956:	ff 91       	pop	r31
     958:	e5 95       	asr	r30
     95a:	ee 1f       	adc	r30, r30
     95c:	ff 1f       	adc	r31, r31
     95e:	49 f0       	breq	.+18     	; 0x972 <exp+0x56>
     960:	fe 57       	subi	r31, 0x7E	; 126
     962:	e0 68       	ori	r30, 0x80	; 128
     964:	44 27       	eor	r20, r20
     966:	ee 0f       	add	r30, r30
     968:	44 1f       	adc	r20, r20
     96a:	fa 95       	dec	r31
     96c:	e1 f7       	brne	.-8      	; 0x966 <exp+0x4a>
     96e:	41 95       	neg	r20
     970:	55 0b       	sbc	r21, r21
     972:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <ldexp>
     976:	0f 90       	pop	r0
     978:	07 fe       	sbrs	r0, 7
     97a:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <inverse>
     97e:	08 95       	ret

00000980 <__fp_powser>:
     980:	df 93       	push	r29
     982:	cf 93       	push	r28
     984:	1f 93       	push	r17
     986:	0f 93       	push	r16
     988:	ff 92       	push	r15
     98a:	ef 92       	push	r14
     98c:	df 92       	push	r13
     98e:	7b 01       	movw	r14, r22
     990:	8c 01       	movw	r16, r24
     992:	68 94       	set
     994:	06 c0       	rjmp	.+12     	; 0x9a2 <__fp_powser+0x22>
     996:	da 2e       	mov	r13, r26
     998:	ef 01       	movw	r28, r30
     99a:	0e 94 c0 05 	call	0xb80	; 0xb80 <__mulsf3x>
     99e:	fe 01       	movw	r30, r28
     9a0:	e8 94       	clt
     9a2:	a5 91       	lpm	r26, Z+
     9a4:	25 91       	lpm	r18, Z+
     9a6:	35 91       	lpm	r19, Z+
     9a8:	45 91       	lpm	r20, Z+
     9aa:	55 91       	lpm	r21, Z+
     9ac:	a6 f3       	brts	.-24     	; 0x996 <__fp_powser+0x16>
     9ae:	ef 01       	movw	r28, r30
     9b0:	0e 94 b2 02 	call	0x564	; 0x564 <__addsf3x>
     9b4:	fe 01       	movw	r30, r28
     9b6:	97 01       	movw	r18, r14
     9b8:	a8 01       	movw	r20, r16
     9ba:	da 94       	dec	r13
     9bc:	69 f7       	brne	.-38     	; 0x998 <__fp_powser+0x18>
     9be:	df 90       	pop	r13
     9c0:	ef 90       	pop	r14
     9c2:	ff 90       	pop	r15
     9c4:	0f 91       	pop	r16
     9c6:	1f 91       	pop	r17
     9c8:	cf 91       	pop	r28
     9ca:	df 91       	pop	r29
     9cc:	08 95       	ret

000009ce <inverse>:
     9ce:	9b 01       	movw	r18, r22
     9d0:	ac 01       	movw	r20, r24
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	80 e8       	ldi	r24, 0x80	; 128
     9d8:	9f e3       	ldi	r25, 0x3F	; 63
     9da:	0c 94 07 03 	jmp	0x60e	; 0x60e <__divsf3>
     9de:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>
     9e2:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_mpack>

000009e6 <ldexp>:
     9e6:	0e 94 15 04 	call	0x82a	; 0x82a <__fp_splitA>
     9ea:	d8 f3       	brcs	.-10     	; 0x9e2 <inverse+0x14>
     9ec:	99 23       	and	r25, r25
     9ee:	c9 f3       	breq	.-14     	; 0x9e2 <inverse+0x14>
     9f0:	94 0f       	add	r25, r20
     9f2:	51 1d       	adc	r21, r1
     9f4:	a3 f3       	brvs	.-24     	; 0x9de <inverse+0x10>
     9f6:	91 50       	subi	r25, 0x01	; 1
     9f8:	50 40       	sbci	r21, 0x00	; 0
     9fa:	94 f0       	brlt	.+36     	; 0xa20 <ldexp+0x3a>
     9fc:	59 f0       	breq	.+22     	; 0xa14 <ldexp+0x2e>
     9fe:	88 23       	and	r24, r24
     a00:	32 f0       	brmi	.+12     	; 0xa0e <ldexp+0x28>
     a02:	66 0f       	add	r22, r22
     a04:	77 1f       	adc	r23, r23
     a06:	88 1f       	adc	r24, r24
     a08:	91 50       	subi	r25, 0x01	; 1
     a0a:	50 40       	sbci	r21, 0x00	; 0
     a0c:	c1 f7       	brne	.-16     	; 0x9fe <ldexp+0x18>
     a0e:	9e 3f       	cpi	r25, 0xFE	; 254
     a10:	51 05       	cpc	r21, r1
     a12:	2c f7       	brge	.-54     	; 0x9de <inverse+0x10>
     a14:	88 0f       	add	r24, r24
     a16:	91 1d       	adc	r25, r1
     a18:	96 95       	lsr	r25
     a1a:	87 95       	ror	r24
     a1c:	97 f9       	bld	r25, 7
     a1e:	08 95       	ret
     a20:	5f 3f       	cpi	r21, 0xFF	; 255
     a22:	ac f0       	brlt	.+42     	; 0xa4e <ldexp+0x68>
     a24:	98 3e       	cpi	r25, 0xE8	; 232
     a26:	9c f0       	brlt	.+38     	; 0xa4e <ldexp+0x68>
     a28:	bb 27       	eor	r27, r27
     a2a:	86 95       	lsr	r24
     a2c:	77 95       	ror	r23
     a2e:	67 95       	ror	r22
     a30:	b7 95       	ror	r27
     a32:	08 f4       	brcc	.+2      	; 0xa36 <ldexp+0x50>
     a34:	b1 60       	ori	r27, 0x01	; 1
     a36:	93 95       	inc	r25
     a38:	c1 f7       	brne	.-16     	; 0xa2a <ldexp+0x44>
     a3a:	bb 0f       	add	r27, r27
     a3c:	58 f7       	brcc	.-42     	; 0xa14 <ldexp+0x2e>
     a3e:	11 f4       	brne	.+4      	; 0xa44 <ldexp+0x5e>
     a40:	60 ff       	sbrs	r22, 0
     a42:	e8 cf       	rjmp	.-48     	; 0xa14 <ldexp+0x2e>
     a44:	6f 5f       	subi	r22, 0xFF	; 255
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	8f 4f       	sbci	r24, 0xFF	; 255
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	e3 cf       	rjmp	.-58     	; 0xa14 <ldexp+0x2e>
     a4e:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_szero>
     a52:	16 f0       	brts	.+4      	; 0xa58 <ldexp+0x72>
     a54:	0c 94 1a 06 	jmp	0xc34	; 0xc34 <__fp_mpack>
     a58:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_nan>
     a5c:	68 94       	set
     a5e:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>

00000a62 <log>:
     a62:	0e 94 15 04 	call	0x82a	; 0x82a <__fp_splitA>
     a66:	a8 f3       	brcs	.-22     	; 0xa52 <ldexp+0x6c>
     a68:	99 23       	and	r25, r25
     a6a:	c1 f3       	breq	.-16     	; 0xa5c <ldexp+0x76>
     a6c:	ae f3       	brts	.-22     	; 0xa58 <ldexp+0x72>
     a6e:	df 93       	push	r29
     a70:	cf 93       	push	r28
     a72:	1f 93       	push	r17
     a74:	0f 93       	push	r16
     a76:	ff 92       	push	r15
     a78:	c9 2f       	mov	r28, r25
     a7a:	dd 27       	eor	r29, r29
     a7c:	88 23       	and	r24, r24
     a7e:	2a f0       	brmi	.+10     	; 0xa8a <log+0x28>
     a80:	21 97       	sbiw	r28, 0x01	; 1
     a82:	66 0f       	add	r22, r22
     a84:	77 1f       	adc	r23, r23
     a86:	88 1f       	adc	r24, r24
     a88:	da f7       	brpl	.-10     	; 0xa80 <log+0x1e>
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e8       	ldi	r20, 0x80	; 128
     a90:	5f eb       	ldi	r21, 0xBF	; 191
     a92:	9f e3       	ldi	r25, 0x3F	; 63
     a94:	88 39       	cpi	r24, 0x98	; 152
     a96:	20 f0       	brcs	.+8      	; 0xaa0 <log+0x3e>
     a98:	80 3e       	cpi	r24, 0xE0	; 224
     a9a:	38 f0       	brcs	.+14     	; 0xaaa <log+0x48>
     a9c:	21 96       	adiw	r28, 0x01	; 1
     a9e:	8f 77       	andi	r24, 0x7F	; 127
     aa0:	0e 94 9b 02 	call	0x536	; 0x536 <__addsf3>
     aa4:	ec e7       	ldi	r30, 0x7C	; 124
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <log+0x50>
     aaa:	0e 94 9b 02 	call	0x536	; 0x536 <__addsf3>
     aae:	e9 ea       	ldi	r30, 0xA9	; 169
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	0e 94 c0 04 	call	0x980	; 0x980 <__fp_powser>
     ab6:	8b 01       	movw	r16, r22
     ab8:	be 01       	movw	r22, r28
     aba:	ec 01       	movw	r28, r24
     abc:	fb 2e       	mov	r15, r27
     abe:	6f 57       	subi	r22, 0x7F	; 127
     ac0:	71 09       	sbc	r23, r1
     ac2:	75 95       	asr	r23
     ac4:	77 1f       	adc	r23, r23
     ac6:	88 0b       	sbc	r24, r24
     ac8:	99 0b       	sbc	r25, r25
     aca:	0e 94 aa 03 	call	0x754	; 0x754 <__floatsisf>
     ace:	28 e1       	ldi	r18, 0x18	; 24
     ad0:	32 e7       	ldi	r19, 0x72	; 114
     ad2:	41 e3       	ldi	r20, 0x31	; 49
     ad4:	5f e3       	ldi	r21, 0x3F	; 63
     ad6:	0e 94 c0 05 	call	0xb80	; 0xb80 <__mulsf3x>
     ada:	af 2d       	mov	r26, r15
     adc:	98 01       	movw	r18, r16
     ade:	ae 01       	movw	r20, r28
     ae0:	ff 90       	pop	r15
     ae2:	0f 91       	pop	r16
     ae4:	1f 91       	pop	r17
     ae6:	cf 91       	pop	r28
     ae8:	df 91       	pop	r29
     aea:	0e 94 b2 02 	call	0x564	; 0x564 <__addsf3x>
     aee:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_round>

00000af2 <modf>:
     af2:	fa 01       	movw	r30, r20
     af4:	dc 01       	movw	r26, r24
     af6:	aa 0f       	add	r26, r26
     af8:	bb 1f       	adc	r27, r27
     afa:	9b 01       	movw	r18, r22
     afc:	ac 01       	movw	r20, r24
     afe:	bf 57       	subi	r27, 0x7F	; 127
     b00:	28 f4       	brcc	.+10     	; 0xb0c <modf+0x1a>
     b02:	22 27       	eor	r18, r18
     b04:	33 27       	eor	r19, r19
     b06:	44 27       	eor	r20, r20
     b08:	50 78       	andi	r21, 0x80	; 128
     b0a:	20 c0       	rjmp	.+64     	; 0xb4c <modf+0x5a>
     b0c:	b7 51       	subi	r27, 0x17	; 23
     b0e:	90 f4       	brcc	.+36     	; 0xb34 <modf+0x42>
     b10:	ab 2f       	mov	r26, r27
     b12:	00 24       	eor	r0, r0
     b14:	46 95       	lsr	r20
     b16:	37 95       	ror	r19
     b18:	27 95       	ror	r18
     b1a:	01 1c       	adc	r0, r1
     b1c:	a3 95       	inc	r26
     b1e:	d2 f3       	brmi	.-12     	; 0xb14 <modf+0x22>
     b20:	00 20       	and	r0, r0
     b22:	71 f0       	breq	.+28     	; 0xb40 <modf+0x4e>
     b24:	22 0f       	add	r18, r18
     b26:	33 1f       	adc	r19, r19
     b28:	44 1f       	adc	r20, r20
     b2a:	b3 95       	inc	r27
     b2c:	da f3       	brmi	.-10     	; 0xb24 <modf+0x32>
     b2e:	0e d0       	rcall	.+28     	; 0xb4c <modf+0x5a>
     b30:	0c 94 9a 02 	jmp	0x534	; 0x534 <__subsf3>
     b34:	61 30       	cpi	r22, 0x01	; 1
     b36:	71 05       	cpc	r23, r1
     b38:	a0 e8       	ldi	r26, 0x80	; 128
     b3a:	8a 07       	cpc	r24, r26
     b3c:	b9 46       	sbci	r27, 0x69	; 105
     b3e:	30 f4       	brcc	.+12     	; 0xb4c <modf+0x5a>
     b40:	9b 01       	movw	r18, r22
     b42:	ac 01       	movw	r20, r24
     b44:	66 27       	eor	r22, r22
     b46:	77 27       	eor	r23, r23
     b48:	88 27       	eor	r24, r24
     b4a:	90 78       	andi	r25, 0x80	; 128
     b4c:	30 96       	adiw	r30, 0x00	; 0
     b4e:	21 f0       	breq	.+8      	; 0xb58 <modf+0x66>
     b50:	20 83       	st	Z, r18
     b52:	31 83       	std	Z+1, r19	; 0x01
     b54:	42 83       	std	Z+2, r20	; 0x02
     b56:	53 83       	std	Z+3, r21	; 0x03
     b58:	08 95       	ret

00000b5a <__mulsf3>:
     b5a:	0e 94 c0 05 	call	0xb80	; 0xb80 <__mulsf3x>
     b5e:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_round>
     b62:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fp_pscA>
     b66:	38 f0       	brcs	.+14     	; 0xb76 <__mulsf3+0x1c>
     b68:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_pscB>
     b6c:	20 f0       	brcs	.+8      	; 0xb76 <__mulsf3+0x1c>
     b6e:	95 23       	and	r25, r21
     b70:	11 f0       	breq	.+4      	; 0xb76 <__mulsf3+0x1c>
     b72:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>
     b76:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_nan>
     b7a:	11 24       	eor	r1, r1
     b7c:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_szero>

00000b80 <__mulsf3x>:
     b80:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_split3>
     b84:	70 f3       	brcs	.-36     	; 0xb62 <__mulsf3+0x8>

00000b86 <__mulsf3_pse>:
     b86:	95 9f       	mul	r25, r21
     b88:	c1 f3       	breq	.-16     	; 0xb7a <__mulsf3+0x20>
     b8a:	95 0f       	add	r25, r21
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	55 1f       	adc	r21, r21
     b90:	62 9f       	mul	r22, r18
     b92:	f0 01       	movw	r30, r0
     b94:	72 9f       	mul	r23, r18
     b96:	bb 27       	eor	r27, r27
     b98:	f0 0d       	add	r31, r0
     b9a:	b1 1d       	adc	r27, r1
     b9c:	63 9f       	mul	r22, r19
     b9e:	aa 27       	eor	r26, r26
     ba0:	f0 0d       	add	r31, r0
     ba2:	b1 1d       	adc	r27, r1
     ba4:	aa 1f       	adc	r26, r26
     ba6:	64 9f       	mul	r22, r20
     ba8:	66 27       	eor	r22, r22
     baa:	b0 0d       	add	r27, r0
     bac:	a1 1d       	adc	r26, r1
     bae:	66 1f       	adc	r22, r22
     bb0:	82 9f       	mul	r24, r18
     bb2:	22 27       	eor	r18, r18
     bb4:	b0 0d       	add	r27, r0
     bb6:	a1 1d       	adc	r26, r1
     bb8:	62 1f       	adc	r22, r18
     bba:	73 9f       	mul	r23, r19
     bbc:	b0 0d       	add	r27, r0
     bbe:	a1 1d       	adc	r26, r1
     bc0:	62 1f       	adc	r22, r18
     bc2:	83 9f       	mul	r24, r19
     bc4:	a0 0d       	add	r26, r0
     bc6:	61 1d       	adc	r22, r1
     bc8:	22 1f       	adc	r18, r18
     bca:	74 9f       	mul	r23, r20
     bcc:	33 27       	eor	r19, r19
     bce:	a0 0d       	add	r26, r0
     bd0:	61 1d       	adc	r22, r1
     bd2:	23 1f       	adc	r18, r19
     bd4:	84 9f       	mul	r24, r20
     bd6:	60 0d       	add	r22, r0
     bd8:	21 1d       	adc	r18, r1
     bda:	82 2f       	mov	r24, r18
     bdc:	76 2f       	mov	r23, r22
     bde:	6a 2f       	mov	r22, r26
     be0:	11 24       	eor	r1, r1
     be2:	9f 57       	subi	r25, 0x7F	; 127
     be4:	50 40       	sbci	r21, 0x00	; 0
     be6:	9a f0       	brmi	.+38     	; 0xc0e <__mulsf3_pse+0x88>
     be8:	f1 f0       	breq	.+60     	; 0xc26 <__mulsf3_pse+0xa0>
     bea:	88 23       	and	r24, r24
     bec:	4a f0       	brmi	.+18     	; 0xc00 <__mulsf3_pse+0x7a>
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	bb 1f       	adc	r27, r27
     bf4:	66 1f       	adc	r22, r22
     bf6:	77 1f       	adc	r23, r23
     bf8:	88 1f       	adc	r24, r24
     bfa:	91 50       	subi	r25, 0x01	; 1
     bfc:	50 40       	sbci	r21, 0x00	; 0
     bfe:	a9 f7       	brne	.-22     	; 0xbea <__mulsf3_pse+0x64>
     c00:	9e 3f       	cpi	r25, 0xFE	; 254
     c02:	51 05       	cpc	r21, r1
     c04:	80 f0       	brcs	.+32     	; 0xc26 <__mulsf3_pse+0xa0>
     c06:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_inf>
     c0a:	0c 94 30 04 	jmp	0x860	; 0x860 <__fp_szero>
     c0e:	5f 3f       	cpi	r21, 0xFF	; 255
     c10:	e4 f3       	brlt	.-8      	; 0xc0a <__mulsf3_pse+0x84>
     c12:	98 3e       	cpi	r25, 0xE8	; 232
     c14:	d4 f3       	brlt	.-12     	; 0xc0a <__mulsf3_pse+0x84>
     c16:	86 95       	lsr	r24
     c18:	77 95       	ror	r23
     c1a:	67 95       	ror	r22
     c1c:	b7 95       	ror	r27
     c1e:	f7 95       	ror	r31
     c20:	e7 95       	ror	r30
     c22:	9f 5f       	subi	r25, 0xFF	; 255
     c24:	c1 f7       	brne	.-16     	; 0xc16 <__mulsf3_pse+0x90>
     c26:	fe 2b       	or	r31, r30
     c28:	88 0f       	add	r24, r24
     c2a:	91 1d       	adc	r25, r1
     c2c:	96 95       	lsr	r25
     c2e:	87 95       	ror	r24
     c30:	97 f9       	bld	r25, 7
     c32:	08 95       	ret

00000c34 <__fp_mpack>:
     c34:	9f 3f       	cpi	r25, 0xFF	; 255
     c36:	31 f0       	breq	.+12     	; 0xc44 <__fp_mpack_finite+0xc>

00000c38 <__fp_mpack_finite>:
     c38:	91 50       	subi	r25, 0x01	; 1
     c3a:	20 f4       	brcc	.+8      	; 0xc44 <__fp_mpack_finite+0xc>
     c3c:	87 95       	ror	r24
     c3e:	77 95       	ror	r23
     c40:	67 95       	ror	r22
     c42:	b7 95       	ror	r27
     c44:	88 0f       	add	r24, r24
     c46:	91 1d       	adc	r25, r1
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	97 f9       	bld	r25, 7
     c4e:	08 95       	ret

00000c50 <sprintf>:
     c50:	ae e0       	ldi	r26, 0x0E	; 14
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	ee e2       	ldi	r30, 0x2E	; 46
     c56:	f6 e0       	ldi	r31, 0x06	; 6
     c58:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__prologue_saves__+0x1c>
     c5c:	0d 89       	ldd	r16, Y+21	; 0x15
     c5e:	1e 89       	ldd	r17, Y+22	; 0x16
     c60:	86 e0       	ldi	r24, 0x06	; 6
     c62:	8c 83       	std	Y+4, r24	; 0x04
     c64:	1a 83       	std	Y+2, r17	; 0x02
     c66:	09 83       	std	Y+1, r16	; 0x01
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	9f e7       	ldi	r25, 0x7F	; 127
     c6c:	9e 83       	std	Y+6, r25	; 0x06
     c6e:	8d 83       	std	Y+5, r24	; 0x05
     c70:	ae 01       	movw	r20, r28
     c72:	47 5e       	subi	r20, 0xE7	; 231
     c74:	5f 4f       	sbci	r21, 0xFF	; 255
     c76:	6f 89       	ldd	r22, Y+23	; 0x17
     c78:	78 8d       	ldd	r23, Y+24	; 0x18
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	0e 94 4a 06 	call	0xc94	; 0xc94 <vfprintf>
     c82:	ef 81       	ldd	r30, Y+7	; 0x07
     c84:	f8 85       	ldd	r31, Y+8	; 0x08
     c86:	e0 0f       	add	r30, r16
     c88:	f1 1f       	adc	r31, r17
     c8a:	10 82       	st	Z, r1
     c8c:	2e 96       	adiw	r28, 0x0e	; 14
     c8e:	e4 e0       	ldi	r30, 0x04	; 4
     c90:	0c 94 05 09 	jmp	0x120a	; 0x120a <__epilogue_restores__+0x1c>

00000c94 <vfprintf>:
     c94:	ab e0       	ldi	r26, 0x0B	; 11
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e0 e5       	ldi	r30, 0x50	; 80
     c9a:	f6 e0       	ldi	r31, 0x06	; 6
     c9c:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__prologue_saves__>
     ca0:	6c 01       	movw	r12, r24
     ca2:	7b 01       	movw	r14, r22
     ca4:	8a 01       	movw	r16, r20
     ca6:	fc 01       	movw	r30, r24
     ca8:	17 82       	std	Z+7, r1	; 0x07
     caa:	16 82       	std	Z+6, r1	; 0x06
     cac:	83 81       	ldd	r24, Z+3	; 0x03
     cae:	81 ff       	sbrs	r24, 1
     cb0:	cc c1       	rjmp	.+920    	; 0x104a <vfprintf+0x3b6>
     cb2:	ce 01       	movw	r24, r28
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	3c 01       	movw	r6, r24
     cb8:	f6 01       	movw	r30, r12
     cba:	93 81       	ldd	r25, Z+3	; 0x03
     cbc:	f7 01       	movw	r30, r14
     cbe:	93 fd       	sbrc	r25, 3
     cc0:	85 91       	lpm	r24, Z+
     cc2:	93 ff       	sbrs	r25, 3
     cc4:	81 91       	ld	r24, Z+
     cc6:	7f 01       	movw	r14, r30
     cc8:	88 23       	and	r24, r24
     cca:	09 f4       	brne	.+2      	; 0xcce <vfprintf+0x3a>
     ccc:	ba c1       	rjmp	.+884    	; 0x1042 <vfprintf+0x3ae>
     cce:	85 32       	cpi	r24, 0x25	; 37
     cd0:	39 f4       	brne	.+14     	; 0xce0 <vfprintf+0x4c>
     cd2:	93 fd       	sbrc	r25, 3
     cd4:	85 91       	lpm	r24, Z+
     cd6:	93 ff       	sbrs	r25, 3
     cd8:	81 91       	ld	r24, Z+
     cda:	7f 01       	movw	r14, r30
     cdc:	85 32       	cpi	r24, 0x25	; 37
     cde:	29 f4       	brne	.+10     	; 0xcea <vfprintf+0x56>
     ce0:	b6 01       	movw	r22, r12
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
     ce8:	e7 cf       	rjmp	.-50     	; 0xcb8 <vfprintf+0x24>
     cea:	91 2c       	mov	r9, r1
     cec:	21 2c       	mov	r2, r1
     cee:	31 2c       	mov	r3, r1
     cf0:	ff e1       	ldi	r31, 0x1F	; 31
     cf2:	f3 15       	cp	r31, r3
     cf4:	d8 f0       	brcs	.+54     	; 0xd2c <vfprintf+0x98>
     cf6:	8b 32       	cpi	r24, 0x2B	; 43
     cf8:	79 f0       	breq	.+30     	; 0xd18 <vfprintf+0x84>
     cfa:	38 f4       	brcc	.+14     	; 0xd0a <vfprintf+0x76>
     cfc:	80 32       	cpi	r24, 0x20	; 32
     cfe:	79 f0       	breq	.+30     	; 0xd1e <vfprintf+0x8a>
     d00:	83 32       	cpi	r24, 0x23	; 35
     d02:	a1 f4       	brne	.+40     	; 0xd2c <vfprintf+0x98>
     d04:	23 2d       	mov	r18, r3
     d06:	20 61       	ori	r18, 0x10	; 16
     d08:	1d c0       	rjmp	.+58     	; 0xd44 <vfprintf+0xb0>
     d0a:	8d 32       	cpi	r24, 0x2D	; 45
     d0c:	61 f0       	breq	.+24     	; 0xd26 <vfprintf+0x92>
     d0e:	80 33       	cpi	r24, 0x30	; 48
     d10:	69 f4       	brne	.+26     	; 0xd2c <vfprintf+0x98>
     d12:	23 2d       	mov	r18, r3
     d14:	21 60       	ori	r18, 0x01	; 1
     d16:	16 c0       	rjmp	.+44     	; 0xd44 <vfprintf+0xb0>
     d18:	83 2d       	mov	r24, r3
     d1a:	82 60       	ori	r24, 0x02	; 2
     d1c:	38 2e       	mov	r3, r24
     d1e:	e3 2d       	mov	r30, r3
     d20:	e4 60       	ori	r30, 0x04	; 4
     d22:	3e 2e       	mov	r3, r30
     d24:	2a c0       	rjmp	.+84     	; 0xd7a <vfprintf+0xe6>
     d26:	f3 2d       	mov	r31, r3
     d28:	f8 60       	ori	r31, 0x08	; 8
     d2a:	1d c0       	rjmp	.+58     	; 0xd66 <vfprintf+0xd2>
     d2c:	37 fc       	sbrc	r3, 7
     d2e:	2d c0       	rjmp	.+90     	; 0xd8a <vfprintf+0xf6>
     d30:	20 ed       	ldi	r18, 0xD0	; 208
     d32:	28 0f       	add	r18, r24
     d34:	2a 30       	cpi	r18, 0x0A	; 10
     d36:	40 f0       	brcs	.+16     	; 0xd48 <vfprintf+0xb4>
     d38:	8e 32       	cpi	r24, 0x2E	; 46
     d3a:	b9 f4       	brne	.+46     	; 0xd6a <vfprintf+0xd6>
     d3c:	36 fc       	sbrc	r3, 6
     d3e:	81 c1       	rjmp	.+770    	; 0x1042 <vfprintf+0x3ae>
     d40:	23 2d       	mov	r18, r3
     d42:	20 64       	ori	r18, 0x40	; 64
     d44:	32 2e       	mov	r3, r18
     d46:	19 c0       	rjmp	.+50     	; 0xd7a <vfprintf+0xe6>
     d48:	36 fe       	sbrs	r3, 6
     d4a:	06 c0       	rjmp	.+12     	; 0xd58 <vfprintf+0xc4>
     d4c:	8a e0       	ldi	r24, 0x0A	; 10
     d4e:	98 9e       	mul	r9, r24
     d50:	20 0d       	add	r18, r0
     d52:	11 24       	eor	r1, r1
     d54:	92 2e       	mov	r9, r18
     d56:	11 c0       	rjmp	.+34     	; 0xd7a <vfprintf+0xe6>
     d58:	ea e0       	ldi	r30, 0x0A	; 10
     d5a:	2e 9e       	mul	r2, r30
     d5c:	20 0d       	add	r18, r0
     d5e:	11 24       	eor	r1, r1
     d60:	22 2e       	mov	r2, r18
     d62:	f3 2d       	mov	r31, r3
     d64:	f0 62       	ori	r31, 0x20	; 32
     d66:	3f 2e       	mov	r3, r31
     d68:	08 c0       	rjmp	.+16     	; 0xd7a <vfprintf+0xe6>
     d6a:	8c 36       	cpi	r24, 0x6C	; 108
     d6c:	21 f4       	brne	.+8      	; 0xd76 <vfprintf+0xe2>
     d6e:	83 2d       	mov	r24, r3
     d70:	80 68       	ori	r24, 0x80	; 128
     d72:	38 2e       	mov	r3, r24
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <vfprintf+0xe6>
     d76:	88 36       	cpi	r24, 0x68	; 104
     d78:	41 f4       	brne	.+16     	; 0xd8a <vfprintf+0xf6>
     d7a:	f7 01       	movw	r30, r14
     d7c:	93 fd       	sbrc	r25, 3
     d7e:	85 91       	lpm	r24, Z+
     d80:	93 ff       	sbrs	r25, 3
     d82:	81 91       	ld	r24, Z+
     d84:	7f 01       	movw	r14, r30
     d86:	81 11       	cpse	r24, r1
     d88:	b3 cf       	rjmp	.-154    	; 0xcf0 <vfprintf+0x5c>
     d8a:	98 2f       	mov	r25, r24
     d8c:	9f 7d       	andi	r25, 0xDF	; 223
     d8e:	95 54       	subi	r25, 0x45	; 69
     d90:	93 30       	cpi	r25, 0x03	; 3
     d92:	28 f4       	brcc	.+10     	; 0xd9e <vfprintf+0x10a>
     d94:	0c 5f       	subi	r16, 0xFC	; 252
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	9f e3       	ldi	r25, 0x3F	; 63
     d9a:	99 83       	std	Y+1, r25	; 0x01
     d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <vfprintf+0x124>
     d9e:	83 36       	cpi	r24, 0x63	; 99
     da0:	31 f0       	breq	.+12     	; 0xdae <vfprintf+0x11a>
     da2:	83 37       	cpi	r24, 0x73	; 115
     da4:	71 f0       	breq	.+28     	; 0xdc2 <vfprintf+0x12e>
     da6:	83 35       	cpi	r24, 0x53	; 83
     da8:	09 f0       	breq	.+2      	; 0xdac <vfprintf+0x118>
     daa:	59 c0       	rjmp	.+178    	; 0xe5e <vfprintf+0x1ca>
     dac:	21 c0       	rjmp	.+66     	; 0xdf0 <vfprintf+0x15c>
     dae:	f8 01       	movw	r30, r16
     db0:	80 81       	ld	r24, Z
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	0e 5f       	subi	r16, 0xFE	; 254
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	88 24       	eor	r8, r8
     dba:	83 94       	inc	r8
     dbc:	91 2c       	mov	r9, r1
     dbe:	53 01       	movw	r10, r6
     dc0:	13 c0       	rjmp	.+38     	; 0xde8 <vfprintf+0x154>
     dc2:	28 01       	movw	r4, r16
     dc4:	f2 e0       	ldi	r31, 0x02	; 2
     dc6:	4f 0e       	add	r4, r31
     dc8:	51 1c       	adc	r5, r1
     dca:	f8 01       	movw	r30, r16
     dcc:	a0 80       	ld	r10, Z
     dce:	b1 80       	ldd	r11, Z+1	; 0x01
     dd0:	36 fe       	sbrs	r3, 6
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <vfprintf+0x146>
     dd4:	69 2d       	mov	r22, r9
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <vfprintf+0x14a>
     dda:	6f ef       	ldi	r22, 0xFF	; 255
     ddc:	7f ef       	ldi	r23, 0xFF	; 255
     dde:	c5 01       	movw	r24, r10
     de0:	0e 94 36 08 	call	0x106c	; 0x106c <strnlen>
     de4:	4c 01       	movw	r8, r24
     de6:	82 01       	movw	r16, r4
     de8:	f3 2d       	mov	r31, r3
     dea:	ff 77       	andi	r31, 0x7F	; 127
     dec:	3f 2e       	mov	r3, r31
     dee:	16 c0       	rjmp	.+44     	; 0xe1c <vfprintf+0x188>
     df0:	28 01       	movw	r4, r16
     df2:	22 e0       	ldi	r18, 0x02	; 2
     df4:	42 0e       	add	r4, r18
     df6:	51 1c       	adc	r5, r1
     df8:	f8 01       	movw	r30, r16
     dfa:	a0 80       	ld	r10, Z
     dfc:	b1 80       	ldd	r11, Z+1	; 0x01
     dfe:	36 fe       	sbrs	r3, 6
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <vfprintf+0x174>
     e02:	69 2d       	mov	r22, r9
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <vfprintf+0x178>
     e08:	6f ef       	ldi	r22, 0xFF	; 255
     e0a:	7f ef       	ldi	r23, 0xFF	; 255
     e0c:	c5 01       	movw	r24, r10
     e0e:	0e 94 2b 08 	call	0x1056	; 0x1056 <strnlen_P>
     e12:	4c 01       	movw	r8, r24
     e14:	f3 2d       	mov	r31, r3
     e16:	f0 68       	ori	r31, 0x80	; 128
     e18:	3f 2e       	mov	r3, r31
     e1a:	82 01       	movw	r16, r4
     e1c:	33 fc       	sbrc	r3, 3
     e1e:	1b c0       	rjmp	.+54     	; 0xe56 <vfprintf+0x1c2>
     e20:	82 2d       	mov	r24, r2
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	88 16       	cp	r8, r24
     e26:	99 06       	cpc	r9, r25
     e28:	b0 f4       	brcc	.+44     	; 0xe56 <vfprintf+0x1c2>
     e2a:	b6 01       	movw	r22, r12
     e2c:	80 e2       	ldi	r24, 0x20	; 32
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
     e34:	2a 94       	dec	r2
     e36:	f4 cf       	rjmp	.-24     	; 0xe20 <vfprintf+0x18c>
     e38:	f5 01       	movw	r30, r10
     e3a:	37 fc       	sbrc	r3, 7
     e3c:	85 91       	lpm	r24, Z+
     e3e:	37 fe       	sbrs	r3, 7
     e40:	81 91       	ld	r24, Z+
     e42:	5f 01       	movw	r10, r30
     e44:	b6 01       	movw	r22, r12
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
     e4c:	21 10       	cpse	r2, r1
     e4e:	2a 94       	dec	r2
     e50:	21 e0       	ldi	r18, 0x01	; 1
     e52:	82 1a       	sub	r8, r18
     e54:	91 08       	sbc	r9, r1
     e56:	81 14       	cp	r8, r1
     e58:	91 04       	cpc	r9, r1
     e5a:	71 f7       	brne	.-36     	; 0xe38 <vfprintf+0x1a4>
     e5c:	e8 c0       	rjmp	.+464    	; 0x102e <vfprintf+0x39a>
     e5e:	84 36       	cpi	r24, 0x64	; 100
     e60:	11 f0       	breq	.+4      	; 0xe66 <vfprintf+0x1d2>
     e62:	89 36       	cpi	r24, 0x69	; 105
     e64:	41 f5       	brne	.+80     	; 0xeb6 <vfprintf+0x222>
     e66:	f8 01       	movw	r30, r16
     e68:	37 fe       	sbrs	r3, 7
     e6a:	07 c0       	rjmp	.+14     	; 0xe7a <vfprintf+0x1e6>
     e6c:	60 81       	ld	r22, Z
     e6e:	71 81       	ldd	r23, Z+1	; 0x01
     e70:	82 81       	ldd	r24, Z+2	; 0x02
     e72:	93 81       	ldd	r25, Z+3	; 0x03
     e74:	0c 5f       	subi	r16, 0xFC	; 252
     e76:	1f 4f       	sbci	r17, 0xFF	; 255
     e78:	08 c0       	rjmp	.+16     	; 0xe8a <vfprintf+0x1f6>
     e7a:	60 81       	ld	r22, Z
     e7c:	71 81       	ldd	r23, Z+1	; 0x01
     e7e:	07 2e       	mov	r0, r23
     e80:	00 0c       	add	r0, r0
     e82:	88 0b       	sbc	r24, r24
     e84:	99 0b       	sbc	r25, r25
     e86:	0e 5f       	subi	r16, 0xFE	; 254
     e88:	1f 4f       	sbci	r17, 0xFF	; 255
     e8a:	f3 2d       	mov	r31, r3
     e8c:	ff 76       	andi	r31, 0x6F	; 111
     e8e:	3f 2e       	mov	r3, r31
     e90:	97 ff       	sbrs	r25, 7
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <vfprintf+0x212>
     e94:	90 95       	com	r25
     e96:	80 95       	com	r24
     e98:	70 95       	com	r23
     e9a:	61 95       	neg	r22
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ea0:	9f 4f       	sbci	r25, 0xFF	; 255
     ea2:	f0 68       	ori	r31, 0x80	; 128
     ea4:	3f 2e       	mov	r3, r31
     ea6:	2a e0       	ldi	r18, 0x0A	; 10
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	a3 01       	movw	r20, r6
     eac:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__ultoa_invert>
     eb0:	88 2e       	mov	r8, r24
     eb2:	86 18       	sub	r8, r6
     eb4:	45 c0       	rjmp	.+138    	; 0xf40 <vfprintf+0x2ac>
     eb6:	85 37       	cpi	r24, 0x75	; 117
     eb8:	31 f4       	brne	.+12     	; 0xec6 <vfprintf+0x232>
     eba:	23 2d       	mov	r18, r3
     ebc:	2f 7e       	andi	r18, 0xEF	; 239
     ebe:	b2 2e       	mov	r11, r18
     ec0:	2a e0       	ldi	r18, 0x0A	; 10
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	25 c0       	rjmp	.+74     	; 0xf10 <vfprintf+0x27c>
     ec6:	93 2d       	mov	r25, r3
     ec8:	99 7f       	andi	r25, 0xF9	; 249
     eca:	b9 2e       	mov	r11, r25
     ecc:	8f 36       	cpi	r24, 0x6F	; 111
     ece:	c1 f0       	breq	.+48     	; 0xf00 <vfprintf+0x26c>
     ed0:	18 f4       	brcc	.+6      	; 0xed8 <vfprintf+0x244>
     ed2:	88 35       	cpi	r24, 0x58	; 88
     ed4:	79 f0       	breq	.+30     	; 0xef4 <vfprintf+0x260>
     ed6:	b5 c0       	rjmp	.+362    	; 0x1042 <vfprintf+0x3ae>
     ed8:	80 37       	cpi	r24, 0x70	; 112
     eda:	19 f0       	breq	.+6      	; 0xee2 <vfprintf+0x24e>
     edc:	88 37       	cpi	r24, 0x78	; 120
     ede:	21 f0       	breq	.+8      	; 0xee8 <vfprintf+0x254>
     ee0:	b0 c0       	rjmp	.+352    	; 0x1042 <vfprintf+0x3ae>
     ee2:	e9 2f       	mov	r30, r25
     ee4:	e0 61       	ori	r30, 0x10	; 16
     ee6:	be 2e       	mov	r11, r30
     ee8:	b4 fe       	sbrs	r11, 4
     eea:	0d c0       	rjmp	.+26     	; 0xf06 <vfprintf+0x272>
     eec:	fb 2d       	mov	r31, r11
     eee:	f4 60       	ori	r31, 0x04	; 4
     ef0:	bf 2e       	mov	r11, r31
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <vfprintf+0x272>
     ef4:	34 fe       	sbrs	r3, 4
     ef6:	0a c0       	rjmp	.+20     	; 0xf0c <vfprintf+0x278>
     ef8:	29 2f       	mov	r18, r25
     efa:	26 60       	ori	r18, 0x06	; 6
     efc:	b2 2e       	mov	r11, r18
     efe:	06 c0       	rjmp	.+12     	; 0xf0c <vfprintf+0x278>
     f00:	28 e0       	ldi	r18, 0x08	; 8
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <vfprintf+0x27c>
     f06:	20 e1       	ldi	r18, 0x10	; 16
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <vfprintf+0x27c>
     f0c:	20 e1       	ldi	r18, 0x10	; 16
     f0e:	32 e0       	ldi	r19, 0x02	; 2
     f10:	f8 01       	movw	r30, r16
     f12:	b7 fe       	sbrs	r11, 7
     f14:	07 c0       	rjmp	.+14     	; 0xf24 <vfprintf+0x290>
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	82 81       	ldd	r24, Z+2	; 0x02
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	0c 5f       	subi	r16, 0xFC	; 252
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
     f22:	06 c0       	rjmp	.+12     	; 0xf30 <vfprintf+0x29c>
     f24:	60 81       	ld	r22, Z
     f26:	71 81       	ldd	r23, Z+1	; 0x01
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 5f       	subi	r16, 0xFE	; 254
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
     f30:	a3 01       	movw	r20, r6
     f32:	0e 94 7d 08 	call	0x10fa	; 0x10fa <__ultoa_invert>
     f36:	88 2e       	mov	r8, r24
     f38:	86 18       	sub	r8, r6
     f3a:	fb 2d       	mov	r31, r11
     f3c:	ff 77       	andi	r31, 0x7F	; 127
     f3e:	3f 2e       	mov	r3, r31
     f40:	36 fe       	sbrs	r3, 6
     f42:	0d c0       	rjmp	.+26     	; 0xf5e <vfprintf+0x2ca>
     f44:	23 2d       	mov	r18, r3
     f46:	2e 7f       	andi	r18, 0xFE	; 254
     f48:	a2 2e       	mov	r10, r18
     f4a:	89 14       	cp	r8, r9
     f4c:	58 f4       	brcc	.+22     	; 0xf64 <vfprintf+0x2d0>
     f4e:	34 fe       	sbrs	r3, 4
     f50:	0b c0       	rjmp	.+22     	; 0xf68 <vfprintf+0x2d4>
     f52:	32 fc       	sbrc	r3, 2
     f54:	09 c0       	rjmp	.+18     	; 0xf68 <vfprintf+0x2d4>
     f56:	83 2d       	mov	r24, r3
     f58:	8e 7e       	andi	r24, 0xEE	; 238
     f5a:	a8 2e       	mov	r10, r24
     f5c:	05 c0       	rjmp	.+10     	; 0xf68 <vfprintf+0x2d4>
     f5e:	b8 2c       	mov	r11, r8
     f60:	a3 2c       	mov	r10, r3
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <vfprintf+0x2d6>
     f64:	b8 2c       	mov	r11, r8
     f66:	01 c0       	rjmp	.+2      	; 0xf6a <vfprintf+0x2d6>
     f68:	b9 2c       	mov	r11, r9
     f6a:	a4 fe       	sbrs	r10, 4
     f6c:	0f c0       	rjmp	.+30     	; 0xf8c <vfprintf+0x2f8>
     f6e:	fe 01       	movw	r30, r28
     f70:	e8 0d       	add	r30, r8
     f72:	f1 1d       	adc	r31, r1
     f74:	80 81       	ld	r24, Z
     f76:	80 33       	cpi	r24, 0x30	; 48
     f78:	21 f4       	brne	.+8      	; 0xf82 <vfprintf+0x2ee>
     f7a:	9a 2d       	mov	r25, r10
     f7c:	99 7e       	andi	r25, 0xE9	; 233
     f7e:	a9 2e       	mov	r10, r25
     f80:	09 c0       	rjmp	.+18     	; 0xf94 <vfprintf+0x300>
     f82:	a2 fe       	sbrs	r10, 2
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <vfprintf+0x2fe>
     f86:	b3 94       	inc	r11
     f88:	b3 94       	inc	r11
     f8a:	04 c0       	rjmp	.+8      	; 0xf94 <vfprintf+0x300>
     f8c:	8a 2d       	mov	r24, r10
     f8e:	86 78       	andi	r24, 0x86	; 134
     f90:	09 f0       	breq	.+2      	; 0xf94 <vfprintf+0x300>
     f92:	b3 94       	inc	r11
     f94:	a3 fc       	sbrc	r10, 3
     f96:	11 c0       	rjmp	.+34     	; 0xfba <vfprintf+0x326>
     f98:	a0 fe       	sbrs	r10, 0
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <vfprintf+0x314>
     f9c:	b2 14       	cp	r11, r2
     f9e:	88 f4       	brcc	.+34     	; 0xfc2 <vfprintf+0x32e>
     fa0:	28 0c       	add	r2, r8
     fa2:	92 2c       	mov	r9, r2
     fa4:	9b 18       	sub	r9, r11
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <vfprintf+0x330>
     fa8:	b2 14       	cp	r11, r2
     faa:	60 f4       	brcc	.+24     	; 0xfc4 <vfprintf+0x330>
     fac:	b6 01       	movw	r22, r12
     fae:	80 e2       	ldi	r24, 0x20	; 32
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
     fb6:	b3 94       	inc	r11
     fb8:	f7 cf       	rjmp	.-18     	; 0xfa8 <vfprintf+0x314>
     fba:	b2 14       	cp	r11, r2
     fbc:	18 f4       	brcc	.+6      	; 0xfc4 <vfprintf+0x330>
     fbe:	2b 18       	sub	r2, r11
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <vfprintf+0x332>
     fc2:	98 2c       	mov	r9, r8
     fc4:	21 2c       	mov	r2, r1
     fc6:	a4 fe       	sbrs	r10, 4
     fc8:	10 c0       	rjmp	.+32     	; 0xfea <vfprintf+0x356>
     fca:	b6 01       	movw	r22, r12
     fcc:	80 e3       	ldi	r24, 0x30	; 48
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
     fd4:	a2 fe       	sbrs	r10, 2
     fd6:	17 c0       	rjmp	.+46     	; 0x1006 <vfprintf+0x372>
     fd8:	a1 fc       	sbrc	r10, 1
     fda:	03 c0       	rjmp	.+6      	; 0xfe2 <vfprintf+0x34e>
     fdc:	88 e7       	ldi	r24, 0x78	; 120
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <vfprintf+0x352>
     fe2:	88 e5       	ldi	r24, 0x58	; 88
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	b6 01       	movw	r22, r12
     fe8:	0c c0       	rjmp	.+24     	; 0x1002 <vfprintf+0x36e>
     fea:	8a 2d       	mov	r24, r10
     fec:	86 78       	andi	r24, 0x86	; 134
     fee:	59 f0       	breq	.+22     	; 0x1006 <vfprintf+0x372>
     ff0:	a1 fe       	sbrs	r10, 1
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <vfprintf+0x364>
     ff4:	8b e2       	ldi	r24, 0x2B	; 43
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <vfprintf+0x366>
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	a7 fc       	sbrc	r10, 7
     ffc:	8d e2       	ldi	r24, 0x2D	; 45
     ffe:	b6 01       	movw	r22, r12
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
    1006:	89 14       	cp	r8, r9
    1008:	38 f4       	brcc	.+14     	; 0x1018 <vfprintf+0x384>
    100a:	b6 01       	movw	r22, r12
    100c:	80 e3       	ldi	r24, 0x30	; 48
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
    1014:	9a 94       	dec	r9
    1016:	f7 cf       	rjmp	.-18     	; 0x1006 <vfprintf+0x372>
    1018:	8a 94       	dec	r8
    101a:	f3 01       	movw	r30, r6
    101c:	e8 0d       	add	r30, r8
    101e:	f1 1d       	adc	r31, r1
    1020:	80 81       	ld	r24, Z
    1022:	b6 01       	movw	r22, r12
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
    102a:	81 10       	cpse	r8, r1
    102c:	f5 cf       	rjmp	.-22     	; 0x1018 <vfprintf+0x384>
    102e:	22 20       	and	r2, r2
    1030:	09 f4       	brne	.+2      	; 0x1034 <vfprintf+0x3a0>
    1032:	42 ce       	rjmp	.-892    	; 0xcb8 <vfprintf+0x24>
    1034:	b6 01       	movw	r22, r12
    1036:	80 e2       	ldi	r24, 0x20	; 32
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 41 08 	call	0x1082	; 0x1082 <fputc>
    103e:	2a 94       	dec	r2
    1040:	f6 cf       	rjmp	.-20     	; 0x102e <vfprintf+0x39a>
    1042:	f6 01       	movw	r30, r12
    1044:	86 81       	ldd	r24, Z+6	; 0x06
    1046:	97 81       	ldd	r25, Z+7	; 0x07
    1048:	02 c0       	rjmp	.+4      	; 0x104e <vfprintf+0x3ba>
    104a:	8f ef       	ldi	r24, 0xFF	; 255
    104c:	9f ef       	ldi	r25, 0xFF	; 255
    104e:	2b 96       	adiw	r28, 0x0b	; 11
    1050:	e2 e1       	ldi	r30, 0x12	; 18
    1052:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <__epilogue_restores__>

00001056 <strnlen_P>:
    1056:	fc 01       	movw	r30, r24
    1058:	05 90       	lpm	r0, Z+
    105a:	61 50       	subi	r22, 0x01	; 1
    105c:	70 40       	sbci	r23, 0x00	; 0
    105e:	01 10       	cpse	r0, r1
    1060:	d8 f7       	brcc	.-10     	; 0x1058 <strnlen_P+0x2>
    1062:	80 95       	com	r24
    1064:	90 95       	com	r25
    1066:	8e 0f       	add	r24, r30
    1068:	9f 1f       	adc	r25, r31
    106a:	08 95       	ret

0000106c <strnlen>:
    106c:	fc 01       	movw	r30, r24
    106e:	61 50       	subi	r22, 0x01	; 1
    1070:	70 40       	sbci	r23, 0x00	; 0
    1072:	01 90       	ld	r0, Z+
    1074:	01 10       	cpse	r0, r1
    1076:	d8 f7       	brcc	.-10     	; 0x106e <strnlen+0x2>
    1078:	80 95       	com	r24
    107a:	90 95       	com	r25
    107c:	8e 0f       	add	r24, r30
    107e:	9f 1f       	adc	r25, r31
    1080:	08 95       	ret

00001082 <fputc>:
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	fb 01       	movw	r30, r22
    108c:	23 81       	ldd	r18, Z+3	; 0x03
    108e:	21 fd       	sbrc	r18, 1
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <fputc+0x16>
    1092:	8f ef       	ldi	r24, 0xFF	; 255
    1094:	9f ef       	ldi	r25, 0xFF	; 255
    1096:	2c c0       	rjmp	.+88     	; 0x10f0 <fputc+0x6e>
    1098:	22 ff       	sbrs	r18, 2
    109a:	16 c0       	rjmp	.+44     	; 0x10c8 <fputc+0x46>
    109c:	46 81       	ldd	r20, Z+6	; 0x06
    109e:	57 81       	ldd	r21, Z+7	; 0x07
    10a0:	24 81       	ldd	r18, Z+4	; 0x04
    10a2:	35 81       	ldd	r19, Z+5	; 0x05
    10a4:	42 17       	cp	r20, r18
    10a6:	53 07       	cpc	r21, r19
    10a8:	44 f4       	brge	.+16     	; 0x10ba <fputc+0x38>
    10aa:	a0 81       	ld	r26, Z
    10ac:	b1 81       	ldd	r27, Z+1	; 0x01
    10ae:	9d 01       	movw	r18, r26
    10b0:	2f 5f       	subi	r18, 0xFF	; 255
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	31 83       	std	Z+1, r19	; 0x01
    10b6:	20 83       	st	Z, r18
    10b8:	8c 93       	st	X, r24
    10ba:	26 81       	ldd	r18, Z+6	; 0x06
    10bc:	37 81       	ldd	r19, Z+7	; 0x07
    10be:	2f 5f       	subi	r18, 0xFF	; 255
    10c0:	3f 4f       	sbci	r19, 0xFF	; 255
    10c2:	37 83       	std	Z+7, r19	; 0x07
    10c4:	26 83       	std	Z+6, r18	; 0x06
    10c6:	14 c0       	rjmp	.+40     	; 0x10f0 <fputc+0x6e>
    10c8:	8b 01       	movw	r16, r22
    10ca:	ec 01       	movw	r28, r24
    10cc:	fb 01       	movw	r30, r22
    10ce:	00 84       	ldd	r0, Z+8	; 0x08
    10d0:	f1 85       	ldd	r31, Z+9	; 0x09
    10d2:	e0 2d       	mov	r30, r0
    10d4:	09 95       	icall
    10d6:	89 2b       	or	r24, r25
    10d8:	e1 f6       	brne	.-72     	; 0x1092 <fputc+0x10>
    10da:	d8 01       	movw	r26, r16
    10dc:	16 96       	adiw	r26, 0x06	; 6
    10de:	8d 91       	ld	r24, X+
    10e0:	9c 91       	ld	r25, X
    10e2:	17 97       	sbiw	r26, 0x07	; 7
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	17 96       	adiw	r26, 0x07	; 7
    10e8:	9c 93       	st	X, r25
    10ea:	8e 93       	st	-X, r24
    10ec:	16 97       	sbiw	r26, 0x06	; 6
    10ee:	ce 01       	movw	r24, r28
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	08 95       	ret

000010fa <__ultoa_invert>:
    10fa:	fa 01       	movw	r30, r20
    10fc:	aa 27       	eor	r26, r26
    10fe:	28 30       	cpi	r18, 0x08	; 8
    1100:	51 f1       	breq	.+84     	; 0x1156 <__ultoa_invert+0x5c>
    1102:	20 31       	cpi	r18, 0x10	; 16
    1104:	81 f1       	breq	.+96     	; 0x1166 <__ultoa_invert+0x6c>
    1106:	e8 94       	clt
    1108:	6f 93       	push	r22
    110a:	6e 7f       	andi	r22, 0xFE	; 254
    110c:	6e 5f       	subi	r22, 0xFE	; 254
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	8f 4f       	sbci	r24, 0xFF	; 255
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	af 4f       	sbci	r26, 0xFF	; 255
    1116:	b1 e0       	ldi	r27, 0x01	; 1
    1118:	3e d0       	rcall	.+124    	; 0x1196 <__ultoa_invert+0x9c>
    111a:	b4 e0       	ldi	r27, 0x04	; 4
    111c:	3c d0       	rcall	.+120    	; 0x1196 <__ultoa_invert+0x9c>
    111e:	67 0f       	add	r22, r23
    1120:	78 1f       	adc	r23, r24
    1122:	89 1f       	adc	r24, r25
    1124:	9a 1f       	adc	r25, r26
    1126:	a1 1d       	adc	r26, r1
    1128:	68 0f       	add	r22, r24
    112a:	79 1f       	adc	r23, r25
    112c:	8a 1f       	adc	r24, r26
    112e:	91 1d       	adc	r25, r1
    1130:	a1 1d       	adc	r26, r1
    1132:	6a 0f       	add	r22, r26
    1134:	71 1d       	adc	r23, r1
    1136:	81 1d       	adc	r24, r1
    1138:	91 1d       	adc	r25, r1
    113a:	a1 1d       	adc	r26, r1
    113c:	20 d0       	rcall	.+64     	; 0x117e <__ultoa_invert+0x84>
    113e:	09 f4       	brne	.+2      	; 0x1142 <__ultoa_invert+0x48>
    1140:	68 94       	set
    1142:	3f 91       	pop	r19
    1144:	2a e0       	ldi	r18, 0x0A	; 10
    1146:	26 9f       	mul	r18, r22
    1148:	11 24       	eor	r1, r1
    114a:	30 19       	sub	r19, r0
    114c:	30 5d       	subi	r19, 0xD0	; 208
    114e:	31 93       	st	Z+, r19
    1150:	de f6       	brtc	.-74     	; 0x1108 <__ultoa_invert+0xe>
    1152:	cf 01       	movw	r24, r30
    1154:	08 95       	ret
    1156:	46 2f       	mov	r20, r22
    1158:	47 70       	andi	r20, 0x07	; 7
    115a:	40 5d       	subi	r20, 0xD0	; 208
    115c:	41 93       	st	Z+, r20
    115e:	b3 e0       	ldi	r27, 0x03	; 3
    1160:	0f d0       	rcall	.+30     	; 0x1180 <__ultoa_invert+0x86>
    1162:	c9 f7       	brne	.-14     	; 0x1156 <__ultoa_invert+0x5c>
    1164:	f6 cf       	rjmp	.-20     	; 0x1152 <__ultoa_invert+0x58>
    1166:	46 2f       	mov	r20, r22
    1168:	4f 70       	andi	r20, 0x0F	; 15
    116a:	40 5d       	subi	r20, 0xD0	; 208
    116c:	4a 33       	cpi	r20, 0x3A	; 58
    116e:	18 f0       	brcs	.+6      	; 0x1176 <__ultoa_invert+0x7c>
    1170:	49 5d       	subi	r20, 0xD9	; 217
    1172:	31 fd       	sbrc	r19, 1
    1174:	40 52       	subi	r20, 0x20	; 32
    1176:	41 93       	st	Z+, r20
    1178:	02 d0       	rcall	.+4      	; 0x117e <__ultoa_invert+0x84>
    117a:	a9 f7       	brne	.-22     	; 0x1166 <__ultoa_invert+0x6c>
    117c:	ea cf       	rjmp	.-44     	; 0x1152 <__ultoa_invert+0x58>
    117e:	b4 e0       	ldi	r27, 0x04	; 4
    1180:	a6 95       	lsr	r26
    1182:	97 95       	ror	r25
    1184:	87 95       	ror	r24
    1186:	77 95       	ror	r23
    1188:	67 95       	ror	r22
    118a:	ba 95       	dec	r27
    118c:	c9 f7       	brne	.-14     	; 0x1180 <__ultoa_invert+0x86>
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	61 05       	cpc	r22, r1
    1192:	71 05       	cpc	r23, r1
    1194:	08 95       	ret
    1196:	9b 01       	movw	r18, r22
    1198:	ac 01       	movw	r20, r24
    119a:	0a 2e       	mov	r0, r26
    119c:	06 94       	lsr	r0
    119e:	57 95       	ror	r21
    11a0:	47 95       	ror	r20
    11a2:	37 95       	ror	r19
    11a4:	27 95       	ror	r18
    11a6:	ba 95       	dec	r27
    11a8:	c9 f7       	brne	.-14     	; 0x119c <__ultoa_invert+0xa2>
    11aa:	62 0f       	add	r22, r18
    11ac:	73 1f       	adc	r23, r19
    11ae:	84 1f       	adc	r24, r20
    11b0:	95 1f       	adc	r25, r21
    11b2:	a0 1d       	adc	r26, r0
    11b4:	08 95       	ret

000011b6 <__prologue_saves__>:
    11b6:	2f 92       	push	r2
    11b8:	3f 92       	push	r3
    11ba:	4f 92       	push	r4
    11bc:	5f 92       	push	r5
    11be:	6f 92       	push	r6
    11c0:	7f 92       	push	r7
    11c2:	8f 92       	push	r8
    11c4:	9f 92       	push	r9
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	ca 1b       	sub	r28, r26
    11e0:	db 0b       	sbc	r29, r27
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	09 94       	ijmp

000011ee <__epilogue_restores__>:
    11ee:	2a 88       	ldd	r2, Y+18	; 0x12
    11f0:	39 88       	ldd	r3, Y+17	; 0x11
    11f2:	48 88       	ldd	r4, Y+16	; 0x10
    11f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    11f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    11f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    11fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    11fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    11fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1200:	b9 84       	ldd	r11, Y+9	; 0x09
    1202:	c8 84       	ldd	r12, Y+8	; 0x08
    1204:	df 80       	ldd	r13, Y+7	; 0x07
    1206:	ee 80       	ldd	r14, Y+6	; 0x06
    1208:	fd 80       	ldd	r15, Y+5	; 0x05
    120a:	0c 81       	ldd	r16, Y+4	; 0x04
    120c:	1b 81       	ldd	r17, Y+3	; 0x03
    120e:	aa 81       	ldd	r26, Y+2	; 0x02
    1210:	b9 81       	ldd	r27, Y+1	; 0x01
    1212:	ce 0f       	add	r28, r30
    1214:	d1 1d       	adc	r29, r1
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	ed 01       	movw	r28, r26
    1222:	08 95       	ret

00001224 <_exit>:
    1224:	f8 94       	cli

00001226 <__stop_program>:
    1226:	ff cf       	rjmp	.-2      	; 0x1226 <__stop_program>
